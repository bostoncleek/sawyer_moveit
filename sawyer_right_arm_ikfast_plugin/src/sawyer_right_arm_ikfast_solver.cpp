/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-04-24 20:23:59.690710
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79;
x0=IKsin(j[2]);
x1=IKcos(j[5]);
x2=IKcos(j[6]);
x3=IKcos(j[2]);
x4=IKcos(j[4]);
x5=IKcos(j[3]);
x6=IKsin(j[4]);
x7=IKsin(j[6]);
x8=IKsin(j[5]);
x9=IKsin(j[3]);
x10=IKsin(j[1]);
x11=IKcos(j[1]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((0.1685)*x3);
x15=((0.1345)*x11);
x16=((0.984809344788631)*x2);
x17=((0.984809344788631)*x7);
x18=((0.173639150012279)*x7);
x19=((1.0)*x3);
x20=((0.173639150012279)*x2);
x21=((0.1345)*x5);
x22=((1.0)*x11);
x23=((0.4)*x10);
x24=((0.1363)*x3);
x25=((0.1685)*x0);
x26=((1.0)*x8);
x27=((0.4)*x11);
x28=((0.1345)*x4);
x29=((1.0)*x1);
x30=(x0*x4);
x31=(x0*x6);
x32=(x10*x9);
x33=(x3*x6);
x34=(x3*x9);
x35=(x0*x9);
x36=(x11*x5);
x37=(x11*x9);
x38=(x10*x5);
x39=(x22*x5);
x40=((0.4)*x35);
x41=(x24*x4);
x42=((1.0)*x32);
x43=(x26*x35);
x44=((0.1345)*x1*x35);
x45=((0.1363)*x31*x5);
x46=(x22*x31);
x47=(((x30*x5))+x33);
x48=(((x3*x4))+(((-1.0)*x31*x5)));
x49=((((-1.0)*x39))+((x3*x32)));
x50=((((-1.0)*x42))+((x3*x36)));
x51=(x45+x14);
x52=(((x19*x38))+((x22*x9)));
x53=((-1.0)*x52);
x54=((((0.1345)*x33))+((x21*x30)));
x55=((((-1.0)*x38))+(((-1.0)*x19*x37)));
x56=(x49*x8);
x57=(x1*x47);
x58=(x4*x50);
x59=(x54*x8);
x60=(x44+x40+x41);
x61=((((-1.0)*x43))+x57);
x62=((((-1.0)*x46))+x58);
x63=(x43+(((-1.0)*x29*x47)));
x64=((((-1.0)*x22*x30))+((x6*(((((-1.0)*x19*x36))+x42)))));
x65=(((x10*x31))+((x4*x53)));
x66=(((x10*x30))+((x52*x6)));
x67=(x1*x62);
x68=(x1*x65);
x69=(x56+x68);
x70=(((x16*x61))+((x17*x48)));
x71=(x67+((x55*x8)));
x72=(((x20*x48))+((x18*x63)));
x73=(((x1*(((((-1.0)*x19*x32))+x39))))+((x65*x8)));
x74=((((-1.0)*x29*x62))+(((-1.0)*x26*x55)));
x75=((((-1.0)*x56))+(((-1.0)*x68)));
x76=(((x20*x61))+((x18*x48))+((x17*x63))+((x16*x48)));
x77=(((x27*x5))+((x8*((((x28*x53))+(((0.1345)*x10*x31))))))+((x10*(((((0.1363)*x30))+(((-1.0)*x25))))))+((x1*(((((-0.1345)*x3*x32))+((x15*x5))))))+((x6*(((((0.1363)*x37))+((x24*x38))))))+x27+(((-1.0)*x23*x34)));
x78=((((-1.0)*x18*x75))+(((-1.0)*x20*x66))+((x16*x69))+((x17*x66)));
IkReal x80=((1.0)*x66);
x79=((((-1.0)*x16*x80))+(((-1.0)*x20*x69))+(((-1.0)*x17*x75))+(((-1.0)*x18*x80)));
eerot[0]=(((x12*x76))+((x13*x79)));
eerot[1]=(((x12*((x72+(((-1.0)*x70))))))+((x13*x78)));
eerot[2]=(((x13*x73))+((x12*(((((-1.0)*x29*x35))+(((-1.0)*x26*x47)))))));
eetrans[0]=((((-0.05)*x12))+(((0.081)*x13))+((x12*(((-0.1425)+(((-1.0)*x26*x54))+x51+(((-1.0)*x60))))))+((x13*x77)));
eerot[3]=(((x12*x79))+(((-1.0)*x13*x76)));
eerot[4]=(((x12*x78))+((x13*((x70+(((-1.0)*x72)))))));
eerot[5]=(((x13*((((x47*x8))+((x1*x35))))))+((x12*x73)));
eetrans[1]=((((0.081)*x12))+(((0.05)*x13))+((x12*x77))+((x13*(((0.1425)+x59+x60+(((-1.0)*x51)))))));
eerot[6]=(((x17*x74))+((x16*x64))+((x18*x64))+((x20*x71)));
eerot[7]=(((x20*x64))+((x18*x74))+(((-1.0)*x17*x64))+(((-1.0)*x16*x71)));
eerot[8]=(((x1*x55))+((x8*((x46+(((-1.0)*x58)))))));
IkReal x81=((1.0)*x23);
IkReal x82=((1.0)*x34);
eetrans[2]=((0.317)+((x1*(((((-1.0)*x10*x21))+(((-1.0)*x15*x82))))))+(((-1.0)*x5*x81))+(((-1.0)*x27*x82))+(((-1.0)*x11*x25))+((x6*(((((-0.1363)*x32))+((x24*x36))))))+((x8*(((((-1.0)*x28*x50))+((x15*x31))))))+(((-1.0)*x81))+(((0.1363)*x11*x30)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x83=IKcos(j0);
IkReal x84=IKsin(j0);
new_r00=((((-0.173639150012279)*r10*x84))+(((0.984809344788631)*r11*x84))+(((-0.173639150012279)*r00*x83))+(((0.984809344788631)*r01*x83)));
IkReal x85=IKcos(j0);
IkReal x86=IKsin(j0);
new_r01=((((-0.173639150012279)*r01*x85))+(((-0.984809344788631)*r10*x86))+(((-0.173639150012279)*r11*x86))+(((-0.984809344788631)*r00*x85)));
new_r02=(((r12*(IKsin(j0))))+((r02*(IKcos(j0)))));
IkReal x87=IKsin(j0);
IkReal x88=IKcos(j0);
new_px=((-0.081)+((py*x87))+(((-0.1345)*r12*x87))+((px*x88))+(((-0.1345)*r02*x88)));
new_r10=((((0.173639150012279)*r20))+(((-0.984809344788631)*r21)));
new_r11=((((0.984809344788631)*r20))+(((0.173639150012279)*r21)));
new_r12=((-1.0)*r22);
new_py=((0.317)+(((-1.0)*pz))+(((0.1345)*r22)));
IkReal x89=IKsin(j0);
IkReal x90=IKcos(j0);
new_r20=((((-0.173639150012279)*r10*x90))+(((0.984809344788631)*r11*x90))+(((0.173639150012279)*r00*x89))+(((-0.984809344788631)*r01*x89)));
IkReal x91=IKsin(j0);
IkReal x92=IKcos(j0);
new_r21=((((0.984809344788631)*r00*x91))+(((0.173639150012279)*r01*x91))+(((-0.984809344788631)*r10*x92))+(((-0.173639150012279)*r11*x92)));
new_r22=((((-1.0)*r02*(IKsin(j0))))+((r12*(IKcos(j0)))));
IkReal x93=IKsin(j0);
IkReal x94=IKcos(j0);
new_pz=((-0.05)+(((-1.0)*px*x93))+((py*x94))+(((0.1345)*r02*x93))+(((-0.1345)*r12*x94)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x95=((1.0)*px);
IkReal x96=((1.0)*pz);
IkReal x97=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x97))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x96)));
rxp0_2=((((-1.0)*r10*x95))+((py*r00)));
rxp1_0=((((-1.0)*r21*x97))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x96)));
rxp1_2=((((-1.0)*r11*x95))+((py*r01)));
rxp2_0=((((-1.0)*r22*x97))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x96)));
rxp2_2=((((-1.0)*r12*x95))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x98=((0.00990532948728885)*rxp2_2);
IkReal x99=((0.000129904557910617)*r12);
IkReal x100=((0.00990532948728885)*py);
IkReal x101=((0.000480971845748099)*r00);
IkReal x102=((0.00135009640911747)*r11);
IkReal x103=((0.00337524102279368)*rxp0_1);
IkReal x104=((0.00135009640911747)*r20);
IkReal x105=((0.00352877362984665)*rxp2_0);
IkReal x106=((0.000480971845748099)*r10);
IkReal x107=((0.00990532948728885)*px);
IkReal x108=((0.000129904557910617)*r02);
IkReal x109=((0.00135009640911747)*r01);
IkReal x110=((0.00337524102279368)*rxp0_0);
IkReal x111=((0.00352877362984665)*rxp2_1);
IkReal x112=((0.00270019281823494)*r10);
IkReal x113=((0.00675048204558735)*rxp1_1);
IkReal x114=((0.00270019281823494)*r21);
IkReal x115=((0.000961943691496198)*r01);
IkReal x116=((0.038418)*r22);
IkReal x117=((0.337)*pp);
IkReal x118=((0.0918662)*npy);
IkReal x119=((0.2696)*npz);
IkReal x120=((0.096045)*pz);
IkReal x121=((0.0130909335)*r21);
IkReal x122=((0.00270019281823494)*r22);
IkReal x123=((0.000259809115821234)*r10);
IkReal x124=((0.0198106589745777)*rxp0_2);
IkReal x125=((0.00705754725969331)*rxp0_0);
IkReal x126=((0.00675048204558735)*rxp2_1);
IkReal x127=((0.000961943691496198)*r02);
IkReal x128=((0.00675048204558735)*rxp2_0);
IkReal x129=((0.000259809115821234)*r00);
IkReal x130=((0.00705754725969331)*rxp0_1);
IkReal x131=((0.000961943691496198)*r12);
IkReal x132=((0.0396213179491554)*rxp1_2);
IkReal x133=((0.0141150945193866)*rxp1_0);
IkReal x134=((0.000519618231642468)*r11);
IkReal x135=((0.076836)*r20);
IkReal x136=((0.5392)*npx);
IkReal x137=((0.00675048204558735)*rxp1_0);
IkReal x138=((0.00270019281823494)*r00);
IkReal x139=((0.000961943691496198)*r11);
IkReal x140=((0.0247633237182221)*npz);
IkReal x141=((0.0990532948728885)*npy);
IkReal x142=((0.0495266474364443)*npx);
IkReal x143=((0.0495266474364443)*pp);
IkReal x144=((0.0247633237182221)*pp);
IkReal x145=((0.0123816618591111)*pp);
IkReal x146=(r12*x145);
IkReal x147=(py*x140);
IkReal x148=(px*x140);
IkReal x149=(r02*x145);
IkReal x150=((((0.026181867)*r20))+(((-0.1837324)*npx)));
IkReal x151=(r10*x144);
IkReal x152=(py*x142);
IkReal x153=(px*x142);
IkReal x154=(r00*x144);
IkReal x155=(py*x141);
IkReal x156=(r11*x143);
IkReal x157=(x136+(((-1.0)*x135)));
IkReal x158=((((0.153672)*r21))+(((-1.0784)*npy)));
IkReal x159=(x135+(((-1.0)*x136)));
IkReal x160=(x126+x127);
IkReal x161=(x100+x98);
IkReal x162=(x120+x118);
IkReal x163=(x101+x103);
IkReal x164=(x110+x107);
IkReal x165=(x120+x121);
IkReal x166=(x113+x115);
IkReal x167=(x139+x138+(((-1.0)*x137)));
IkReal x168=(x137+x138+(((-1.0)*x139)));
IkReal x169=(x147+x105);
IkReal x170=(x156+x134);
IkReal x171=(x146+x99);
IkReal x172=(x152+x125);
IkReal x173=(x148+x106);
IkReal x174=((0.00353569953)+x121+x117);
IkReal x175=(x151+x123);
IkReal x176=((0.00353569953)+x117+x118);
IkReal x177=(x155+x133);
IkReal x178=(x166+x112);
IkReal x179=(x104+x100+x102);
IkReal x180=(x104+x102+x98);
IkReal x181=(x172+x124);
IkReal x182=(x154+x130+x129);
IkReal x183=(x149+x111+x108);
IkReal x184=(x163+x161);
IkReal x185=((((-0.0141150945193866)*rxp1_1))+(((-1.0)*r01*x143))+((px*x141))+(((-0.000519618231642468)*r01)));
IkReal x186=((((-1.0)*x162))+(((-1.0)*x119))+x174+x116);
IkReal x187=((((-1.0)*x165))+(((-1.0)*x119))+x176+x116);
IkReal x188=((((-1.0)*x162))+(((-1.0)*x116))+x174+x119);
IkReal x189=((((-1.0)*x165))+(((-1.0)*x116))+x176+x119);
IkReal x190=((((-1.0)*x153))+x128+x182+(((-1.0)*x131)));
IkReal x191=((((-1.0)*x182))+x153+x128+(((-1.0)*x131)));
IkReal x192=((((-1.0)*x183))+(((-1.0)*x107))+(((-1.0)*x106))+x148+x110+x109);
IkReal x193=((((-1.0)*x164))+(((-1.0)*x183))+(((-1.0)*x109))+x173);
IkReal x194=((((-1.0)*x148))+(((-1.0)*x164))+x109+x106+x183);
IkReal x195=((((-1.0)*x173))+(((-1.0)*x109))+(((-1.0)*x107))+x110+x183);
op[0]=((((-1.0)*x169))+(((-1.0)*x163))+(((-1.0)*x102))+x171+x161+x104);
op[1]=x192;
op[2]=((((-1.0)*x112))+(((-1.0)*x114))+x166);
op[3]=x167;
op[4]=((((-1.0)*x169))+(((-1.0)*x104))+x171+x102+x184);
op[5]=x193;
op[6]=x192;
op[7]=((((-1.0)*x171))+(((-1.0)*x100))+x169+x163+x180);
op[8]=x167;
op[9]=((((-1.0)*x166))+(((-1.0)*x114))+x112);
op[10]=x193;
op[11]=((((-1.0)*x163))+(((-1.0)*x179))+(((-1.0)*x171))+x169+x98);
op[12]=x186;
op[13]=x186;
op[14]=x150;
op[15]=x150;
op[16]=x187;
op[17]=x187;
op[18]=0;
op[19]=x186;
op[20]=0;
op[21]=x150;
op[22]=0;
op[23]=x187;
op[24]=((((-1.0)*x160))+(((-1.0)*x175))+(((-1.0)*x124))+x172+x122);
op[25]=x190;
op[26]=((((-1.0)*x177))+x170+x132);
op[27]=x185;
op[28]=((((-1.0)*x160))+(((-1.0)*x172))+x175+x124+x122);
op[29]=x191;
op[30]=x190;
op[31]=((((-1.0)*x181))+x175+x160+x122);
op[32]=x185;
op[33]=((((-1.0)*x170))+x177+x132);
op[34]=x191;
op[35]=((((-1.0)*x175))+x160+x122+x181);
op[36]=x157;
op[37]=x157;
op[38]=x158;
op[39]=x158;
op[40]=x159;
op[41]=x159;
op[42]=0;
op[43]=x157;
op[44]=0;
op[45]=x158;
op[46]=0;
op[47]=x159;
op[48]=((((-1.0)*x171))+(((-1.0)*x180))+x169+x163+x100);
op[49]=x194;
op[50]=((((-1.0)*x178))+x114);
op[51]=x168;
op[52]=((((-1.0)*x163))+(((-1.0)*x171))+x179+x169+(((-1.0)*x98)));
op[53]=x195;
op[54]=x194;
op[55]=((((-1.0)*x169))+(((-1.0)*x184))+(((-1.0)*x104))+x171+x102);
op[56]=x168;
op[57]=(x178+x114);
op[58]=x195;
op[59]=((((-1.0)*x169))+(((-1.0)*x161))+(((-1.0)*x102))+x171+x163+x104);
op[60]=x188;
op[61]=x188;
op[62]=x150;
op[63]=x150;
op[64]=x189;
op[65]=x189;
op[66]=0;
op[67]=x188;
op[68]=0;
op[69]=x150;
op[70]=0;
op[71]=x189;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j6array[16], cj6array[16], sj6array[16], j7array[16], cj7array[16], sj7array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ij6 += 3)
{
IkReal htj6 = zeror[ij6+0], htj7 = zeror[ij6+1], htj2 = zeror[ij6+2];
if(isnan(htj6)||isnan(htj7)||isnan(htj2)){
continue;
}
j6array[numsolutions]=((2.0)*(atan(htj6)));
j7array[numsolutions]=((2.0)*(atan(htj7)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x196=htj6*htj6;
CheckValue<IkReal> x197=IKPowWithIntegerCheck(((1.0)+x196),-1);
if(!x197.valid){
continue;
}
cj6array[numsolutions]=((x197.value)*(((1.0)+(((-1.0)*x196)))));
CheckValue<IkReal> x198=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x198.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x198.value));
}
if(isinf(htj7)){
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
}
else{
IkReal x199=htj7*htj7;
CheckValue<IkReal> x200=IKPowWithIntegerCheck(((1.0)+x199),-1);
if(!x200.valid){
continue;
}
cj7array[numsolutions]=((x200.value)*(((1.0)+(((-1.0)*x199)))));
CheckValue<IkReal> x201=IKPowWithIntegerCheck(((1.0)+(htj7*htj7)),-1);
if(!x201.valid){
continue;
}
sj7array[numsolutions]=((2.0)*htj7*(x201.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x202=htj2*htj2;
CheckValue<IkReal> x203=IKPowWithIntegerCheck(((1.0)+x202),-1);
if(!x203.valid){
continue;
}
cj2array[numsolutions]=((x203.value)*(((1.0)+(((-1.0)*x202)))));
CheckValue<IkReal> x204=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x204.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x204.value));
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j6valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj6 = 16;
_nj7 = 1;
_nj2 = 1;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
_ij7[0] = 0; _ij7[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( !j6valid[iij6] ) { continue; }
if( IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(cj7array[ij6]-cj7array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij6]-sj7array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij6]-cj2array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij6]-sj2array[iij6]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j6valid[iij6]=false; _ij6[1] = iij6; _ij7[1] = 0; _ij2[1] = 0;  break; 
}
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

    j7 = j7array[ij6]; cj7 = cj7array[ij6]; sj7 = sj7array[ij6];

    j2 = j2array[ij6]; cj2 = cj2array[ij6]; sj2 = sj2array[ij6];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[1];
IkReal x205=(sj2*sj7);
IkReal x206=((16.0)*cj6);
IkReal x207=(cj2*sj7);
IkReal x208=((8.0)*sj6);
IkReal x209=(cj2*r02);
IkReal x210=(cj7*sj2);
IkReal x211=((8.0)*cj6);
IkReal x212=(r12*sj2);
IkReal x213=(cj2*cj7);
IkReal x214=((16.0)*sj6);
IkReal x215=((((4.0)*r10*x205))+(((4.0)*r11*x210))+(((4.0)*r01*x213))+(((4.0)*r00*x207)));
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r10*x206*x210))+(((-1.0)*r00*x206*x213))+((r11*x205*x206))+((r01*x206*x207))+(((-1.0)*x212*x214))+(((-1.0)*x209*x214)))))))+(((1.5)*(IKabs(x215))))+(IKabs((((r11*x205*x211))+(((-1.0)*r10*x210*x211))+((r01*x207*x211))+(((-1.0)*r00*x211*x213))+(((-1.0)*x208*x209))+(((-1.0)*x208*x212))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x216=(r11*sj7);
IkReal x217=(cj7*r10);
IkReal x218=((4.0)*cj7);
IkReal x219=(r01*sj7);
IkReal x220=(cj7*r00);
IkReal x221=((4.0)*sj7);
IkReal x222=((16.0)*cj6*sj2);
IkReal x223=((8.0)*cj6*sj2);
IkReal x224=(cj2*r02*sj6);
IkReal x225=(r12*sj2*sj6);
IkReal x226=((16.0)*cj2*cj6);
IkReal x227=((8.0)*cj2*cj6);
IkReal x228=(((cj2*r01*x218))+((cj2*r00*x221))+((r11*sj2*x218))+((r10*sj2*x221)));
IkReal x229=((-1.0)*x228);
IkReal x230=((((-8.0)*x224))+(((-8.0)*x225))+((x216*x223))+((x219*x227))+(((-1.0)*x220*x227))+(((-1.0)*x217*x223)));
op[0]=x228;
op[1]=x230;
op[2]=x228;
op[3]=(((x216*x222))+((x219*x226))+(((-1.0)*x220*x226))+(((-1.0)*x217*x222))+(((-16.0)*x225))+(((-16.0)*x224)));
op[4]=x229;
op[5]=x230;
op[6]=x229;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x231=((1.0)*cj5);
IkReal x232=(cj7*r10);
IkReal x233=(r11*sj7);
if( IKabs(((((-1.0)*cj6*x231*x232))+((cj7*r11*sj5))+(((-1.0)*r12*sj6*x231))+((cj5*cj6*x233))+((r10*sj5*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r12))+(((-1.0)*sj6*x232))+((sj6*x233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*x231*x232))+((cj7*r11*sj5))+(((-1.0)*r12*sj6*x231))+((cj5*cj6*x233))+((r10*sj5*sj7))))+IKsqr((((cj6*r12))+(((-1.0)*sj6*x232))+((sj6*x233))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*x231*x232))+((cj7*r11*sj5))+(((-1.0)*r12*sj6*x231))+((cj5*cj6*x233))+((r10*sj5*sj7))), (((cj6*r12))+(((-1.0)*sj6*x232))+((sj6*x233))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x234=IKcos(j4);
IkReal x235=((1.0)*cj5);
IkReal x236=(cj7*r10);
IkReal x237=(r10*sj7);
IkReal x238=(r11*sj7);
IkReal x239=(cj7*r11);
evalcond[0]=((((-1.0)*cj6*r12))+x234+(((-1.0)*sj6*x238))+((sj6*x236)));
evalcond[1]=((0.4)+(((0.4)*x234))+(((-1.0)*py))+(((0.1363)*x237))+(((0.1363)*x239)));
evalcond[2]=((((-1.0)*(IKsin(j4))))+(((-1.0)*r12*sj6*x235))+((cj5*cj6*x238))+(((-1.0)*cj6*x235*x236))+((sj5*x237))+((sj5*x239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x240=(sj6*sj7);
IkReal x241=(cj7*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(((((-1.0)*r20*x241))+((r21*x240))+((cj6*r22)))))+(IKabs(((((-1.0)*cj6*r02))+(((-1.0)*r01*x240))+((r00*x241))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj4;
j3eval[1]=((1.0)+(((-1.0)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x242=((0.808902077151335)*sj7);
IkReal x243=((0.808902077151335)*cj7);
if( IKabs((((r01*x243))+((r00*x242))+(((-5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x243))+((r20*x242))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x243))+((r00*x242))+(((-5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x243))+((r20*x242))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r01*x243))+((r00*x242))+(((-5.93471810089021)*px))), ((0.845697329376855)+((r21*x243))+((r20*x242))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x244=IKsin(j3);
IkReal x245=IKcos(j3);
IkReal x246=(r20*sj7);
IkReal x247=((1.0)*cj5);
IkReal x248=(cj6*cj7);
IkReal x249=(r02*sj6);
IkReal x250=((1.0)*sj5);
IkReal x251=(cj7*r01);
IkReal x252=(r00*sj7);
IkReal x253=(r22*sj6);
IkReal x254=(cj7*r21);
IkReal x255=(cj5*cj6*sj7);
IkReal x256=(cj6*sj5*sj7);
evalcond[0]=((((0.1363)*x252))+(((0.1363)*x251))+(((-0.1685)*x244))+(((-1.0)*px)));
evalcond[1]=((0.1425)+(((0.1363)*x254))+(((-0.1685)*x245))+(((-1.0)*pz))+(((0.1363)*x246)));
evalcond[2]=(((r21*x255))+((sj5*x246))+(((-1.0)*r20*x247*x248))+(((-1.0)*x247*x253))+x244+((sj5*x254)));
evalcond[3]=(((r21*x256))+(((-1.0)*x250*x253))+(((-1.0)*r20*x248*x250))+(((-1.0)*x247*x254))+x245+(((-1.0)*x246*x247)));
evalcond[4]=((((-1.0)*r00*x248*x250))+((r01*x256))+(((-1.0)*x247*x252))+(((-1.0)*x247*x251))+x244+(((-1.0)*x249*x250)));
evalcond[5]=((((-1.0)*x245))+((r01*x255))+(((-1.0)*r00*x247*x248))+((sj5*x252))+((sj5*x251))+(((-1.0)*x247*x249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x257=((0.808902077151335)*sj7);
IkReal x258=((0.808902077151335)*cj7);
if( IKabs((((r00*x257))+((r01*x258))+(((-5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x258))+((r20*x257))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x257))+((r01*x258))+(((-5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x258))+((r20*x257))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r00*x257))+((r01*x258))+(((-5.93471810089021)*px))), ((0.845697329376855)+((r21*x258))+((r20*x257))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x259=IKcos(j3);
IkReal x260=IKsin(j3);
IkReal x261=(r20*sj7);
IkReal x262=(cj5*cj6);
IkReal x263=(r21*sj7);
IkReal x264=((1.0)*cj5);
IkReal x265=(cj7*r01);
IkReal x266=(r02*sj6);
IkReal x267=(r00*sj7);
IkReal x268=(r22*sj6);
IkReal x269=((1.0)*cj7);
IkReal x270=((1.0)*sj5);
IkReal x271=(cj7*r21);
IkReal x272=(r01*sj7);
IkReal x273=(cj6*sj5);
evalcond[0]=((((-0.1685)*x260))+(((-1.0)*px))+(((0.1363)*x267))+(((0.1363)*x265)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x261))+(((0.1363)*x271))+(((-0.1685)*x259)));
evalcond[2]=((((-1.0)*r00*x262*x269))+((sj5*x267))+((sj5*x265))+((x262*x272))+x259+(((-1.0)*x264*x266)));
evalcond[3]=(((x263*x273))+x259+(((-1.0)*x261*x264))+(((-1.0)*x268*x270))+(((-1.0)*x264*x271))+(((-1.0)*r20*x269*x273)));
evalcond[4]=(((sj5*x271))+(((-1.0)*x260))+(((-1.0)*r20*x262*x269))+((sj5*x261))+((x262*x263))+(((-1.0)*x264*x268)));
evalcond[5]=(((x272*x273))+x260+(((-1.0)*r00*x269*x273))+(((-1.0)*x266*x270))+(((-1.0)*x264*x265))+(((-1.0)*x264*x267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x274=((0.808902077151335)*sj7);
IkReal x275=((0.808902077151335)*cj7);
if( IKabs((((r01*x275))+((r00*x274))+(((-5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x275))+((r20*x274))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x275))+((r00*x274))+(((-5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x275))+((r20*x274))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r01*x275))+((r00*x274))+(((-5.93471810089021)*px))), ((0.845697329376855)+((r21*x275))+((r20*x274))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x276=IKsin(j3);
IkReal x277=IKcos(j3);
IkReal x278=(r20*sj7);
IkReal x279=((1.0)*cj5);
IkReal x280=(cj6*cj7);
IkReal x281=(r02*sj6);
IkReal x282=((1.0)*sj5);
IkReal x283=(cj7*r01);
IkReal x284=(r00*sj7);
IkReal x285=(r22*sj6);
IkReal x286=(cj7*r21);
IkReal x287=(cj5*cj6*sj7);
IkReal x288=(cj6*sj5*sj7);
evalcond[0]=((((-0.1685)*x276))+(((0.1363)*x283))+(((0.1363)*x284))+(((-1.0)*px)));
evalcond[1]=((0.1425)+(((-0.1685)*x277))+(((0.1363)*x286))+(((-1.0)*pz))+(((0.1363)*x278)));
evalcond[2]=(((sj5*x278))+((r21*x287))+x276+((sj5*x286))+(((-1.0)*r20*x279*x280))+(((-1.0)*x279*x285)));
evalcond[3]=((((-1.0)*r20*x280*x282))+((r21*x288))+x277+(((-1.0)*x282*x285))+(((-1.0)*x278*x279))+(((-1.0)*x279*x286)));
evalcond[4]=(((r01*x288))+(((-1.0)*x281*x282))+x276+(((-1.0)*r00*x280*x282))+(((-1.0)*x279*x283))+(((-1.0)*x279*x284)));
evalcond[5]=(((r01*x287))+(((-1.0)*x277))+(((-1.0)*r00*x279*x280))+((sj5*x283))+((sj5*x284))+(((-1.0)*x279*x281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x289=((0.808902077151335)*sj7);
IkReal x290=((0.808902077151335)*cj7);
if( IKabs((((r00*x289))+((r01*x290))+(((-5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x290))+(((-5.93471810089021)*pz))+((r20*x289)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x289))+((r01*x290))+(((-5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x290))+(((-5.93471810089021)*pz))+((r20*x289))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r00*x289))+((r01*x290))+(((-5.93471810089021)*px))), ((0.845697329376855)+((r21*x290))+(((-5.93471810089021)*pz))+((r20*x289))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x291=IKsin(j3);
IkReal x292=IKcos(j3);
IkReal x293=(r20*sj7);
IkReal x294=((1.0)*cj5);
IkReal x295=(cj6*cj7);
IkReal x296=(r02*sj6);
IkReal x297=((1.0)*sj5);
IkReal x298=(cj7*r01);
IkReal x299=(r00*sj7);
IkReal x300=(r22*sj6);
IkReal x301=(cj7*r21);
IkReal x302=(cj5*cj6*sj7);
IkReal x303=(cj6*sj5*sj7);
evalcond[0]=((((-1.0)*px))+(((-0.1685)*x291))+(((0.1363)*x299))+(((0.1363)*x298)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x301))+(((-0.1685)*x292))+(((0.1363)*x293)));
evalcond[2]=(((sj5*x293))+((sj5*x301))+((r21*x302))+(((-1.0)*r20*x294*x295))+(((-1.0)*x294*x300))+x291);
evalcond[3]=((((-1.0)*r20*x295*x297))+((r21*x303))+(((-1.0)*x294*x301))+(((-1.0)*x297*x300))+(((-1.0)*x293*x294))+x292);
evalcond[4]=((((-1.0)*x296*x297))+x291+(((-1.0)*r00*x295*x297))+((r01*x303))+(((-1.0)*x294*x299))+(((-1.0)*x294*x298)));
evalcond[5]=(((sj5*x299))+((sj5*x298))+(((-1.0)*x292))+(((-1.0)*r00*x294*x295))+((r01*x302))+(((-1.0)*x294*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x304=((0.808902077151335)*sj7);
IkReal x305=((0.808902077151335)*cj7);
if( IKabs((((r01*x305))+(((-5.93471810089021)*px))+((r00*x304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x305))+((r20*x304))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x305))+(((-5.93471810089021)*px))+((r00*x304))))+IKsqr(((0.845697329376855)+((r21*x305))+((r20*x304))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r01*x305))+(((-5.93471810089021)*px))+((r00*x304))), ((0.845697329376855)+((r21*x305))+((r20*x304))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x306=IKcos(j3);
IkReal x307=IKsin(j3);
IkReal x308=(r20*sj7);
IkReal x309=(cj5*cj6);
IkReal x310=(r21*sj7);
IkReal x311=((1.0)*cj5);
IkReal x312=(cj7*r01);
IkReal x313=(r02*sj6);
IkReal x314=(r00*sj7);
IkReal x315=(r22*sj6);
IkReal x316=((1.0)*cj7);
IkReal x317=((1.0)*sj5);
IkReal x318=(cj7*r21);
IkReal x319=(r01*sj7);
IkReal x320=(cj6*sj5);
evalcond[0]=((((-0.1685)*x307))+(((-1.0)*px))+(((0.1363)*x312))+(((0.1363)*x314)));
evalcond[1]=((0.1425)+(((-0.1685)*x306))+(((-1.0)*pz))+(((0.1363)*x308))+(((0.1363)*x318)));
evalcond[2]=(x306+((x309*x319))+((sj5*x314))+((sj5*x312))+(((-1.0)*r00*x309*x316))+(((-1.0)*x311*x313)));
evalcond[3]=(((x310*x320))+(((-1.0)*x308*x311))+x306+(((-1.0)*x315*x317))+(((-1.0)*r20*x316*x320))+(((-1.0)*x311*x318)));
evalcond[4]=(((sj5*x308))+(((-1.0)*x307))+((x309*x310))+((sj5*x318))+(((-1.0)*r20*x309*x316))+(((-1.0)*x311*x315)));
evalcond[5]=((((-1.0)*x313*x317))+(((-1.0)*r00*x316*x320))+x307+(((-1.0)*x311*x314))+(((-1.0)*x311*x312))+((x319*x320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x321=((0.808902077151335)*sj7);
IkReal x322=((0.808902077151335)*cj7);
if( IKabs((((r00*x321))+((r01*x322))+(((-5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x321))+((r21*x322))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x321))+((r01*x322))+(((-5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r20*x321))+((r21*x322))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r00*x321))+((r01*x322))+(((-5.93471810089021)*px))), ((0.845697329376855)+((r20*x321))+((r21*x322))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x323=IKcos(j3);
IkReal x324=IKsin(j3);
IkReal x325=(r20*sj7);
IkReal x326=(cj5*cj6);
IkReal x327=(r21*sj7);
IkReal x328=((1.0)*cj5);
IkReal x329=(cj7*r01);
IkReal x330=(r02*sj6);
IkReal x331=(r00*sj7);
IkReal x332=(r22*sj6);
IkReal x333=((1.0)*cj7);
IkReal x334=((1.0)*sj5);
IkReal x335=(cj7*r21);
IkReal x336=(r01*sj7);
IkReal x337=(cj6*sj5);
evalcond[0]=((((0.1363)*x329))+(((0.1363)*x331))+(((-1.0)*px))+(((-0.1685)*x324)));
evalcond[1]=((0.1425)+(((0.1363)*x325))+(((0.1363)*x335))+(((-1.0)*pz))+(((-0.1685)*x323)));
evalcond[2]=(((sj5*x331))+(((-1.0)*x328*x330))+(((-1.0)*r00*x326*x333))+((sj5*x329))+x323+((x326*x336)));
evalcond[3]=((((-1.0)*r20*x333*x337))+(((-1.0)*x325*x328))+(((-1.0)*x328*x335))+x323+((x327*x337))+(((-1.0)*x332*x334)));
evalcond[4]=(((x326*x327))+((sj5*x335))+(((-1.0)*r20*x326*x333))+(((-1.0)*x328*x332))+(((-1.0)*x324))+((sj5*x325)));
evalcond[5]=(((x336*x337))+(((-1.0)*x328*x331))+(((-1.0)*r00*x333*x337))+x324+(((-1.0)*x330*x334))+(((-1.0)*x328*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x338=((337.0)*sj6);
IkReal x339=(cj7*r20);
IkReal x340=(cj6*r22);
IkReal x341=(r21*sj7);
IkReal x342=((272.6)*sj4);
CheckValue<IkReal> x343=IKPowWithIntegerCheck(sj4,-1);
if(!x343.valid){
continue;
}
CheckValue<IkReal> x344=IKPowWithIntegerCheck(((800.0)+(((-800.0)*(cj4*cj4)))),-1);
if(!x344.valid){
continue;
}
if( IKabs(((x343.value)*((x340+(((-1.0)*sj6*x339))+((sj6*x341)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x344.value)*(((((-2000.0)*px*sj4))+(((-337.0)*x340))+((r00*sj7*x342))+((x338*x339))+(((-1.0)*x338*x341))+((cj7*r01*x342)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x343.value)*((x340+(((-1.0)*sj6*x339))+((sj6*x341))))))+IKsqr(((x344.value)*(((((-2000.0)*px*sj4))+(((-337.0)*x340))+((r00*sj7*x342))+((x338*x339))+(((-1.0)*x338*x341))+((cj7*r01*x342))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x343.value)*((x340+(((-1.0)*sj6*x339))+((sj6*x341))))), ((x344.value)*(((((-2000.0)*px*sj4))+(((-337.0)*x340))+((r00*sj7*x342))+((x338*x339))+(((-1.0)*x338*x341))+((cj7*r01*x342))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x345=IKsin(j3);
IkReal x346=IKcos(j3);
IkReal x347=(r21*sj7);
IkReal x348=((1.0)*sj6);
IkReal x349=(r20*sj7);
IkReal x350=(cj5*cj6);
IkReal x351=((1.0)*cj5);
IkReal x352=(cj7*r01);
IkReal x353=((1.0)*cj7);
IkReal x354=(r00*sj7);
IkReal x355=((1.0)*cj6);
IkReal x356=(r01*sj7);
IkReal x357=(cj7*r21);
IkReal x358=(cj7*sj6);
IkReal x359=(cj6*sj5);
IkReal x360=(sj4*x345);
IkReal x361=(sj4*x346);
evalcond[0]=((((-1.0)*r22*x355))+x360+(((-1.0)*x347*x348))+((r20*x358)));
evalcond[1]=((((-1.0)*x361))+(((-1.0)*x348*x356))+((r00*x358))+(((-1.0)*r02*x355)));
evalcond[2]=((((0.1363)*x354))+(((0.1363)*x352))+(((-0.4)*x361))+(((-1.0)*px))+(((-0.1685)*x345)));
evalcond[3]=((0.1425)+(((0.1363)*x357))+(((0.4)*x360))+(((0.1363)*x349))+(((-1.0)*pz))+(((-0.1685)*x346)));
evalcond[4]=((((-1.0)*r22*sj5*x348))+(((-1.0)*r20*x353*x359))+(((-1.0)*x349*x351))+x346+((x347*x359))+(((-1.0)*x351*x357)));
evalcond[5]=((((-1.0)*cj5*r22*x348))+((sj5*x357))+((sj5*x349))+((cj4*x345))+((x347*x350))+(((-1.0)*r20*x350*x353)));
evalcond[6]=(((x356*x359))+x345+(((-1.0)*r02*sj5*x348))+(((-1.0)*r00*x353*x359))+(((-1.0)*x351*x352))+(((-1.0)*x351*x354)));
evalcond[7]=(((sj5*x352))+((sj5*x354))+(((-1.0)*cj5*r02*x348))+(((-1.0)*r00*x350*x353))+((x350*x356))+(((-1.0)*cj4*x346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x362=((2.37388724035608)*sj6);
IkReal x363=(r21*sj7);
IkReal x364=(cj7*r20);
IkReal x365=(cj6*r22);
CheckValue<IkReal> x366=IKPowWithIntegerCheck(sj4,-1);
if(!x366.valid){
continue;
}
if( IKabs(((x366.value)*((x365+((sj6*x363))+(((-1.0)*sj6*x364)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+(((0.808902077151335)*r20*sj7))+(((-1.0)*x362*x364))+(((2.37388724035608)*x365))+(((0.808902077151335)*cj7*r21))+((x362*x363))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x366.value)*((x365+((sj6*x363))+(((-1.0)*sj6*x364))))))+IKsqr(((0.845697329376855)+(((0.808902077151335)*r20*sj7))+(((-1.0)*x362*x364))+(((2.37388724035608)*x365))+(((0.808902077151335)*cj7*r21))+((x362*x363))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x366.value)*((x365+((sj6*x363))+(((-1.0)*sj6*x364))))), ((0.845697329376855)+(((0.808902077151335)*r20*sj7))+(((-1.0)*x362*x364))+(((2.37388724035608)*x365))+(((0.808902077151335)*cj7*r21))+((x362*x363))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x367=IKsin(j3);
IkReal x368=IKcos(j3);
IkReal x369=(r21*sj7);
IkReal x370=((1.0)*sj6);
IkReal x371=(r20*sj7);
IkReal x372=(cj5*cj6);
IkReal x373=((1.0)*cj5);
IkReal x374=(cj7*r01);
IkReal x375=((1.0)*cj7);
IkReal x376=(r00*sj7);
IkReal x377=((1.0)*cj6);
IkReal x378=(r01*sj7);
IkReal x379=(cj7*r21);
IkReal x380=(cj7*sj6);
IkReal x381=(cj6*sj5);
IkReal x382=(sj4*x367);
IkReal x383=(sj4*x368);
evalcond[0]=(x382+((r20*x380))+(((-1.0)*x369*x370))+(((-1.0)*r22*x377)));
evalcond[1]=((((-1.0)*x370*x378))+(((-1.0)*r02*x377))+(((-1.0)*x383))+((r00*x380)));
evalcond[2]=((((0.1363)*x374))+(((0.1363)*x376))+(((-0.1685)*x367))+(((-1.0)*px))+(((-0.4)*x383)));
evalcond[3]=((0.1425)+(((0.1363)*x371))+(((0.1363)*x379))+(((-0.1685)*x368))+(((-1.0)*pz))+(((0.4)*x382)));
evalcond[4]=((((-1.0)*r20*x375*x381))+x368+(((-1.0)*x373*x379))+(((-1.0)*x371*x373))+((x369*x381))+(((-1.0)*r22*sj5*x370)));
evalcond[5]=(((x369*x372))+((cj4*x367))+((sj5*x371))+((sj5*x379))+(((-1.0)*cj5*r22*x370))+(((-1.0)*r20*x372*x375)));
evalcond[6]=(((x378*x381))+(((-1.0)*r00*x375*x381))+(((-1.0)*r02*sj5*x370))+x367+(((-1.0)*x373*x374))+(((-1.0)*x373*x376)));
evalcond[7]=((((-1.0)*cj5*r02*x370))+((x372*x378))+((sj5*x376))+((sj5*x374))+(((-1.0)*cj4*x368))+(((-1.0)*r00*x372*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x384=(sj6*sj7);
IkReal x385=(cj7*sj6);
CheckValue<IkReal> x386 = IKatan2WithCheck(IkReal((((r21*x384))+(((-1.0)*r20*x385))+((cj6*r22)))),IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r01*x384))+((r00*x385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x386.valid){
continue;
}
CheckValue<IkReal> x387=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x387.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x386.value)+(((1.5707963267949)*(x387.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x388=IKsin(j3);
IkReal x389=IKcos(j3);
IkReal x390=(r21*sj7);
IkReal x391=((1.0)*sj6);
IkReal x392=(r20*sj7);
IkReal x393=(cj5*cj6);
IkReal x394=((1.0)*cj5);
IkReal x395=(cj7*r01);
IkReal x396=((1.0)*cj7);
IkReal x397=(r00*sj7);
IkReal x398=((1.0)*cj6);
IkReal x399=(r01*sj7);
IkReal x400=(cj7*r21);
IkReal x401=(cj7*sj6);
IkReal x402=(cj6*sj5);
IkReal x403=(sj4*x388);
IkReal x404=(sj4*x389);
evalcond[0]=(x403+(((-1.0)*x390*x391))+((r20*x401))+(((-1.0)*r22*x398)));
evalcond[1]=((((-1.0)*r02*x398))+(((-1.0)*x391*x399))+((r00*x401))+(((-1.0)*x404)));
evalcond[2]=((((-0.1685)*x388))+(((0.1363)*x397))+(((0.1363)*x395))+(((-1.0)*px))+(((-0.4)*x404)));
evalcond[3]=((0.1425)+(((-0.1685)*x389))+(((0.1363)*x392))+(((0.1363)*x400))+(((-1.0)*pz))+(((0.4)*x403)));
evalcond[4]=((((-1.0)*r22*sj5*x391))+((x390*x402))+(((-1.0)*x394*x400))+x389+(((-1.0)*r20*x396*x402))+(((-1.0)*x392*x394)));
evalcond[5]=((((-1.0)*r20*x393*x396))+(((-1.0)*cj5*r22*x391))+((sj5*x400))+((sj5*x392))+((cj4*x388))+((x390*x393)));
evalcond[6]=((((-1.0)*x394*x395))+(((-1.0)*x394*x397))+(((-1.0)*r02*sj5*x391))+x388+(((-1.0)*r00*x396*x402))+((x399*x402)));
evalcond[7]=((((-1.0)*cj4*x389))+(((-1.0)*cj5*r02*x391))+((sj5*x397))+((sj5*x395))+(((-1.0)*r00*x393*x396))+((x393*x399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x405=(r10*sj7);
IkReal x406=(cj7*r11);
IkReal x407=((1.0)*sj5);
IkReal x408=(cj5*cj6);
if( IKabs((((cj5*r12*sj6))+(((-1.0)*x406*x407))+(((-1.0)*r11*sj7*x408))+(((-1.0)*x405*x407))+((cj7*r10*x408)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*py))+(((0.34075)*x406))+(((0.34075)*x405)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12*sj6))+(((-1.0)*x406*x407))+(((-1.0)*r11*sj7*x408))+(((-1.0)*x405*x407))+((cj7*r10*x408))))+IKsqr(((-1.0)+(((-2.5)*py))+(((0.34075)*x406))+(((0.34075)*x405))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r12*sj6))+(((-1.0)*x406*x407))+(((-1.0)*r11*sj7*x408))+(((-1.0)*x405*x407))+((cj7*r10*x408))), ((-1.0)+(((-2.5)*py))+(((0.34075)*x406))+(((0.34075)*x405))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x409=IKcos(j4);
IkReal x410=((1.0)*cj5);
IkReal x411=(cj7*r10);
IkReal x412=(r10*sj7);
IkReal x413=(cj7*r11);
IkReal x414=(r11*sj7);
evalcond[0]=((-0.4)+(((0.1363)*x412))+(((0.1363)*x413))+(((-1.0)*py))+(((-0.4)*x409)));
evalcond[1]=((((-1.0)*cj6*r12))+((sj6*x411))+(((-1.0)*sj6*x414))+(((-1.0)*x409)));
evalcond[2]=(((sj5*x412))+((sj5*x413))+(IKsin(j4))+((cj5*cj6*x414))+(((-1.0)*cj6*x410*x411))+(((-1.0)*r12*sj6*x410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x415=(sj6*sj7);
IkReal x416=((1.0)*cj7*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs((((r01*x415))+((cj6*r02))+(((-1.0)*r00*x416)))))+(IKabs(((((-1.0)*r20*x416))+((r21*x415))+((cj6*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj4;
j3eval[1]=((1.0)+(((-1.0)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x417=((0.808902077151335)*sj7);
IkReal x418=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r01*x418))+(((-1.0)*r00*x417))+(((5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x418))+((r20*x417))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x418))+(((-1.0)*r00*x417))+(((5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x418))+((r20*x417))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r01*x418))+(((-1.0)*r00*x417))+(((5.93471810089021)*px))), ((0.845697329376855)+((r21*x418))+((r20*x417))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x419=IKsin(j3);
IkReal x420=IKcos(j3);
IkReal x421=(r20*sj7);
IkReal x422=(cj5*cj6);
IkReal x423=((1.0)*cj7);
IkReal x424=(r21*sj7);
IkReal x425=((1.0)*cj5);
IkReal x426=(cj7*r01);
IkReal x427=(r02*sj6);
IkReal x428=(r00*sj7);
IkReal x429=(r22*sj6);
IkReal x430=((1.0)*sj5);
IkReal x431=(cj7*r21);
IkReal x432=(r01*sj7);
IkReal x433=(cj6*sj5);
evalcond[0]=((((0.1363)*x428))+(((0.1363)*x426))+(((-1.0)*px))+(((0.1685)*x419)));
evalcond[1]=((0.1425)+(((0.1363)*x421))+(((-0.1685)*x420))+(((-1.0)*pz))+(((0.1363)*x431)));
evalcond[2]=(x419+(((-1.0)*x425*x429))+((sj5*x421))+(((-1.0)*r20*x422*x423))+((sj5*x431))+((x422*x424)));
evalcond[3]=(x420+(((-1.0)*x425*x427))+((sj5*x428))+((sj5*x426))+(((-1.0)*r00*x422*x423))+((x422*x432)));
evalcond[4]=((((-1.0)*cj5*r21*x423))+(((-1.0)*x421*x425))+((x424*x433))+(((-1.0)*x429*x430))+(((-1.0)*r20*x423*x433))+x420);
evalcond[5]=((((-1.0)*cj5*r01*x423))+(((-1.0)*x427*x430))+(((-1.0)*x425*x428))+(((-1.0)*r00*x423*x433))+((x432*x433))+(((-1.0)*x419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x434=((0.808902077151335)*sj7);
IkReal x435=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r00*x434))+(((-1.0)*r01*x435))+(((5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x435))+((r20*x434))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x434))+(((-1.0)*r01*x435))+(((5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x435))+((r20*x434))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x434))+(((-1.0)*r01*x435))+(((5.93471810089021)*px))), ((0.845697329376855)+((r21*x435))+((r20*x434))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x436=IKcos(j3);
IkReal x437=IKsin(j3);
IkReal x438=(r20*sj7);
IkReal x439=(cj5*cj6);
IkReal x440=((1.0)*cj7);
IkReal x441=(r21*sj7);
IkReal x442=((1.0)*cj5);
IkReal x443=(cj7*r01);
IkReal x444=(r02*sj6);
IkReal x445=(r00*sj7);
IkReal x446=(r22*sj6);
IkReal x447=((1.0)*sj5);
IkReal x448=(cj7*r21);
IkReal x449=(r01*sj7);
IkReal x450=(cj6*sj5);
IkReal x451=((1.0)*x437);
evalcond[0]=((((0.1363)*x445))+(((0.1363)*x443))+(((-1.0)*px))+(((0.1685)*x437)));
evalcond[1]=((0.1425)+(((0.1363)*x448))+(((-1.0)*pz))+(((-0.1685)*x436))+(((0.1363)*x438)));
evalcond[2]=(((x441*x450))+(((-1.0)*x438*x442))+(((-1.0)*cj5*r21*x440))+x436+(((-1.0)*r20*x440*x450))+(((-1.0)*x446*x447)));
evalcond[3]=(((x439*x441))+(((-1.0)*r20*x439*x440))+(((-1.0)*x451))+((sj5*x448))+((sj5*x438))+(((-1.0)*x442*x446)));
evalcond[4]=(((x439*x449))+(((-1.0)*x436))+(((-1.0)*r00*x439*x440))+((sj5*x445))+((sj5*x443))+(((-1.0)*x442*x444)));
evalcond[5]=((((-1.0)*x444*x447))+(((-1.0)*cj5*r01*x440))+(((-1.0)*x451))+((x449*x450))+(((-1.0)*r00*x440*x450))+(((-1.0)*x442*x445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x452=((0.808902077151335)*sj7);
IkReal x453=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r00*x452))+(((-1.0)*r01*x453))+(((5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x452))+((r21*x453))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x452))+(((-1.0)*r01*x453))+(((5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r20*x452))+((r21*x453))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x452))+(((-1.0)*r01*x453))+(((5.93471810089021)*px))), ((0.845697329376855)+((r20*x452))+((r21*x453))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x454=IKsin(j3);
IkReal x455=IKcos(j3);
IkReal x456=(r20*sj7);
IkReal x457=(cj5*cj6);
IkReal x458=((1.0)*cj7);
IkReal x459=(r21*sj7);
IkReal x460=((1.0)*cj5);
IkReal x461=(cj7*r01);
IkReal x462=(r02*sj6);
IkReal x463=(r00*sj7);
IkReal x464=(r22*sj6);
IkReal x465=((1.0)*sj5);
IkReal x466=(cj7*r21);
IkReal x467=(r01*sj7);
IkReal x468=(cj6*sj5);
evalcond[0]=((((0.1685)*x454))+(((-1.0)*px))+(((0.1363)*x461))+(((0.1363)*x463)));
evalcond[1]=((0.1425)+(((-0.1685)*x455))+(((-1.0)*pz))+(((0.1363)*x456))+(((0.1363)*x466)));
evalcond[2]=((((-1.0)*r20*x457*x458))+(((-1.0)*x460*x464))+x454+((sj5*x466))+((sj5*x456))+((x457*x459)));
evalcond[3]=((((-1.0)*x460*x462))+x455+(((-1.0)*r00*x457*x458))+((sj5*x463))+((sj5*x461))+((x457*x467)));
evalcond[4]=((((-1.0)*cj5*r21*x458))+(((-1.0)*x456*x460))+(((-1.0)*x464*x465))+x455+((x459*x468))+(((-1.0)*r20*x458*x468)));
evalcond[5]=((((-1.0)*x462*x465))+(((-1.0)*x454))+(((-1.0)*x460*x463))+(((-1.0)*cj5*r01*x458))+(((-1.0)*r00*x458*x468))+((x467*x468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x469=((0.808902077151335)*sj7);
IkReal x470=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r00*x469))+(((-1.0)*r01*x470))+(((5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x470))+((r20*x469))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x469))+(((-1.0)*r01*x470))+(((5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x470))+((r20*x469))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x469))+(((-1.0)*r01*x470))+(((5.93471810089021)*px))), ((0.845697329376855)+((r21*x470))+((r20*x469))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x471=IKsin(j3);
IkReal x472=IKcos(j3);
IkReal x473=(r20*sj7);
IkReal x474=(cj5*cj6);
IkReal x475=((1.0)*cj7);
IkReal x476=(r21*sj7);
IkReal x477=((1.0)*cj5);
IkReal x478=(cj7*r01);
IkReal x479=(r02*sj6);
IkReal x480=(r00*sj7);
IkReal x481=(r22*sj6);
IkReal x482=((1.0)*sj5);
IkReal x483=(cj7*r21);
IkReal x484=(r01*sj7);
IkReal x485=(cj6*sj5);
evalcond[0]=((((0.1685)*x471))+(((0.1363)*x480))+(((-1.0)*px))+(((0.1363)*x478)));
evalcond[1]=((0.1425)+(((0.1363)*x483))+(((-0.1685)*x472))+(((-1.0)*pz))+(((0.1363)*x473)));
evalcond[2]=(((sj5*x473))+(((-1.0)*r20*x474*x475))+x471+((sj5*x483))+(((-1.0)*x477*x481))+((x474*x476)));
evalcond[3]=(((sj5*x478))+(((-1.0)*x477*x479))+(((-1.0)*r00*x474*x475))+((x474*x484))+x472+((sj5*x480)));
evalcond[4]=(((x476*x485))+(((-1.0)*r20*x475*x485))+(((-1.0)*x473*x477))+(((-1.0)*x481*x482))+(((-1.0)*cj5*r21*x475))+x472);
evalcond[5]=(((x484*x485))+(((-1.0)*r00*x475*x485))+(((-1.0)*x471))+(((-1.0)*cj5*r01*x475))+(((-1.0)*x479*x482))+(((-1.0)*x477*x480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x486=((0.808902077151335)*sj7);
IkReal x487=((0.808902077151335)*cj7);
if( IKabs(((((5.93471810089021)*px))+(((-1.0)*r01*x487))+(((-1.0)*r00*x486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x486))+((r21*x487))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.93471810089021)*px))+(((-1.0)*r01*x487))+(((-1.0)*r00*x486))))+IKsqr(((0.845697329376855)+((r20*x486))+((r21*x487))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((5.93471810089021)*px))+(((-1.0)*r01*x487))+(((-1.0)*r00*x486))), ((0.845697329376855)+((r20*x486))+((r21*x487))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x488=IKcos(j3);
IkReal x489=IKsin(j3);
IkReal x490=(r20*sj7);
IkReal x491=(cj5*cj6);
IkReal x492=((1.0)*cj7);
IkReal x493=(r21*sj7);
IkReal x494=((1.0)*cj5);
IkReal x495=(cj7*r01);
IkReal x496=(r02*sj6);
IkReal x497=(r00*sj7);
IkReal x498=(r22*sj6);
IkReal x499=((1.0)*sj5);
IkReal x500=(cj7*r21);
IkReal x501=(r01*sj7);
IkReal x502=(cj6*sj5);
IkReal x503=((1.0)*x489);
evalcond[0]=((((0.1363)*x495))+(((0.1363)*x497))+(((-1.0)*px))+(((0.1685)*x489)));
evalcond[1]=((0.1425)+(((0.1363)*x500))+(((0.1363)*x490))+(((-1.0)*pz))+(((-0.1685)*x488)));
evalcond[2]=((((-1.0)*r20*x492*x502))+(((-1.0)*x498*x499))+(((-1.0)*x490*x494))+((x493*x502))+(((-1.0)*cj5*r21*x492))+x488);
evalcond[3]=(((sj5*x500))+(((-1.0)*x494*x498))+((x491*x493))+(((-1.0)*x503))+(((-1.0)*r20*x491*x492))+((sj5*x490)));
evalcond[4]=((((-1.0)*x494*x496))+(((-1.0)*r00*x491*x492))+(((-1.0)*x488))+((x491*x501))+((sj5*x497))+((sj5*x495)));
evalcond[5]=((((-1.0)*x494*x497))+(((-1.0)*x503))+(((-1.0)*x496*x499))+(((-1.0)*cj5*r01*x492))+((x501*x502))+(((-1.0)*r00*x492*x502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x504=((0.808902077151335)*sj7);
IkReal x505=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r01*x505))+(((-1.0)*r00*x504))+(((5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x504))+((r21*x505))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x505))+(((-1.0)*r00*x504))+(((5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r20*x504))+((r21*x505))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r01*x505))+(((-1.0)*r00*x504))+(((5.93471810089021)*px))), ((0.845697329376855)+((r20*x504))+((r21*x505))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x506=IKcos(j3);
IkReal x507=IKsin(j3);
IkReal x508=(r20*sj7);
IkReal x509=(cj5*cj6);
IkReal x510=((1.0)*cj7);
IkReal x511=(r21*sj7);
IkReal x512=((1.0)*cj5);
IkReal x513=(cj7*r01);
IkReal x514=(r02*sj6);
IkReal x515=(r00*sj7);
IkReal x516=(r22*sj6);
IkReal x517=((1.0)*sj5);
IkReal x518=(cj7*r21);
IkReal x519=(r01*sj7);
IkReal x520=(cj6*sj5);
IkReal x521=((1.0)*x507);
evalcond[0]=((((0.1685)*x507))+(((-1.0)*px))+(((0.1363)*x513))+(((0.1363)*x515)));
evalcond[1]=((0.1425)+(((0.1363)*x508))+(((-1.0)*pz))+(((0.1363)*x518))+(((-0.1685)*x506)));
evalcond[2]=((((-1.0)*r20*x510*x520))+(((-1.0)*x516*x517))+x506+((x511*x520))+(((-1.0)*cj5*r21*x510))+(((-1.0)*x508*x512)));
evalcond[3]=(((sj5*x508))+(((-1.0)*r20*x509*x510))+(((-1.0)*x521))+(((-1.0)*x512*x516))+((sj5*x518))+((x509*x511)));
evalcond[4]=((((-1.0)*r00*x509*x510))+(((-1.0)*x512*x514))+((sj5*x515))+((sj5*x513))+(((-1.0)*x506))+((x509*x519)));
evalcond[5]=(((x519*x520))+(((-1.0)*cj5*r01*x510))+(((-1.0)*x514*x517))+(((-1.0)*x521))+(((-1.0)*x512*x515))+(((-1.0)*r00*x510*x520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x522=((337.0)*sj6);
IkReal x523=(cj7*r20);
IkReal x524=(cj6*r22);
IkReal x525=(r21*sj7);
IkReal x526=((272.6)*sj4);
CheckValue<IkReal> x527=IKPowWithIntegerCheck(sj4,-1);
if(!x527.valid){
continue;
}
CheckValue<IkReal> x528=IKPowWithIntegerCheck(((800.0)+(((-800.0)*(cj4*cj4)))),-1);
if(!x528.valid){
continue;
}
if( IKabs(((x527.value)*(((((-1.0)*sj6*x523))+x524+((sj6*x525)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x528.value)*((((x522*x523))+(((-1.0)*cj7*r01*x526))+(((-337.0)*x524))+(((-1.0)*r00*sj7*x526))+(((-1.0)*x522*x525))+(((2000.0)*px*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x527.value)*(((((-1.0)*sj6*x523))+x524+((sj6*x525))))))+IKsqr(((x528.value)*((((x522*x523))+(((-1.0)*cj7*r01*x526))+(((-337.0)*x524))+(((-1.0)*r00*sj7*x526))+(((-1.0)*x522*x525))+(((2000.0)*px*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x527.value)*(((((-1.0)*sj6*x523))+x524+((sj6*x525))))), ((x528.value)*((((x522*x523))+(((-1.0)*cj7*r01*x526))+(((-337.0)*x524))+(((-1.0)*r00*sj7*x526))+(((-1.0)*x522*x525))+(((2000.0)*px*sj4))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x529=IKsin(j3);
IkReal x530=IKcos(j3);
IkReal x531=(r21*sj7);
IkReal x532=((1.0)*sj6);
IkReal x533=(r20*sj7);
IkReal x534=(cj5*cj6);
IkReal x535=((1.0)*cj5);
IkReal x536=(cj7*r01);
IkReal x537=((1.0)*cj7);
IkReal x538=(r00*sj7);
IkReal x539=((1.0)*cj6);
IkReal x540=(r01*sj7);
IkReal x541=(cj7*r21);
IkReal x542=(cj7*sj6);
IkReal x543=(cj6*sj5);
IkReal x544=(sj4*x529);
IkReal x545=(sj4*x530);
evalcond[0]=((((-1.0)*r22*x539))+((r20*x542))+(((-1.0)*x531*x532))+x544);
evalcond[1]=((((-1.0)*x532*x540))+(((-1.0)*r02*x539))+x545+((r00*x542)));
evalcond[2]=((((0.1685)*x529))+(((-1.0)*px))+(((0.1363)*x538))+(((0.1363)*x536))+(((0.4)*x545)));
evalcond[3]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x541))+(((0.1363)*x533))+(((-0.1685)*x530))+(((0.4)*x544)));
evalcond[4]=((((-1.0)*x533*x535))+(((-1.0)*r22*sj5*x532))+((x531*x543))+x530+(((-1.0)*x535*x541))+(((-1.0)*r20*x537*x543)));
evalcond[5]=(((cj4*x529))+(((-1.0)*r20*x534*x537))+(((-1.0)*cj5*r22*x532))+((x531*x534))+((sj5*x533))+((sj5*x541)));
evalcond[6]=(((cj4*x530))+(((-1.0)*r00*x534*x537))+((sj5*x536))+((sj5*x538))+(((-1.0)*cj5*r02*x532))+((x534*x540)));
evalcond[7]=((((-1.0)*r00*x537*x543))+(((-1.0)*r02*sj5*x532))+(((-1.0)*x529))+((x540*x543))+(((-1.0)*x535*x538))+(((-1.0)*x535*x536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x546=(cj6*r02);
IkReal x547=(cj7*r00*sj6);
IkReal x548=(r01*sj6*sj7);
CheckValue<IkReal> x549=IKPowWithIntegerCheck(sj4,-1);
if(!x549.valid){
continue;
}
if( IKabs(((((-2.37388724035608)*x548))+(((-2.37388724035608)*x546))+(((-0.808902077151335)*cj7*r01))+(((5.93471810089021)*px))+(((-0.808902077151335)*r00*sj7))+(((2.37388724035608)*x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x549.value)*(((((-1.0)*x547))+x546+x548)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.37388724035608)*x548))+(((-2.37388724035608)*x546))+(((-0.808902077151335)*cj7*r01))+(((5.93471810089021)*px))+(((-0.808902077151335)*r00*sj7))+(((2.37388724035608)*x547))))+IKsqr(((x549.value)*(((((-1.0)*x547))+x546+x548))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-2.37388724035608)*x548))+(((-2.37388724035608)*x546))+(((-0.808902077151335)*cj7*r01))+(((5.93471810089021)*px))+(((-0.808902077151335)*r00*sj7))+(((2.37388724035608)*x547))), ((x549.value)*(((((-1.0)*x547))+x546+x548))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x550=IKsin(j3);
IkReal x551=IKcos(j3);
IkReal x552=(r21*sj7);
IkReal x553=((1.0)*sj6);
IkReal x554=(r20*sj7);
IkReal x555=(cj5*cj6);
IkReal x556=((1.0)*cj5);
IkReal x557=(cj7*r01);
IkReal x558=((1.0)*cj7);
IkReal x559=(r00*sj7);
IkReal x560=((1.0)*cj6);
IkReal x561=(r01*sj7);
IkReal x562=(cj7*r21);
IkReal x563=(cj7*sj6);
IkReal x564=(cj6*sj5);
IkReal x565=(sj4*x550);
IkReal x566=(sj4*x551);
evalcond[0]=((((-1.0)*x552*x553))+x565+(((-1.0)*r22*x560))+((r20*x563)));
evalcond[1]=(((r00*x563))+x566+(((-1.0)*r02*x560))+(((-1.0)*x553*x561)));
evalcond[2]=((((0.1685)*x550))+(((-1.0)*px))+(((0.4)*x566))+(((0.1363)*x557))+(((0.1363)*x559)));
evalcond[3]=((0.1425)+(((0.1363)*x562))+(((-1.0)*pz))+(((0.4)*x565))+(((-0.1685)*x551))+(((0.1363)*x554)));
evalcond[4]=((((-1.0)*r22*sj5*x553))+(((-1.0)*x554*x556))+((x552*x564))+(((-1.0)*x556*x562))+(((-1.0)*r20*x558*x564))+x551);
evalcond[5]=(((cj4*x550))+((sj5*x554))+(((-1.0)*cj5*r22*x553))+((x552*x555))+((sj5*x562))+(((-1.0)*r20*x555*x558)));
evalcond[6]=(((cj4*x551))+(((-1.0)*cj5*r02*x553))+((sj5*x557))+((sj5*x559))+(((-1.0)*r00*x555*x558))+((x555*x561)));
evalcond[7]=((((-1.0)*x556*x557))+(((-1.0)*x556*x559))+(((-1.0)*x550))+(((-1.0)*r02*sj5*x553))+((x561*x564))+(((-1.0)*r00*x558*x564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x567=(sj6*sj7);
IkReal x568=((1.0)*cj7*sj6);
CheckValue<IkReal> x569=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x569.valid){
continue;
}
CheckValue<IkReal> x570 = IKatan2WithCheck(IkReal((((r21*x567))+((cj6*r22))+(((-1.0)*r20*x568)))),IkReal((((r01*x567))+((cj6*r02))+(((-1.0)*r00*x568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x570.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x569.value)))+(x570.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x571=IKsin(j3);
IkReal x572=IKcos(j3);
IkReal x573=(r21*sj7);
IkReal x574=((1.0)*sj6);
IkReal x575=(r20*sj7);
IkReal x576=(cj5*cj6);
IkReal x577=((1.0)*cj5);
IkReal x578=(cj7*r01);
IkReal x579=((1.0)*cj7);
IkReal x580=(r00*sj7);
IkReal x581=((1.0)*cj6);
IkReal x582=(r01*sj7);
IkReal x583=(cj7*r21);
IkReal x584=(cj7*sj6);
IkReal x585=(cj6*sj5);
IkReal x586=(sj4*x571);
IkReal x587=(sj4*x572);
evalcond[0]=(((r20*x584))+(((-1.0)*r22*x581))+(((-1.0)*x573*x574))+x586);
evalcond[1]=((((-1.0)*r02*x581))+x587+(((-1.0)*x574*x582))+((r00*x584)));
evalcond[2]=((((0.1685)*x571))+(((0.4)*x587))+(((0.1363)*x578))+(((-1.0)*px))+(((0.1363)*x580)));
evalcond[3]=((0.1425)+(((0.4)*x586))+(((0.1363)*x575))+(((-1.0)*pz))+(((-0.1685)*x572))+(((0.1363)*x583)));
evalcond[4]=((((-1.0)*r22*sj5*x574))+(((-1.0)*x577*x583))+(((-1.0)*x575*x577))+((x573*x585))+x572+(((-1.0)*r20*x579*x585)));
evalcond[5]=(((sj5*x583))+((x573*x576))+(((-1.0)*cj5*r22*x574))+(((-1.0)*r20*x576*x579))+((sj5*x575))+((cj4*x571)));
evalcond[6]=(((sj5*x580))+((sj5*x578))+(((-1.0)*cj5*r02*x574))+((x576*x582))+(((-1.0)*r00*x576*x579))+((cj4*x572)));
evalcond[7]=(((x582*x585))+(((-1.0)*x577*x578))+(((-1.0)*x577*x580))+(((-1.0)*x571))+(((-1.0)*r02*sj5*x574))+(((-1.0)*r00*x579*x585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x588=(r01*sj7);
IkReal x589=(cj5*cj6);
IkReal x590=((1.0)*cj7*r00);
if( IKabs(((((-1.0)*cj5*r02*sj6))+(((-1.0)*x589*x590))+((x588*x589))+((r00*sj5*sj7))+((cj7*r01*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj6*x590))+((cj6*r02))+((sj6*x588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r02*sj6))+(((-1.0)*x589*x590))+((x588*x589))+((r00*sj5*sj7))+((cj7*r01*sj5))))+IKsqr(((((-1.0)*sj6*x590))+((cj6*r02))+((sj6*x588))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj5*r02*sj6))+(((-1.0)*x589*x590))+((x588*x589))+((r00*sj5*sj7))+((cj7*r01*sj5))), ((((-1.0)*sj6*x590))+((cj6*r02))+((sj6*x588))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x591=IKcos(j4);
IkReal x592=(cj7*r01);
IkReal x593=((1.0)*r02);
IkReal x594=(cj7*r00);
IkReal x595=(cj5*cj6);
IkReal x596=(r00*sj7);
IkReal x597=(r01*sj7);
evalcond[0]=((((-1.0)*sj6*x597))+((sj6*x594))+x591+(((-1.0)*cj6*x593)));
evalcond[1]=((0.4)+(((-1.0)*px))+(((0.4)*x591))+(((0.1363)*x592))+(((0.1363)*x596)));
evalcond[2]=(((x595*x597))+(((-1.0)*(IKsin(j4))))+(((-1.0)*x594*x595))+(((-1.0)*cj5*sj6*x593))+((sj5*x596))+((sj5*x592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x598=(sj6*sj7);
IkReal x599=((1.0)*cj7*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs((((r11*x598))+(((-1.0)*r10*x599))+((cj6*r12)))))+(IKabs(((((-1.0)*r20*x599))+((r21*x598))+((cj6*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=0;
cj2=1.0;
j2=0;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=1.0;
j2=0;
j3eval[0]=sj4;
j3eval[1]=((1.0)+(((-1.0)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x600=((0.808902077151335)*sj7);
IkReal x601=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r10*x600))+(((-1.0)*r11*x601))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x600))+((r21*x601))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x600))+(((-1.0)*r11*x601))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x600))+((r21*x601))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r10*x600))+(((-1.0)*r11*x601))+(((5.93471810089021)*py))), ((0.845697329376855)+((r20*x600))+((r21*x601))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x602=IKsin(j3);
IkReal x603=IKcos(j3);
IkReal x604=(r20*sj7);
IkReal x605=(cj7*r11);
IkReal x606=((1.0)*cj5);
IkReal x607=(sj5*sj7);
IkReal x608=((1.0)*sj5);
IkReal x609=(cj7*r21);
IkReal x610=(r10*sj7);
IkReal x611=(cj6*cj7);
IkReal x612=(cj5*cj6*sj7);
IkReal x613=(sj6*x606);
IkReal x614=(x606*x611);
evalcond[0]=((((0.1685)*x602))+(((-1.0)*py))+(((0.1363)*x610))+(((0.1363)*x605)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((-0.1685)*x603))+(((0.1363)*x609))+(((0.1363)*x604)));
evalcond[2]=((((-1.0)*r20*x614))+(((-1.0)*r22*x613))+((r21*x612))+x602+((sj5*x604))+((sj5*x609)));
evalcond[3]=((((-1.0)*r10*x614))+((r11*x612))+(((-1.0)*r12*x613))+x603+((sj5*x605))+((r10*x607)));
evalcond[4]=((((-1.0)*r22*sj6*x608))+(((-1.0)*x604*x606))+x603+(((-1.0)*x606*x609))+((cj6*r21*x607))+(((-1.0)*r20*x608*x611)));
evalcond[5]=((((-1.0)*r12*sj6*x608))+(((-1.0)*x605*x606))+(((-1.0)*x602))+(((-1.0)*r10*x608*x611))+(((-1.0)*x606*x610))+((cj6*r11*x607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x615=((0.808902077151335)*sj7);
IkReal x616=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r10*x615))+(((-1.0)*r11*x616))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x615))+((r21*x616))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x615))+(((-1.0)*r11*x616))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x615))+((r21*x616))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r10*x615))+(((-1.0)*r11*x616))+(((5.93471810089021)*py))), ((0.845697329376855)+((r20*x615))+((r21*x616))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x617=IKcos(j3);
IkReal x618=IKsin(j3);
IkReal x619=(r20*sj7);
IkReal x620=((1.0)*cj5);
IkReal x621=(cj7*r11);
IkReal x622=(r22*sj6);
IkReal x623=(r12*sj6);
IkReal x624=(sj5*sj7);
IkReal x625=((1.0)*sj5);
IkReal x626=(cj7*r21);
IkReal x627=(r10*sj7);
IkReal x628=(cj6*cj7);
IkReal x629=((1.0)*x618);
IkReal x630=(cj5*cj6*sj7);
IkReal x631=(x620*x628);
evalcond[0]=((((0.1685)*x618))+(((0.1363)*x621))+(((0.1363)*x627))+(((-1.0)*py)));
evalcond[1]=((0.1425)+(((0.1363)*x626))+(((-1.0)*pz))+(((0.1363)*x619))+(((-0.1685)*x617)));
evalcond[2]=(((cj6*r21*x624))+(((-1.0)*x622*x625))+(((-1.0)*x620*x626))+(((-1.0)*r20*x625*x628))+x617+(((-1.0)*x619*x620)));
evalcond[3]=(((r21*x630))+((sj5*x626))+(((-1.0)*x629))+(((-1.0)*x620*x622))+(((-1.0)*r20*x631))+((sj5*x619)));
evalcond[4]=(((sj5*x621))+(((-1.0)*x620*x623))+((r10*x624))+(((-1.0)*x617))+(((-1.0)*r10*x631))+((r11*x630)));
evalcond[5]=(((cj6*r11*x624))+(((-1.0)*x623*x625))+(((-1.0)*x629))+(((-1.0)*x620*x621))+(((-1.0)*x620*x627))+(((-1.0)*r10*x625*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x632=((0.808902077151335)*sj7);
IkReal x633=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r11*x633))+(((-1.0)*r10*x632))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x633))+((r20*x632))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x633))+(((-1.0)*r10*x632))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x633))+((r20*x632))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r11*x633))+(((-1.0)*r10*x632))+(((5.93471810089021)*py))), ((0.845697329376855)+((r21*x633))+((r20*x632))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x634=IKsin(j3);
IkReal x635=IKcos(j3);
IkReal x636=(r20*sj7);
IkReal x637=(cj7*r11);
IkReal x638=((1.0)*cj5);
IkReal x639=(sj5*sj7);
IkReal x640=((1.0)*sj5);
IkReal x641=(cj7*r21);
IkReal x642=(r10*sj7);
IkReal x643=(cj6*cj7);
IkReal x644=(cj5*cj6*sj7);
IkReal x645=(sj6*x638);
IkReal x646=(x638*x643);
evalcond[0]=((((0.1363)*x642))+(((0.1685)*x634))+(((0.1363)*x637))+(((-1.0)*py)));
evalcond[1]=((0.1425)+(((0.1363)*x641))+(((0.1363)*x636))+(((-0.1685)*x635))+(((-1.0)*pz)));
evalcond[2]=(((sj5*x636))+((sj5*x641))+(((-1.0)*r22*x645))+((r21*x644))+(((-1.0)*r20*x646))+x634);
evalcond[3]=(((sj5*x637))+(((-1.0)*r12*x645))+(((-1.0)*r10*x646))+((r10*x639))+x635+((r11*x644)));
evalcond[4]=((((-1.0)*r22*sj6*x640))+((cj6*r21*x639))+(((-1.0)*r20*x640*x643))+(((-1.0)*x636*x638))+x635+(((-1.0)*x638*x641)));
evalcond[5]=(((cj6*r11*x639))+(((-1.0)*r12*sj6*x640))+(((-1.0)*x637*x638))+(((-1.0)*r10*x640*x643))+(((-1.0)*x634))+(((-1.0)*x638*x642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x647=((0.808902077151335)*sj7);
IkReal x648=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r11*x648))+(((-1.0)*r10*x647))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x647))+((r21*x648))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x648))+(((-1.0)*r10*x647))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x647))+((r21*x648))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r11*x648))+(((-1.0)*r10*x647))+(((5.93471810089021)*py))), ((0.845697329376855)+((r20*x647))+((r21*x648))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x649=IKsin(j3);
IkReal x650=IKcos(j3);
IkReal x651=(r20*sj7);
IkReal x652=(cj7*r11);
IkReal x653=((1.0)*cj5);
IkReal x654=(sj5*sj7);
IkReal x655=((1.0)*sj5);
IkReal x656=(cj7*r21);
IkReal x657=(r10*sj7);
IkReal x658=(cj6*cj7);
IkReal x659=(cj5*cj6*sj7);
IkReal x660=(sj6*x653);
IkReal x661=(x653*x658);
evalcond[0]=((((0.1685)*x649))+(((-1.0)*py))+(((0.1363)*x657))+(((0.1363)*x652)));
evalcond[1]=((0.1425)+(((-0.1685)*x650))+(((-1.0)*pz))+(((0.1363)*x656))+(((0.1363)*x651)));
evalcond[2]=((((-1.0)*r20*x661))+(((-1.0)*r22*x660))+((sj5*x651))+((sj5*x656))+x649+((r21*x659)));
evalcond[3]=((((-1.0)*r10*x661))+(((-1.0)*r12*x660))+((r11*x659))+((sj5*x652))+x650+((r10*x654)));
evalcond[4]=((((-1.0)*x651*x653))+x650+((cj6*r21*x654))+(((-1.0)*x653*x656))+(((-1.0)*r22*sj6*x655))+(((-1.0)*r20*x655*x658)));
evalcond[5]=((((-1.0)*r10*x655*x658))+(((-1.0)*x649))+(((-1.0)*r12*sj6*x655))+((cj6*r11*x654))+(((-1.0)*x653*x657))+(((-1.0)*x652*x653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x662=((0.808902077151335)*sj7);
IkReal x663=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r10*x662))+(((-1.0)*r11*x663))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x662))+((r21*x663))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x662))+(((-1.0)*r11*x663))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x662))+((r21*x663))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r10*x662))+(((-1.0)*r11*x663))+(((5.93471810089021)*py))), ((0.845697329376855)+((r20*x662))+((r21*x663))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x664=IKcos(j3);
IkReal x665=IKsin(j3);
IkReal x666=(r20*sj7);
IkReal x667=((1.0)*cj5);
IkReal x668=(cj7*r11);
IkReal x669=(r22*sj6);
IkReal x670=(r12*sj6);
IkReal x671=(sj5*sj7);
IkReal x672=((1.0)*sj5);
IkReal x673=(cj7*r21);
IkReal x674=(r10*sj7);
IkReal x675=(cj6*cj7);
IkReal x676=((1.0)*x665);
IkReal x677=(cj5*cj6*sj7);
IkReal x678=(x667*x675);
evalcond[0]=((((0.1685)*x665))+(((-1.0)*py))+(((0.1363)*x674))+(((0.1363)*x668)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x673))+(((0.1363)*x666))+(((-0.1685)*x664)));
evalcond[2]=((((-1.0)*r20*x672*x675))+((cj6*r21*x671))+(((-1.0)*x667*x673))+(((-1.0)*x669*x672))+x664+(((-1.0)*x666*x667)));
evalcond[3]=(((sj5*x673))+((r21*x677))+(((-1.0)*r20*x678))+(((-1.0)*x667*x669))+((sj5*x666))+(((-1.0)*x676)));
evalcond[4]=(((r10*x671))+((r11*x677))+(((-1.0)*x667*x670))+(((-1.0)*x664))+(((-1.0)*r10*x678))+((sj5*x668)));
evalcond[5]=(((cj6*r11*x671))+(((-1.0)*x670*x672))+(((-1.0)*r10*x672*x675))+(((-1.0)*x667*x674))+(((-1.0)*x667*x668))+(((-1.0)*x676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x679=((0.808902077151335)*sj7);
IkReal x680=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r10*x679))+(((5.93471810089021)*py))+(((-1.0)*r11*x680)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x680))+((r20*x679))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x679))+(((5.93471810089021)*py))+(((-1.0)*r11*x680))))+IKsqr(((0.845697329376855)+((r21*x680))+((r20*x679))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r10*x679))+(((5.93471810089021)*py))+(((-1.0)*r11*x680))), ((0.845697329376855)+((r21*x680))+((r20*x679))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x681=IKcos(j3);
IkReal x682=IKsin(j3);
IkReal x683=(r20*sj7);
IkReal x684=((1.0)*cj5);
IkReal x685=(cj7*r11);
IkReal x686=(r22*sj6);
IkReal x687=(r12*sj6);
IkReal x688=(sj5*sj7);
IkReal x689=((1.0)*sj5);
IkReal x690=(cj7*r21);
IkReal x691=(r10*sj7);
IkReal x692=(cj6*cj7);
IkReal x693=((1.0)*x682);
IkReal x694=(cj5*cj6*sj7);
IkReal x695=(x684*x692);
evalcond[0]=((((0.1363)*x685))+(((-1.0)*py))+(((0.1363)*x691))+(((0.1685)*x682)));
evalcond[1]=((0.1425)+(((0.1363)*x683))+(((-0.1685)*x681))+(((-1.0)*pz))+(((0.1363)*x690)));
evalcond[2]=((((-1.0)*x684*x690))+((cj6*r21*x688))+(((-1.0)*x686*x689))+(((-1.0)*r20*x689*x692))+x681+(((-1.0)*x683*x684)));
evalcond[3]=(((sj5*x683))+(((-1.0)*x684*x686))+((sj5*x690))+(((-1.0)*x693))+(((-1.0)*r20*x695))+((r21*x694)));
evalcond[4]=(((sj5*x685))+((r10*x688))+(((-1.0)*x684*x687))+(((-1.0)*r10*x695))+((r11*x694))+(((-1.0)*x681)));
evalcond[5]=((((-1.0)*x684*x691))+(((-1.0)*x687*x689))+(((-1.0)*r10*x689*x692))+(((-1.0)*x684*x685))+(((-1.0)*x693))+((cj6*r11*x688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x696=((337.0)*sj6);
IkReal x697=(cj7*r20);
IkReal x698=(r21*sj7);
IkReal x699=((272.6)*sj4);
IkReal x700=(cj6*r22);
CheckValue<IkReal> x701=IKPowWithIntegerCheck(sj4,-1);
if(!x701.valid){
continue;
}
CheckValue<IkReal> x702=IKPowWithIntegerCheck(((800.0)+(((-800.0)*(cj4*cj4)))),-1);
if(!x702.valid){
continue;
}
if( IKabs(((x701.value)*(((((-1.0)*sj6*x697))+((sj6*x698))+x700)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x702.value)*(((((-1.0)*x696*x698))+((x696*x697))+(((2000.0)*py*sj4))+(((-1.0)*r10*sj7*x699))+(((-337.0)*x700))+(((-1.0)*cj7*r11*x699)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x701.value)*(((((-1.0)*sj6*x697))+((sj6*x698))+x700))))+IKsqr(((x702.value)*(((((-1.0)*x696*x698))+((x696*x697))+(((2000.0)*py*sj4))+(((-1.0)*r10*sj7*x699))+(((-337.0)*x700))+(((-1.0)*cj7*r11*x699))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x701.value)*(((((-1.0)*sj6*x697))+((sj6*x698))+x700))), ((x702.value)*(((((-1.0)*x696*x698))+((x696*x697))+(((2000.0)*py*sj4))+(((-1.0)*r10*sj7*x699))+(((-337.0)*x700))+(((-1.0)*cj7*r11*x699))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x703=IKsin(j3);
IkReal x704=IKcos(j3);
IkReal x705=((1.0)*sj6);
IkReal x706=(r21*sj7);
IkReal x707=(cj5*cj6);
IkReal x708=((1.0)*cj7);
IkReal x709=(r20*sj7);
IkReal x710=((1.0)*cj5);
IkReal x711=((1.0)*cj6);
IkReal x712=(r11*sj7);
IkReal x713=((0.1363)*cj7);
IkReal x714=(r10*sj7);
IkReal x715=(cj6*sj5);
IkReal x716=(cj7*sj5);
IkReal x717=(cj7*sj6);
IkReal x718=(sj4*x703);
IkReal x719=(sj4*x704);
evalcond[0]=((((-1.0)*r22*x711))+((r20*x717))+(((-1.0)*x705*x706))+x718);
evalcond[1]=((((-1.0)*r12*x711))+(((-1.0)*x705*x712))+x719+((r10*x717)));
evalcond[2]=(((r11*x713))+(((0.4)*x719))+(((0.1685)*x703))+(((-1.0)*py))+(((0.1363)*x714)));
evalcond[3]=((0.1425)+(((0.4)*x718))+(((-0.1685)*x704))+(((-1.0)*pz))+((r21*x713))+(((0.1363)*x709)));
evalcond[4]=(((x706*x715))+(((-1.0)*r22*sj5*x705))+(((-1.0)*x709*x710))+(((-1.0)*cj5*r21*x708))+(((-1.0)*r20*x708*x715))+x704);
evalcond[5]=(((cj4*x703))+((x706*x707))+(((-1.0)*cj5*r22*x705))+((sj5*x709))+(((-1.0)*r20*x707*x708))+((r21*x716)));
evalcond[6]=(((r11*x716))+((cj4*x704))+((x707*x712))+(((-1.0)*cj5*r12*x705))+((sj5*x714))+(((-1.0)*r10*x707*x708)));
evalcond[7]=((((-1.0)*r12*sj5*x705))+(((-1.0)*x710*x714))+(((-1.0)*cj5*r11*x708))+(((-1.0)*x703))+(((-1.0)*r10*x708*x715))+((x712*x715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x720=(cj6*r12);
IkReal x721=((2.37388724035608)*sj6);
IkReal x722=(cj7*r10);
IkReal x723=(r11*sj7);
CheckValue<IkReal> x724=IKPowWithIntegerCheck(sj4,-1);
if(!x724.valid){
continue;
}
if( IKabs((((x721*x722))+(((-0.808902077151335)*cj7*r11))+(((-0.808902077151335)*r10*sj7))+(((-1.0)*x721*x723))+(((5.93471810089021)*py))+(((-2.37388724035608)*x720)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x724.value)*(((((-1.0)*sj6*x722))+x720+((sj6*x723)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x721*x722))+(((-0.808902077151335)*cj7*r11))+(((-0.808902077151335)*r10*sj7))+(((-1.0)*x721*x723))+(((5.93471810089021)*py))+(((-2.37388724035608)*x720))))+IKsqr(((x724.value)*(((((-1.0)*sj6*x722))+x720+((sj6*x723))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x721*x722))+(((-0.808902077151335)*cj7*r11))+(((-0.808902077151335)*r10*sj7))+(((-1.0)*x721*x723))+(((5.93471810089021)*py))+(((-2.37388724035608)*x720))), ((x724.value)*(((((-1.0)*sj6*x722))+x720+((sj6*x723))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x725=IKsin(j3);
IkReal x726=IKcos(j3);
IkReal x727=((1.0)*sj6);
IkReal x728=(r21*sj7);
IkReal x729=(cj5*cj6);
IkReal x730=((1.0)*cj7);
IkReal x731=(r20*sj7);
IkReal x732=((1.0)*cj5);
IkReal x733=((1.0)*cj6);
IkReal x734=(r11*sj7);
IkReal x735=((0.1363)*cj7);
IkReal x736=(r10*sj7);
IkReal x737=(cj6*sj5);
IkReal x738=(cj7*sj5);
IkReal x739=(cj7*sj6);
IkReal x740=(sj4*x725);
IkReal x741=(sj4*x726);
evalcond[0]=((((-1.0)*x727*x728))+((r20*x739))+x740+(((-1.0)*r22*x733)));
evalcond[1]=(((r10*x739))+(((-1.0)*x727*x734))+x741+(((-1.0)*r12*x733)));
evalcond[2]=((((-1.0)*py))+(((0.1363)*x736))+(((0.4)*x741))+((r11*x735))+(((0.1685)*x725)));
evalcond[3]=((0.1425)+(((-1.0)*pz))+(((-0.1685)*x726))+(((0.1363)*x731))+(((0.4)*x740))+((r21*x735)));
evalcond[4]=(((x728*x737))+(((-1.0)*x731*x732))+(((-1.0)*r20*x730*x737))+(((-1.0)*cj5*r21*x730))+(((-1.0)*r22*sj5*x727))+x726);
evalcond[5]=((((-1.0)*cj5*r22*x727))+((cj4*x725))+((x728*x729))+((sj5*x731))+(((-1.0)*r20*x729*x730))+((r21*x738)));
evalcond[6]=(((cj4*x726))+(((-1.0)*cj5*r12*x727))+((x729*x734))+((sj5*x736))+(((-1.0)*r10*x729*x730))+((r11*x738)));
evalcond[7]=((((-1.0)*cj5*r11*x730))+(((-1.0)*x732*x736))+(((-1.0)*r12*sj5*x727))+((x734*x737))+(((-1.0)*x725))+(((-1.0)*r10*x730*x737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x742=(sj6*sj7);
IkReal x743=((1.0)*cj7*sj6);
CheckValue<IkReal> x744=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x744.valid){
continue;
}
CheckValue<IkReal> x745 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x743))+((r21*x742))+((cj6*r22)))),IkReal((((r11*x742))+(((-1.0)*r10*x743))+((cj6*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x745.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x744.value)))+(x745.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x746=IKsin(j3);
IkReal x747=IKcos(j3);
IkReal x748=((1.0)*sj6);
IkReal x749=(r21*sj7);
IkReal x750=(cj5*cj6);
IkReal x751=((1.0)*cj7);
IkReal x752=(r20*sj7);
IkReal x753=((1.0)*cj5);
IkReal x754=((1.0)*cj6);
IkReal x755=(r11*sj7);
IkReal x756=((0.1363)*cj7);
IkReal x757=(r10*sj7);
IkReal x758=(cj6*sj5);
IkReal x759=(cj7*sj5);
IkReal x760=(cj7*sj6);
IkReal x761=(sj4*x746);
IkReal x762=(sj4*x747);
evalcond[0]=(((r20*x760))+(((-1.0)*r22*x754))+x761+(((-1.0)*x748*x749)));
evalcond[1]=(((r10*x760))+(((-1.0)*r12*x754))+x762+(((-1.0)*x748*x755)));
evalcond[2]=((((0.1685)*x746))+(((-1.0)*py))+(((0.1363)*x757))+((r11*x756))+(((0.4)*x762)));
evalcond[3]=((0.1425)+(((-0.1685)*x747))+((r21*x756))+(((-1.0)*pz))+(((0.1363)*x752))+(((0.4)*x761)));
evalcond[4]=((((-1.0)*r22*sj5*x748))+(((-1.0)*r20*x751*x758))+(((-1.0)*cj5*r21*x751))+(((-1.0)*x752*x753))+x747+((x749*x758)));
evalcond[5]=((((-1.0)*cj5*r22*x748))+((r21*x759))+(((-1.0)*r20*x750*x751))+((sj5*x752))+((x749*x750))+((cj4*x746)));
evalcond[6]=((((-1.0)*r10*x750*x751))+((sj5*x757))+((r11*x759))+(((-1.0)*cj5*r12*x748))+((x750*x755))+((cj4*x747)));
evalcond[7]=((((-1.0)*cj5*r11*x751))+(((-1.0)*x753*x757))+(((-1.0)*r10*x751*x758))+(((-1.0)*r12*sj5*x748))+(((-1.0)*x746))+((x755*x758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x763=(cj5*cj6);
IkReal x764=((1.0)*sj7);
IkReal x765=(cj7*r01);
if( IKabs(((((-1.0)*sj5*x765))+((cj5*r02*sj6))+(((-1.0)*r00*sj5*x764))+(((-1.0)*r01*x763*x764))+((cj7*r00*x763)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((-2.5)*px))+(((0.34075)*x765)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x765))+((cj5*r02*sj6))+(((-1.0)*r00*sj5*x764))+(((-1.0)*r01*x763*x764))+((cj7*r00*x763))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((-2.5)*px))+(((0.34075)*x765))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj5*x765))+((cj5*r02*sj6))+(((-1.0)*r00*sj5*x764))+(((-1.0)*r01*x763*x764))+((cj7*r00*x763))), ((-1.0)+(((0.34075)*r00*sj7))+(((-2.5)*px))+(((0.34075)*x765))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x766=IKcos(j4);
IkReal x767=(cj7*r01);
IkReal x768=((1.0)*r02);
IkReal x769=(cj7*r00);
IkReal x770=(cj5*cj6);
IkReal x771=(r00*sj7);
IkReal x772=(r01*sj7);
evalcond[0]=((-0.4)+(((0.1363)*x767))+(((-1.0)*px))+(((0.1363)*x771))+(((-0.4)*x766)));
evalcond[1]=((((-1.0)*cj6*x768))+((sj6*x769))+(((-1.0)*x766))+(((-1.0)*sj6*x772)));
evalcond[2]=((((-1.0)*cj5*sj6*x768))+((x770*x772))+(((-1.0)*x769*x770))+(IKsin(j4))+((sj5*x771))+((sj5*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x773=(sj6*sj7);
IkReal x774=(cj7*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(((((-1.0)*r20*x774))+((r21*x773))+((cj6*r22)))))+(IKabs((((r10*x774))+(((-1.0)*cj6*r12))+(((-1.0)*r11*x773))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3eval[0]=sj4;
j3eval[1]=((1.0)+(((-1.0)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x775=((0.808902077151335)*sj7);
IkReal x776=((0.808902077151335)*cj7);
if( IKabs((((r10*x775))+((r11*x776))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x776))+((r20*x775))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x775))+((r11*x776))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x776))+((r20*x775))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x775))+((r11*x776))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r21*x776))+((r20*x775))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x777=IKsin(j3);
IkReal x778=IKcos(j3);
IkReal x779=(r20*sj7);
IkReal x780=((1.0)*cj5);
IkReal x781=(cj7*r11);
IkReal x782=(r22*sj6);
IkReal x783=(r12*sj6);
IkReal x784=(sj5*sj7);
IkReal x785=((1.0)*sj5);
IkReal x786=(cj7*r21);
IkReal x787=(r10*sj7);
IkReal x788=(cj6*cj7);
IkReal x789=(cj5*cj6*sj7);
IkReal x790=(x780*x788);
evalcond[0]=((((0.1363)*x787))+(((0.1363)*x781))+(((-0.1685)*x777))+(((-1.0)*py)));
evalcond[1]=((0.1425)+(((0.1363)*x786))+(((-0.1685)*x778))+(((-1.0)*pz))+(((0.1363)*x779)));
evalcond[2]=(((sj5*x786))+(((-1.0)*r20*x790))+((r21*x789))+x777+((sj5*x779))+(((-1.0)*x780*x782)));
evalcond[3]=(((cj6*r21*x784))+(((-1.0)*x782*x785))+x778+(((-1.0)*r20*x785*x788))+(((-1.0)*x780*x786))+(((-1.0)*x779*x780)));
evalcond[4]=((((-1.0)*r10*x785*x788))+((cj6*r11*x784))+x777+(((-1.0)*x780*x787))+(((-1.0)*x780*x781))+(((-1.0)*x783*x785)));
evalcond[5]=(((sj5*x781))+((r10*x784))+(((-1.0)*r10*x790))+((r11*x789))+(((-1.0)*x778))+(((-1.0)*x780*x783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x791=((0.808902077151335)*sj7);
IkReal x792=((0.808902077151335)*cj7);
if( IKabs((((r10*x791))+((r11*x792))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x791))+((r21*x792))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x791))+((r11*x792))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x791))+((r21*x792))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x791))+((r11*x792))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r20*x791))+((r21*x792))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x793=IKcos(j3);
IkReal x794=IKsin(j3);
IkReal x795=(cj5*cj6);
IkReal x796=((1.0)*cj7);
IkReal x797=(r20*sj7);
IkReal x798=(r21*sj7);
IkReal x799=(cj7*r11);
IkReal x800=(r11*sj7);
IkReal x801=(r10*sj7);
IkReal x802=(cj6*sj5);
IkReal x803=(cj7*r21);
IkReal x804=((1.0)*cj5);
IkReal x805=(sj6*x804);
IkReal x806=((1.0)*sj5*sj6);
evalcond[0]=((((0.1363)*x799))+(((-0.1685)*x794))+(((-1.0)*py))+(((0.1363)*x801)));
evalcond[1]=((0.1425)+(((0.1363)*x797))+(((-0.1685)*x793))+(((-1.0)*pz))+(((0.1363)*x803)));
evalcond[2]=((((-1.0)*r12*x805))+((sj5*x799))+((x795*x800))+x793+(((-1.0)*r10*x795*x796))+((sj5*x801)));
evalcond[3]=((((-1.0)*x797*x804))+(((-1.0)*r22*x806))+((x798*x802))+(((-1.0)*r20*x796*x802))+x793+(((-1.0)*cj5*r21*x796)));
evalcond[4]=(((sj5*x797))+(((-1.0)*r22*x805))+(((-1.0)*x794))+((sj5*x803))+(((-1.0)*r20*x795*x796))+((x795*x798)));
evalcond[5]=((((-1.0)*r12*x806))+((x800*x802))+(((-1.0)*cj5*r11*x796))+(((-1.0)*r10*x796*x802))+x794+(((-1.0)*x801*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x807=((0.808902077151335)*sj7);
IkReal x808=((0.808902077151335)*cj7);
if( IKabs((((r11*x808))+((r10*x807))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x808))+((r20*x807))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x808))+((r10*x807))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x808))+((r20*x807))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r11*x808))+((r10*x807))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r21*x808))+((r20*x807))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x809=IKsin(j3);
IkReal x810=IKcos(j3);
IkReal x811=(r20*sj7);
IkReal x812=((1.0)*cj5);
IkReal x813=(cj7*r11);
IkReal x814=(r22*sj6);
IkReal x815=(r12*sj6);
IkReal x816=(sj5*sj7);
IkReal x817=((1.0)*sj5);
IkReal x818=(cj7*r21);
IkReal x819=(r10*sj7);
IkReal x820=(cj6*cj7);
IkReal x821=(cj5*cj6*sj7);
IkReal x822=(x812*x820);
evalcond[0]=((((0.1363)*x819))+(((0.1363)*x813))+(((-0.1685)*x809))+(((-1.0)*py)));
evalcond[1]=((0.1425)+(((0.1363)*x818))+(((0.1363)*x811))+(((-0.1685)*x810))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*x812*x814))+((r21*x821))+(((-1.0)*r20*x822))+((sj5*x818))+((sj5*x811))+x809);
evalcond[3]=((((-1.0)*x812*x818))+(((-1.0)*r20*x817*x820))+(((-1.0)*x811*x812))+(((-1.0)*x814*x817))+((cj6*r21*x816))+x810);
evalcond[4]=((((-1.0)*x812*x813))+(((-1.0)*x812*x819))+((cj6*r11*x816))+(((-1.0)*x815*x817))+x809+(((-1.0)*r10*x817*x820)));
evalcond[5]=((((-1.0)*x812*x815))+((sj5*x813))+((r10*x816))+(((-1.0)*x810))+(((-1.0)*r10*x822))+((r11*x821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x823=((0.808902077151335)*sj7);
IkReal x824=((0.808902077151335)*cj7);
if( IKabs((((r10*x823))+((r11*x824))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x824))+((r20*x823))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x823))+((r11*x824))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x824))+((r20*x823))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x823))+((r11*x824))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r21*x824))+((r20*x823))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x825=IKsin(j3);
IkReal x826=IKcos(j3);
IkReal x827=(r20*sj7);
IkReal x828=((1.0)*cj5);
IkReal x829=(cj7*r11);
IkReal x830=(r22*sj6);
IkReal x831=(r12*sj6);
IkReal x832=(sj5*sj7);
IkReal x833=((1.0)*sj5);
IkReal x834=(cj7*r21);
IkReal x835=(r10*sj7);
IkReal x836=(cj6*cj7);
IkReal x837=(cj5*cj6*sj7);
IkReal x838=(x828*x836);
evalcond[0]=((((-1.0)*py))+(((-0.1685)*x825))+(((0.1363)*x835))+(((0.1363)*x829)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((-0.1685)*x826))+(((0.1363)*x834))+(((0.1363)*x827)));
evalcond[2]=((((-1.0)*x828*x830))+(((-1.0)*r20*x838))+((sj5*x827))+((r21*x837))+((sj5*x834))+x825);
evalcond[3]=((((-1.0)*r20*x833*x836))+(((-1.0)*x828*x834))+(((-1.0)*x827*x828))+((cj6*r21*x832))+(((-1.0)*x830*x833))+x826);
evalcond[4]=((((-1.0)*x828*x835))+(((-1.0)*x828*x829))+(((-1.0)*r10*x833*x836))+((cj6*r11*x832))+x825+(((-1.0)*x831*x833)));
evalcond[5]=((((-1.0)*x828*x831))+(((-1.0)*r10*x838))+((r10*x832))+((sj5*x829))+(((-1.0)*x826))+((r11*x837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x839=((0.808902077151335)*sj7);
IkReal x840=((0.808902077151335)*cj7);
if( IKabs((((r10*x839))+((r11*x840))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x839))+((r21*x840))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x839))+((r11*x840))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x839))+((r21*x840))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x839))+((r11*x840))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r20*x839))+((r21*x840))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x841=IKcos(j3);
IkReal x842=IKsin(j3);
IkReal x843=(cj5*cj6);
IkReal x844=((1.0)*cj7);
IkReal x845=(r20*sj7);
IkReal x846=(r21*sj7);
IkReal x847=(cj7*r11);
IkReal x848=(r11*sj7);
IkReal x849=(r10*sj7);
IkReal x850=(cj6*sj5);
IkReal x851=(cj7*r21);
IkReal x852=((1.0)*cj5);
IkReal x853=(sj6*x852);
IkReal x854=((1.0)*sj5*sj6);
evalcond[0]=((((-0.1685)*x842))+(((-1.0)*py))+(((0.1363)*x849))+(((0.1363)*x847)));
evalcond[1]=((0.1425)+(((0.1363)*x851))+(((-0.1685)*x841))+(((-1.0)*pz))+(((0.1363)*x845)));
evalcond[2]=((((-1.0)*r12*x853))+((x843*x848))+((sj5*x849))+((sj5*x847))+(((-1.0)*r10*x843*x844))+x841);
evalcond[3]=((((-1.0)*r22*x854))+(((-1.0)*x845*x852))+(((-1.0)*cj5*r21*x844))+((x846*x850))+x841+(((-1.0)*r20*x844*x850)));
evalcond[4]=((((-1.0)*r22*x853))+((sj5*x851))+((x843*x846))+((sj5*x845))+(((-1.0)*x842))+(((-1.0)*r20*x843*x844)));
evalcond[5]=(((x848*x850))+(((-1.0)*r12*x854))+(((-1.0)*x849*x852))+(((-1.0)*cj5*r11*x844))+(((-1.0)*r10*x844*x850))+x842);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x855=((0.808902077151335)*sj7);
IkReal x856=((0.808902077151335)*cj7);
if( IKabs((((r10*x855))+((r11*x856))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x856))+(((-5.93471810089021)*pz))+((r20*x855)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x855))+((r11*x856))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x856))+(((-5.93471810089021)*pz))+((r20*x855))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x855))+((r11*x856))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r21*x856))+(((-5.93471810089021)*pz))+((r20*x855))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x857=IKcos(j3);
IkReal x858=IKsin(j3);
IkReal x859=(cj5*cj6);
IkReal x860=((1.0)*cj7);
IkReal x861=(r20*sj7);
IkReal x862=(r21*sj7);
IkReal x863=(cj7*r11);
IkReal x864=(r11*sj7);
IkReal x865=(r10*sj7);
IkReal x866=(cj6*sj5);
IkReal x867=(cj7*r21);
IkReal x868=((1.0)*cj5);
IkReal x869=(sj6*x868);
IkReal x870=((1.0)*sj5*sj6);
evalcond[0]=((((0.1363)*x865))+(((0.1363)*x863))+(((-1.0)*py))+(((-0.1685)*x858)));
evalcond[1]=((0.1425)+(((0.1363)*x867))+(((0.1363)*x861))+(((-1.0)*pz))+(((-0.1685)*x857)));
evalcond[2]=(((sj5*x865))+((sj5*x863))+((x859*x864))+x857+(((-1.0)*r12*x869))+(((-1.0)*r10*x859*x860)));
evalcond[3]=((((-1.0)*x861*x868))+(((-1.0)*cj5*r21*x860))+((x862*x866))+x857+(((-1.0)*r20*x860*x866))+(((-1.0)*r22*x870)));
evalcond[4]=((((-1.0)*x858))+((sj5*x867))+((sj5*x861))+((x859*x862))+(((-1.0)*r20*x859*x860))+(((-1.0)*r22*x869)));
evalcond[5]=((((-1.0)*cj5*r11*x860))+(((-1.0)*r12*x870))+(((-1.0)*x865*x868))+(((-1.0)*r10*x860*x866))+x858+((x864*x866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x871=((337.0)*sj6);
IkReal x872=(cj7*r20);
IkReal x873=(cj6*r22);
IkReal x874=(r21*sj7);
IkReal x875=((272.6)*sj4);
CheckValue<IkReal> x876=IKPowWithIntegerCheck(sj4,-1);
if(!x876.valid){
continue;
}
CheckValue<IkReal> x877=IKPowWithIntegerCheck(((800.0)+(((-800.0)*(cj4*cj4)))),-1);
if(!x877.valid){
continue;
}
if( IKabs(((x876.value)*(((((-1.0)*sj6*x872))+((sj6*x874))+x873)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x877.value)*((((x871*x872))+(((-1.0)*x871*x874))+((cj7*r11*x875))+(((-337.0)*x873))+((r10*sj7*x875))+(((-2000.0)*py*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x876.value)*(((((-1.0)*sj6*x872))+((sj6*x874))+x873))))+IKsqr(((x877.value)*((((x871*x872))+(((-1.0)*x871*x874))+((cj7*r11*x875))+(((-337.0)*x873))+((r10*sj7*x875))+(((-2000.0)*py*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x876.value)*(((((-1.0)*sj6*x872))+((sj6*x874))+x873))), ((x877.value)*((((x871*x872))+(((-1.0)*x871*x874))+((cj7*r11*x875))+(((-337.0)*x873))+((r10*sj7*x875))+(((-2000.0)*py*sj4))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x878=IKsin(j3);
IkReal x879=IKcos(j3);
IkReal x880=((1.0)*sj6);
IkReal x881=(r21*sj7);
IkReal x882=(cj5*cj6);
IkReal x883=((1.0)*cj7);
IkReal x884=(r20*sj7);
IkReal x885=((1.0)*cj5);
IkReal x886=((1.0)*cj6);
IkReal x887=(r11*sj7);
IkReal x888=((0.1363)*cj7);
IkReal x889=(r10*sj7);
IkReal x890=(cj6*sj5);
IkReal x891=(cj7*sj5);
IkReal x892=(cj7*sj6);
IkReal x893=(sj4*x878);
IkReal x894=(sj4*x879);
evalcond[0]=(((r20*x892))+x893+(((-1.0)*r22*x886))+(((-1.0)*x880*x881)));
evalcond[1]=(((r10*x892))+(((-1.0)*r12*x886))+(((-1.0)*x894))+(((-1.0)*x880*x887)));
evalcond[2]=(((r11*x888))+(((-0.4)*x894))+(((-1.0)*py))+(((-0.1685)*x878))+(((0.1363)*x889)));
evalcond[3]=((0.1425)+(((0.4)*x893))+(((-1.0)*pz))+((r21*x888))+(((-0.1685)*x879))+(((0.1363)*x884)));
evalcond[4]=(((x881*x890))+(((-1.0)*r22*sj5*x880))+(((-1.0)*cj5*r21*x883))+(((-1.0)*r20*x883*x890))+x879+(((-1.0)*x884*x885)));
evalcond[5]=((((-1.0)*cj5*r22*x880))+((x881*x882))+((sj5*x884))+((cj4*x878))+((r21*x891))+(((-1.0)*r20*x882*x883)));
evalcond[6]=((((-1.0)*r12*sj5*x880))+(((-1.0)*r10*x883*x890))+x878+(((-1.0)*x885*x889))+(((-1.0)*cj5*r11*x883))+((x887*x890)));
evalcond[7]=(((r11*x891))+((x882*x887))+((sj5*x889))+(((-1.0)*r10*x882*x883))+(((-1.0)*cj4*x879))+(((-1.0)*cj5*r12*x880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x895=((2.37388724035608)*sj6);
IkReal x896=(r21*sj7);
IkReal x897=(cj7*r20);
IkReal x898=(cj6*r22);
CheckValue<IkReal> x899=IKPowWithIntegerCheck(sj4,-1);
if(!x899.valid){
continue;
}
if( IKabs(((x899.value)*(((((-1.0)*sj6*x897))+((sj6*x896))+x898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+(((0.808902077151335)*r20*sj7))+(((-1.0)*x895*x897))+((x895*x896))+(((0.808902077151335)*cj7*r21))+(((-5.93471810089021)*pz))+(((2.37388724035608)*x898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x899.value)*(((((-1.0)*sj6*x897))+((sj6*x896))+x898))))+IKsqr(((0.845697329376855)+(((0.808902077151335)*r20*sj7))+(((-1.0)*x895*x897))+((x895*x896))+(((0.808902077151335)*cj7*r21))+(((-5.93471810089021)*pz))+(((2.37388724035608)*x898))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x899.value)*(((((-1.0)*sj6*x897))+((sj6*x896))+x898))), ((0.845697329376855)+(((0.808902077151335)*r20*sj7))+(((-1.0)*x895*x897))+((x895*x896))+(((0.808902077151335)*cj7*r21))+(((-5.93471810089021)*pz))+(((2.37388724035608)*x898))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x900=IKsin(j3);
IkReal x901=IKcos(j3);
IkReal x902=((1.0)*sj6);
IkReal x903=(r21*sj7);
IkReal x904=(cj5*cj6);
IkReal x905=((1.0)*cj7);
IkReal x906=(r20*sj7);
IkReal x907=((1.0)*cj5);
IkReal x908=((1.0)*cj6);
IkReal x909=(r11*sj7);
IkReal x910=((0.1363)*cj7);
IkReal x911=(r10*sj7);
IkReal x912=(cj6*sj5);
IkReal x913=(cj7*sj5);
IkReal x914=(cj7*sj6);
IkReal x915=(sj4*x900);
IkReal x916=(sj4*x901);
evalcond[0]=((((-1.0)*r22*x908))+(((-1.0)*x902*x903))+((r20*x914))+x915);
evalcond[1]=((((-1.0)*x902*x909))+(((-1.0)*r12*x908))+((r10*x914))+(((-1.0)*x916)));
evalcond[2]=((((-0.4)*x916))+(((0.1363)*x911))+((r11*x910))+(((-1.0)*py))+(((-0.1685)*x900)));
evalcond[3]=((0.1425)+(((0.1363)*x906))+(((-1.0)*pz))+(((0.4)*x915))+((r21*x910))+(((-0.1685)*x901)));
evalcond[4]=((((-1.0)*r20*x905*x912))+((x903*x912))+(((-1.0)*cj5*r21*x905))+(((-1.0)*r22*sj5*x902))+x901+(((-1.0)*x906*x907)));
evalcond[5]=((((-1.0)*r20*x904*x905))+((x903*x904))+((sj5*x906))+(((-1.0)*cj5*r22*x902))+((cj4*x900))+((r21*x913)));
evalcond[6]=((((-1.0)*cj5*r11*x905))+((x909*x912))+(((-1.0)*r12*sj5*x902))+(((-1.0)*r10*x905*x912))+(((-1.0)*x907*x911))+x900);
evalcond[7]=((((-1.0)*cj5*r12*x902))+((sj5*x911))+(((-1.0)*r10*x904*x905))+((r11*x913))+(((-1.0)*cj4*x901))+((x904*x909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x917=(sj6*sj7);
IkReal x918=(cj7*sj6);
CheckValue<IkReal> x919=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x919.valid){
continue;
}
CheckValue<IkReal> x920 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x918))+((cj6*r22))+((r21*x917)))),IkReal(((((-1.0)*cj6*r12))+(((-1.0)*r11*x917))+((r10*x918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x920.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x919.value)))+(x920.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x921=IKsin(j3);
IkReal x922=IKcos(j3);
IkReal x923=((1.0)*sj6);
IkReal x924=(r21*sj7);
IkReal x925=(cj5*cj6);
IkReal x926=((1.0)*cj7);
IkReal x927=(r20*sj7);
IkReal x928=((1.0)*cj5);
IkReal x929=((1.0)*cj6);
IkReal x930=(r11*sj7);
IkReal x931=((0.1363)*cj7);
IkReal x932=(r10*sj7);
IkReal x933=(cj6*sj5);
IkReal x934=(cj7*sj5);
IkReal x935=(cj7*sj6);
IkReal x936=(sj4*x921);
IkReal x937=(sj4*x922);
evalcond[0]=((((-1.0)*r22*x929))+((r20*x935))+x936+(((-1.0)*x923*x924)));
evalcond[1]=((((-1.0)*r12*x929))+((r10*x935))+(((-1.0)*x937))+(((-1.0)*x923*x930)));
evalcond[2]=((((-0.1685)*x921))+(((-0.4)*x937))+(((-1.0)*py))+(((0.1363)*x932))+((r11*x931)));
evalcond[3]=((0.1425)+(((-0.1685)*x922))+((r21*x931))+(((-1.0)*pz))+(((0.1363)*x927))+(((0.4)*x936)));
evalcond[4]=((((-1.0)*r22*sj5*x923))+(((-1.0)*r20*x926*x933))+((x924*x933))+(((-1.0)*cj5*r21*x926))+(((-1.0)*x927*x928))+x922);
evalcond[5]=(((sj5*x927))+(((-1.0)*r20*x925*x926))+((x924*x925))+((r21*x934))+(((-1.0)*cj5*r22*x923))+((cj4*x921)));
evalcond[6]=((((-1.0)*x928*x932))+(((-1.0)*cj5*r11*x926))+((x930*x933))+(((-1.0)*r12*sj5*x923))+x921+(((-1.0)*r10*x926*x933)));
evalcond[7]=((((-1.0)*cj4*x922))+(((-1.0)*cj5*r12*x923))+((r11*x934))+(((-1.0)*r10*x925*x926))+((x925*x930))+((sj5*x932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x938=(cj5*cj7);
IkReal x939=(sj5*sj6);
IkReal x940=(cj5*sj7);
IkReal x941=((1.0)*r10);
IkReal x942=(cj6*sj5);
CheckValue<IkReal> x943=IKPowWithIntegerCheck(cj2,-1);
if(!x943.valid){
continue;
}
if( IKabs(((x943.value)*(((((-1.0)*cj7*x941*x942))+(((-1.0)*r11*x938))+(((-1.0)*r12*x939))+((r11*sj7*x942))+(((-1.0)*x940*x941)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x939))+((r21*x938))+(((-1.0)*r21*sj7*x942))+((cj7*r20*x942))+((r20*x940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x943.value)*(((((-1.0)*cj7*x941*x942))+(((-1.0)*r11*x938))+(((-1.0)*r12*x939))+((r11*sj7*x942))+(((-1.0)*x940*x941))))))+IKsqr((((r22*x939))+((r21*x938))+(((-1.0)*r21*sj7*x942))+((cj7*r20*x942))+((r20*x940))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x943.value)*(((((-1.0)*cj7*x941*x942))+(((-1.0)*r11*x938))+(((-1.0)*r12*x939))+((r11*sj7*x942))+(((-1.0)*x940*x941))))), (((r22*x939))+((r21*x938))+(((-1.0)*r21*sj7*x942))+((cj7*r20*x942))+((r20*x940))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x944=IKsin(j3);
IkReal x945=(cj6*sj5);
IkReal x946=((1.0)*cj5);
IkReal x947=((1.0)*cj7);
IkReal x948=((1.0)*sj5*sj6);
evalcond[0]=((IKcos(j3))+(((-1.0)*cj7*r21*x946))+(((-1.0)*r20*sj7*x946))+((r21*sj7*x945))+(((-1.0)*r22*x948))+(((-1.0)*r20*x945*x947)));
evalcond[1]=((((-1.0)*r02*x948))+((sj2*x944))+((r01*sj7*x945))+(((-1.0)*r00*sj7*x946))+(((-1.0)*r00*x945*x947))+(((-1.0)*cj7*r01*x946)));
evalcond[2]=((((-1.0)*r12*x948))+(((-1.0)*r10*x945*x947))+(((-1.0)*cj7*r11*x946))+(((-1.0)*r10*sj7*x946))+(((-1.0)*cj2*x944))+((r11*sj7*x945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x949=(sj2*sj6);
IkReal x950=(cj7*r00);
IkReal x951=(r01*sj7);
IkReal x952=(cj2*sj6);
IkReal x953=(r11*sj7);
IkReal x954=(cj6*r12);
IkReal x955=(cj6*r02);
IkReal x956=((1.0)*cj7*r10);
if( IKabs((((x952*x953))+((x949*x950))+((cj2*x954))+(((-1.0)*x949*x951))+(((-1.0)*sj2*x955))+(((-1.0)*x952*x956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x951*x952))+((x949*x953))+((cj2*x955))+(((-1.0)*x950*x952))+((sj2*x954))+(((-1.0)*x949*x956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x952*x953))+((x949*x950))+((cj2*x954))+(((-1.0)*x949*x951))+(((-1.0)*sj2*x955))+(((-1.0)*x952*x956))))+IKsqr((((x951*x952))+((x949*x953))+((cj2*x955))+(((-1.0)*x950*x952))+((sj2*x954))+(((-1.0)*x949*x956))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x952*x953))+((x949*x950))+((cj2*x954))+(((-1.0)*x949*x951))+(((-1.0)*sj2*x955))+(((-1.0)*x952*x956))), (((x951*x952))+((x949*x953))+((cj2*x955))+(((-1.0)*x950*x952))+((sj2*x954))+(((-1.0)*x949*x956))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x957=IKcos(j4);
IkReal x958=IKsin(j4);
IkReal x959=(cj5*cj6);
IkReal x960=(cj7*r10);
IkReal x961=(cj7*sj5);
IkReal x962=(r00*sj7);
IkReal x963=(r11*sj7);
IkReal x964=((0.1363)*cj7);
IkReal x965=((0.4)*sj2);
IkReal x966=(r10*sj7);
IkReal x967=((1.0)*cj6);
IkReal x968=((1.0)*sj6);
IkReal x969=(r01*sj7);
IkReal x970=((1.0)*sj2);
IkReal x971=(cj7*r00);
IkReal x972=(cj2*x957);
IkReal x973=(cj2*x958);
IkReal x974=((0.4)*x957);
IkReal x975=(cj5*x968);
IkReal x976=(x958*x970);
evalcond[0]=((((-1.0)*x963*x968))+((sj6*x960))+(((-1.0)*r12*x967))+((sj2*x957))+x973);
evalcond[1]=(((sj6*x971))+(((-1.0)*x968*x969))+x972+(((-1.0)*x976))+(((-1.0)*r02*x967)));
evalcond[2]=((((0.4)*cj2))+(((-1.0)*px))+((r01*x964))+(((-1.0)*x958*x965))+(((0.1363)*x962))+(((0.4)*x972)));
evalcond[3]=((((-1.0)*py))+(((0.1363)*x966))+((r11*x964))+((x957*x965))+x965+(((0.4)*x973)));
evalcond[4]=((((-1.0)*x959*x960))+((r11*x961))+((x959*x963))+(((-1.0)*r12*x975))+x972+((sj5*x966))+(((-1.0)*x976)));
evalcond[5]=((((-1.0)*x973))+(((-1.0)*x957*x970))+(((-1.0)*x959*x971))+((r01*x961))+((x959*x969))+(((-1.0)*r02*x975))+((sj5*x962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x977=(cj2*cj6);
IkReal x978=((1.0)*r00);
IkReal x979=(sj2*sj6);
IkReal x980=(cj6*sj2);
IkReal x981=(cj2*sj6*sj7);
IkReal x982=(cj2*cj7*sj6);
if( IKabs((((r01*sj7*x979))+(((-1.0)*r12*x977))+(((-1.0)*cj7*x978*x979))+(((-1.0)*r11*x981))+((r10*x982))+((r02*x980)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x981))+(((-1.0)*x978*x982))+((r11*sj7*x979))+((r12*x980))+((r02*x977))+(((-1.0)*cj7*r10*x979)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj7*x979))+(((-1.0)*r12*x977))+(((-1.0)*cj7*x978*x979))+(((-1.0)*r11*x981))+((r10*x982))+((r02*x980))))+IKsqr((((r01*x981))+(((-1.0)*x978*x982))+((r11*sj7*x979))+((r12*x980))+((r02*x977))+(((-1.0)*cj7*r10*x979))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj7*x979))+(((-1.0)*r12*x977))+(((-1.0)*cj7*x978*x979))+(((-1.0)*r11*x981))+((r10*x982))+((r02*x980))), (((r01*x981))+(((-1.0)*x978*x982))+((r11*sj7*x979))+((r12*x980))+((r02*x977))+(((-1.0)*cj7*r10*x979))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x983=IKcos(j4);
IkReal x984=IKsin(j4);
IkReal x985=(cj5*cj6);
IkReal x986=((1.0)*cj7);
IkReal x987=(r11*sj7);
IkReal x988=((0.4)*cj2);
IkReal x989=(cj7*sj5);
IkReal x990=((0.4)*sj2);
IkReal x991=((1.0)*r12);
IkReal x992=(sj5*sj7);
IkReal x993=(cj5*sj6);
IkReal x994=((1.0)*r02);
IkReal x995=((0.1363)*cj7);
IkReal x996=((1.0)*sj6);
IkReal x997=((1.0)*cj2);
IkReal x998=((0.1363)*sj7);
IkReal x999=(r01*sj7);
IkReal x1000=(cj7*sj6);
IkReal x1001=(sj2*x983);
IkReal x1002=(sj2*x984);
IkReal x1003=(x984*x997);
evalcond[0]=(x1002+(((-1.0)*x996*x999))+(((-1.0)*cj6*x994))+((cj2*x983))+((r00*x1000)));
evalcond[1]=(x1001+(((-1.0)*x1003))+(((-1.0)*cj6*x991))+(((-1.0)*x987*x996))+((r10*x1000)));
evalcond[2]=(((x983*x988))+((r01*x995))+((r00*x998))+(((-1.0)*px))+x988+((x984*x990)));
evalcond[3]=(((x983*x990))+(((-1.0)*py))+((r10*x998))+(((-1.0)*x984*x988))+x990+((r11*x995)));
evalcond[4]=(x1001+(((-1.0)*x1003))+((r00*x992))+(((-1.0)*r00*x985*x986))+((r01*x989))+(((-1.0)*x993*x994))+((x985*x999)));
evalcond[5]=((((-1.0)*x1002))+(((-1.0)*x991*x993))+((r10*x992))+(((-1.0)*r10*x985*x986))+((r11*x989))+(((-1.0)*x983*x997))+((x985*x987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1004=(sj6*sj7);
IkReal x1005=((1.0)*cj7*sj6);
if( IKabs(((((-1.0)*r20*x1005))+((r21*x1004))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1004))+((cj6*r02))+(((-1.0)*r00*x1005)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1005))+((r21*x1004))+((cj6*r22))))+IKsqr((((r01*x1004))+((cj6*r02))+(((-1.0)*r00*x1005))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r20*x1005))+((r21*x1004))+((cj6*r22))), (((r01*x1004))+((cj6*r02))+(((-1.0)*r00*x1005))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1006=IKsin(j4);
IkReal x1007=IKcos(j4);
IkReal x1008=(r21*sj7);
IkReal x1009=((1.0)*sj6);
IkReal x1010=(r20*sj7);
IkReal x1011=(cj5*cj6);
IkReal x1012=((1.0)*cj7);
IkReal x1013=(cj7*r01);
IkReal x1014=(r00*sj7);
IkReal x1015=((1.0)*cj6);
IkReal x1016=(r01*sj7);
IkReal x1017=(cj7*r21);
IkReal x1018=(cj7*sj6);
evalcond[0]=((((-1.0)*r22*x1015))+x1006+(((-1.0)*x1008*x1009))+((r20*x1018)));
evalcond[1]=(x1007+(((-1.0)*x1009*x1016))+(((-1.0)*r02*x1015))+((r00*x1018)));
evalcond[2]=((0.1425)+(((0.4)*x1006))+(((0.1363)*x1010))+(((0.1363)*x1017))+(((-1.0)*pz)));
evalcond[3]=((0.4)+(((0.4)*x1007))+(((0.1363)*x1013))+(((0.1363)*x1014))+(((-1.0)*px)));
evalcond[4]=(x1007+(((-1.0)*r20*x1011*x1012))+((sj5*x1017))+((sj5*x1010))+((x1008*x1011))+(((-1.0)*cj5*r22*x1009)));
evalcond[5]=((((-1.0)*cj5*r02*x1009))+(((-1.0)*x1006))+(((-1.0)*r00*x1011*x1012))+((sj5*x1013))+((sj5*x1014))+((x1011*x1016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1019=IKcos(j4);
IkReal x1020=IKsin(j4);
IkReal x1021=(r21*sj7);
IkReal x1022=((1.0)*sj6);
IkReal x1023=(r20*sj7);
IkReal x1024=(cj5*cj6);
IkReal x1025=((1.0)*cj7);
IkReal x1026=(cj7*r01);
IkReal x1027=(r00*sj7);
IkReal x1028=((1.0)*cj6);
IkReal x1029=(r01*sj7);
IkReal x1030=(cj7*r21);
IkReal x1031=(cj7*sj6);
IkReal x1032=((1.0)*x1020);
evalcond[0]=(((r00*x1031))+x1019+(((-1.0)*x1022*x1029))+(((-1.0)*r02*x1028)));
evalcond[1]=((0.1425)+(((0.1363)*x1023))+(((0.1363)*x1030))+(((-0.4)*x1020))+(((-1.0)*pz)));
evalcond[2]=((0.4)+(((0.1363)*x1026))+(((0.1363)*x1027))+(((0.4)*x1019))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r22*x1028))+(((-1.0)*x1032))+(((-1.0)*x1021*x1022))+((r20*x1031)));
evalcond[4]=((((-1.0)*r20*x1024*x1025))+(((-1.0)*cj5*r22*x1022))+((x1021*x1024))+((sj5*x1030))+((sj5*x1023))+(((-1.0)*x1019)));
evalcond[5]=((((-1.0)*x1032))+(((-1.0)*cj5*r02*x1022))+(((-1.0)*r00*x1024*x1025))+((x1024*x1029))+((sj5*x1026))+((sj5*x1027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1033=IKsin(j4);
IkReal x1034=IKcos(j4);
IkReal x1035=((1.0)*cj6);
IkReal x1036=(cj5*cj7);
IkReal x1037=(cj7*sj5);
IkReal x1038=(r11*sj7);
IkReal x1039=(cj5*cj6);
IkReal x1040=(sj5*sj7);
IkReal x1041=((1.0)*sj6);
IkReal x1042=((0.1363)*cj7);
IkReal x1043=((0.1363)*sj7);
IkReal x1044=(r01*sj7);
IkReal x1045=(cj7*sj6);
IkReal x1046=(cj5*x1041);
evalcond[0]=(x1033+(((-1.0)*x1038*x1041))+((r10*x1045))+(((-1.0)*r12*x1035)));
evalcond[1]=(x1034+(((-1.0)*x1041*x1044))+(((-1.0)*r02*x1035))+((r00*x1045)));
evalcond[2]=((((0.4)*x1033))+((r11*x1042))+(((-1.0)*py))+((r10*x1043)));
evalcond[3]=((0.4)+(((0.4)*x1034))+(((-1.0)*px))+((r01*x1042))+((r00*x1043)));
evalcond[4]=(((x1038*x1039))+x1034+(((-1.0)*r12*x1046))+((r10*x1040))+(((-1.0)*r10*x1035*x1036))+((r11*x1037)));
evalcond[5]=((((-1.0)*r02*x1046))+(((-1.0)*x1033))+((x1039*x1044))+((r00*x1040))+(((-1.0)*r00*x1035*x1036))+((r01*x1037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1047=IKcos(j4);
IkReal x1048=IKsin(j4);
IkReal x1049=((1.0)*cj6);
IkReal x1050=(cj5*cj7);
IkReal x1051=(cj7*sj5);
IkReal x1052=(sj5*sj7);
IkReal x1053=(r11*sj7);
IkReal x1054=(cj5*cj6);
IkReal x1055=((0.1363)*cj7);
IkReal x1056=((1.0)*sj6);
IkReal x1057=((0.1363)*sj7);
IkReal x1058=(r01*sj7);
IkReal x1059=(cj7*sj6);
IkReal x1060=((1.0)*x1048);
IkReal x1061=(cj5*x1056);
evalcond[0]=((((-1.0)*r02*x1049))+x1047+((r00*x1059))+(((-1.0)*x1056*x1058)));
evalcond[1]=(((r11*x1055))+(((-1.0)*py))+((r10*x1057))+(((-0.4)*x1048)));
evalcond[2]=((0.4)+(((0.4)*x1047))+(((-1.0)*px))+((r00*x1057))+((r01*x1055)));
evalcond[3]=((((-1.0)*r12*x1049))+((r10*x1059))+(((-1.0)*x1053*x1056))+(((-1.0)*x1060)));
evalcond[4]=(((r11*x1051))+(((-1.0)*r12*x1061))+((x1053*x1054))+((r10*x1052))+(((-1.0)*x1047))+(((-1.0)*r10*x1049*x1050)));
evalcond[5]=(((x1054*x1058))+(((-1.0)*r02*x1061))+((r00*x1052))+(((-1.0)*r00*x1049*x1050))+((r01*x1051))+(((-1.0)*x1060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1062=(sj6*sj7);
IkReal x1063=((1.0)*cj7*sj6);
CheckValue<IkReal> x1064=IKPowWithIntegerCheck(cj3,-1);
if(!x1064.valid){
continue;
}
if( IKabs(((x1064.value)*(((((-1.0)*r10*x1063))+((cj6*r12))+((r11*x1062)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1063))+((cj6*r02))+((r01*x1062)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1064.value)*(((((-1.0)*r10*x1063))+((cj6*r12))+((r11*x1062))))))+IKsqr(((((-1.0)*r00*x1063))+((cj6*r02))+((r01*x1062))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1064.value)*(((((-1.0)*r10*x1063))+((cj6*r12))+((r11*x1062))))), ((((-1.0)*r00*x1063))+((cj6*r02))+((r01*x1062))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1065=IKcos(j4);
IkReal x1066=IKsin(j4);
IkReal x1067=(r21*sj7);
IkReal x1068=((1.0)*sj6);
IkReal x1069=(r20*sj7);
IkReal x1070=(cj5*cj6);
IkReal x1071=(cj7*sj5);
IkReal x1072=(sj5*sj7);
IkReal x1073=((1.0)*cj6);
IkReal x1074=(r11*sj7);
IkReal x1075=((0.1363)*cj7);
IkReal x1076=((0.1363)*sj7);
IkReal x1077=(r01*sj7);
IkReal x1078=(cj7*sj6);
IkReal x1079=((0.4)*x1066);
IkReal x1080=((1.0)*cj7*x1070);
evalcond[0]=(x1065+(((-1.0)*r02*x1073))+(((-1.0)*x1068*x1077))+((r00*x1078)));
evalcond[1]=((0.4)+(((0.4)*x1065))+(((-1.0)*px))+((r00*x1076))+((r01*x1075)));
evalcond[2]=(((sj3*x1066))+(((-1.0)*r22*x1073))+((r20*x1078))+(((-1.0)*x1067*x1068)));
evalcond[3]=((((-1.0)*r12*x1073))+((cj3*x1066))+(((-1.0)*x1068*x1074))+((r10*x1078)));
evalcond[4]=((((0.1685)*sj3))+((cj3*x1079))+(((-1.0)*py))+((r10*x1076))+((r11*x1075)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((sj3*x1079))+(((0.1363)*x1069))+(((-1.0)*pz))+((r21*x1075)));
evalcond[6]=(((sj3*x1065))+((x1067*x1070))+((sj5*x1069))+(((-1.0)*cj5*r22*x1068))+((r21*x1071))+(((-1.0)*r20*x1080)));
evalcond[7]=((((-1.0)*r10*x1080))+((x1070*x1074))+((cj3*x1065))+((r10*x1072))+(((-1.0)*cj5*r12*x1068))+((r11*x1071)));
evalcond[8]=(((x1070*x1077))+(((-1.0)*r00*x1080))+((r00*x1072))+(((-1.0)*cj5*r02*x1068))+((r01*x1071))+(((-1.0)*x1066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1081=(sj6*sj7);
IkReal x1082=((1.0)*cj7*sj6);
CheckValue<IkReal> x1083=IKPowWithIntegerCheck(sj3,-1);
if(!x1083.valid){
continue;
}
if( IKabs(((x1083.value)*((((cj6*r22))+(((-1.0)*r20*x1082))+((r21*x1081)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1081))+(((-1.0)*r00*x1082))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1083.value)*((((cj6*r22))+(((-1.0)*r20*x1082))+((r21*x1081))))))+IKsqr((((r01*x1081))+(((-1.0)*r00*x1082))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1083.value)*((((cj6*r22))+(((-1.0)*r20*x1082))+((r21*x1081))))), (((r01*x1081))+(((-1.0)*r00*x1082))+((cj6*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1084=IKcos(j4);
IkReal x1085=IKsin(j4);
IkReal x1086=(r21*sj7);
IkReal x1087=((1.0)*sj6);
IkReal x1088=(r20*sj7);
IkReal x1089=(cj5*cj6);
IkReal x1090=(cj7*sj5);
IkReal x1091=(sj5*sj7);
IkReal x1092=((1.0)*cj6);
IkReal x1093=(r11*sj7);
IkReal x1094=((0.1363)*cj7);
IkReal x1095=((0.1363)*sj7);
IkReal x1096=(r01*sj7);
IkReal x1097=(cj7*sj6);
IkReal x1098=((0.4)*x1085);
IkReal x1099=((1.0)*cj7*x1089);
evalcond[0]=(x1084+((r00*x1097))+(((-1.0)*r02*x1092))+(((-1.0)*x1087*x1096)));
evalcond[1]=((0.4)+((r01*x1094))+((r00*x1095))+(((-1.0)*px))+(((0.4)*x1084)));
evalcond[2]=(((sj3*x1085))+((r20*x1097))+(((-1.0)*x1086*x1087))+(((-1.0)*r22*x1092)));
evalcond[3]=(((r10*x1097))+(((-1.0)*r12*x1092))+(((-1.0)*x1087*x1093))+((cj3*x1085)));
evalcond[4]=((((0.1685)*sj3))+((r10*x1095))+(((-1.0)*py))+((r11*x1094))+((cj3*x1098)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((r21*x1094))+(((-1.0)*pz))+(((0.1363)*x1088))+((sj3*x1098)));
evalcond[6]=(((sj5*x1088))+((sj3*x1084))+((r21*x1090))+((x1086*x1089))+(((-1.0)*r20*x1099))+(((-1.0)*cj5*r22*x1087)));
evalcond[7]=(((x1089*x1093))+((r10*x1091))+((r11*x1090))+(((-1.0)*r10*x1099))+((cj3*x1084))+(((-1.0)*cj5*r12*x1087)));
evalcond[8]=(((r01*x1090))+((r00*x1091))+((x1089*x1096))+(((-1.0)*x1085))+(((-1.0)*cj5*r02*x1087))+(((-1.0)*r00*x1099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1100=IKsin(j4);
IkReal x1101=IKcos(j4);
IkReal x1102=(r21*sj7);
IkReal x1103=((1.0)*sj6);
IkReal x1104=(r20*sj7);
IkReal x1105=(cj5*cj6);
IkReal x1106=((1.0)*cj7);
IkReal x1107=(cj7*r01);
IkReal x1108=(r00*sj7);
IkReal x1109=((1.0)*cj6);
IkReal x1110=(r01*sj7);
IkReal x1111=(cj7*r21);
IkReal x1112=(cj7*sj6);
evalcond[0]=(x1100+((r20*x1112))+(((-1.0)*r22*x1109))+(((-1.0)*x1102*x1103)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x1104))+(((0.1363)*x1111))+(((0.4)*x1100)));
evalcond[2]=((-0.4)+(((-0.4)*x1101))+(((-1.0)*px))+(((0.1363)*x1108))+(((0.1363)*x1107)));
evalcond[3]=((((-1.0)*x1103*x1110))+(((-1.0)*x1101))+((r00*x1112))+(((-1.0)*r02*x1109)));
evalcond[4]=(x1101+((x1102*x1105))+(((-1.0)*r20*x1105*x1106))+(((-1.0)*cj5*r22*x1103))+((sj5*x1111))+((sj5*x1104)));
evalcond[5]=(x1100+(((-1.0)*r00*x1105*x1106))+((x1105*x1110))+(((-1.0)*cj5*r02*x1103))+((sj5*x1108))+((sj5*x1107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1113=((0.34075)*cj7);
IkReal x1114=((0.34075)*sj7);
if( IKabs(((0.35625)+((r20*x1114))+(((-2.5)*pz))+((r21*x1113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*px))+((r01*x1113))+((r00*x1114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+((r20*x1114))+(((-2.5)*pz))+((r21*x1113))))+IKsqr(((-1.0)+(((-2.5)*px))+((r01*x1113))+((r00*x1114))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+((r20*x1114))+(((-2.5)*pz))+((r21*x1113))), ((-1.0)+(((-2.5)*px))+((r01*x1113))+((r00*x1114))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1115=IKsin(j4);
IkReal x1116=IKcos(j4);
IkReal x1117=(r21*sj7);
IkReal x1118=((1.0)*sj6);
IkReal x1119=(r20*sj7);
IkReal x1120=(cj5*cj6);
IkReal x1121=(cj7*r20);
IkReal x1122=(cj7*r01);
IkReal x1123=((1.0)*cj6);
IkReal x1124=(r00*sj7);
IkReal x1125=(r01*sj7);
IkReal x1126=(cj7*r21);
IkReal x1127=(cj7*r00);
IkReal x1128=((1.0)*x1116);
evalcond[0]=((0.1425)+(((-0.4)*x1115))+(((-1.0)*pz))+(((0.1363)*x1119))+(((0.1363)*x1126)));
evalcond[1]=((-0.4)+(((-0.4)*x1116))+(((-1.0)*px))+(((0.1363)*x1124))+(((0.1363)*x1122)));
evalcond[2]=((((-1.0)*x1115))+(((-1.0)*r22*x1123))+((sj6*x1121))+(((-1.0)*x1117*x1118)));
evalcond[3]=((((-1.0)*x1128))+(((-1.0)*r02*x1123))+(((-1.0)*x1118*x1125))+((sj6*x1127)));
evalcond[4]=(x1115+(((-1.0)*cj5*r02*x1118))+((x1120*x1125))+((sj5*x1122))+((sj5*x1124))+(((-1.0)*x1120*x1127)));
evalcond[5]=((((-1.0)*cj5*r22*x1118))+((sj5*x1126))+(((-1.0)*x1128))+((x1117*x1120))+(((-1.0)*x1120*x1121))+((sj5*x1119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1129=((0.34075)*sj7);
IkReal x1130=((0.34075)*cj7);
if( IKabs((((r10*x1129))+(((-2.5)*py))+((r11*x1130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r00*x1129))+((r01*x1130))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1129))+(((-2.5)*py))+((r11*x1130))))+IKsqr(((-1.0)+((r00*x1129))+((r01*x1130))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x1129))+(((-2.5)*py))+((r11*x1130))), ((-1.0)+((r00*x1129))+((r01*x1130))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1131=IKsin(j4);
IkReal x1132=IKcos(j4);
IkReal x1133=(cj5*cj6);
IkReal x1134=((1.0)*cj7);
IkReal x1135=(r11*sj7);
IkReal x1136=(cj7*sj5);
IkReal x1137=((1.0)*r12);
IkReal x1138=((0.1363)*cj7);
IkReal x1139=(cj5*sj6);
IkReal x1140=((1.0)*r02);
IkReal x1141=(sj5*sj7);
IkReal x1142=((1.0)*sj6);
IkReal x1143=((0.1363)*sj7);
IkReal x1144=(r01*sj7);
IkReal x1145=(cj7*sj6);
IkReal x1146=((1.0)*x1132);
evalcond[0]=((((-0.4)*x1131))+(((-1.0)*py))+((r10*x1143))+((r11*x1138)));
evalcond[1]=((-0.4)+((r01*x1138))+(((-0.4)*x1132))+(((-1.0)*px))+((r00*x1143)));
evalcond[2]=((((-1.0)*x1135*x1142))+(((-1.0)*cj6*x1137))+(((-1.0)*x1131))+((r10*x1145)));
evalcond[3]=((((-1.0)*x1146))+(((-1.0)*cj6*x1140))+((r00*x1145))+(((-1.0)*x1142*x1144)));
evalcond[4]=(x1131+((r01*x1136))+(((-1.0)*r00*x1133*x1134))+((x1133*x1144))+(((-1.0)*x1139*x1140))+((r00*x1141)));
evalcond[5]=((((-1.0)*x1146))+(((-1.0)*x1137*x1139))+(((-1.0)*r10*x1133*x1134))+((x1133*x1135))+((r10*x1141))+((r11*x1136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1147=((0.34075)*cj7);
IkReal x1148=((0.34075)*sj7);
if( IKabs(((((-1.0)*r10*x1148))+(((-1.0)*r11*x1147))+(((2.5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*px))+((r01*x1147))+((r00*x1148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1148))+(((-1.0)*r11*x1147))+(((2.5)*py))))+IKsqr(((-1.0)+(((-2.5)*px))+((r01*x1147))+((r00*x1148))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*x1148))+(((-1.0)*r11*x1147))+(((2.5)*py))), ((-1.0)+(((-2.5)*px))+((r01*x1147))+((r00*x1148))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1149=IKsin(j4);
IkReal x1150=IKcos(j4);
IkReal x1151=((1.0)*cj6);
IkReal x1152=(cj5*cj7);
IkReal x1153=(cj7*sj5);
IkReal x1154=(r11*sj7);
IkReal x1155=(cj5*cj6);
IkReal x1156=(sj5*sj7);
IkReal x1157=((0.1363)*sj7);
IkReal x1158=((0.1363)*cj7);
IkReal x1159=((1.0)*sj6);
IkReal x1160=(r01*sj7);
IkReal x1161=(cj7*sj6);
IkReal x1162=(cj5*x1159);
evalcond[0]=((((-1.0)*x1154*x1159))+x1149+((r10*x1161))+(((-1.0)*r12*x1151)));
evalcond[1]=(((r11*x1158))+(((-1.0)*py))+(((0.4)*x1149))+((r10*x1157)));
evalcond[2]=((-0.4)+((r00*x1157))+(((-1.0)*px))+(((-0.4)*x1150))+((r01*x1158)));
evalcond[3]=((((-1.0)*x1159*x1160))+((r00*x1161))+(((-1.0)*r02*x1151))+(((-1.0)*x1150)));
evalcond[4]=(x1150+((r11*x1153))+(((-1.0)*r10*x1151*x1152))+(((-1.0)*r12*x1162))+((x1154*x1155))+((r10*x1156)));
evalcond[5]=(((r00*x1156))+x1149+(((-1.0)*r02*x1162))+((x1155*x1160))+(((-1.0)*r00*x1151*x1152))+((r01*x1153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(cj3,-1);
if(!x1163.valid){
continue;
}
if( IKabs(((x1163.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1163.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7))))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1163.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7))))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1164=IKcos(j4);
IkReal x1165=IKsin(j4);
IkReal x1166=(r21*sj7);
IkReal x1167=((1.0)*sj6);
IkReal x1168=(r20*sj7);
IkReal x1169=(cj5*cj6);
IkReal x1170=((1.0)*cj3);
IkReal x1171=(cj7*r01);
IkReal x1172=((1.0)*cj6);
IkReal x1173=(sj5*sj7);
IkReal x1174=((0.1363)*cj7);
IkReal x1175=(r11*sj7);
IkReal x1176=((0.1363)*sj7);
IkReal x1177=(r01*sj7);
IkReal x1178=(cj7*sj5);
IkReal x1179=(cj7*sj6);
IkReal x1180=((0.4)*x1165);
IkReal x1181=((1.0)*cj7*x1169);
evalcond[0]=((-0.4)+(((-0.4)*x1164))+((r00*x1176))+(((-1.0)*px))+(((0.1363)*x1171)));
evalcond[1]=((((-1.0)*x1166*x1167))+((r20*x1179))+(((-1.0)*r22*x1172))+((sj3*x1165)));
evalcond[2]=((((-1.0)*r02*x1172))+((r00*x1179))+(((-1.0)*x1167*x1177))+(((-1.0)*x1164)));
evalcond[3]=((((-1.0)*x1165*x1170))+((r10*x1179))+(((-1.0)*r12*x1172))+(((-1.0)*x1167*x1175)));
evalcond[4]=((((-0.1685)*sj3))+((r10*x1176))+(((-1.0)*cj3*x1180))+(((-1.0)*py))+((r11*x1174)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((r21*x1174))+(((-1.0)*pz))+((sj3*x1180))+(((0.1363)*x1168)));
evalcond[6]=(x1165+((r00*x1173))+(((-1.0)*cj5*r02*x1167))+((sj5*x1171))+(((-1.0)*r00*x1181))+((x1169*x1177)));
evalcond[7]=(((r21*x1178))+((x1166*x1169))+(((-1.0)*cj5*r22*x1167))+(((-1.0)*r20*x1181))+((sj5*x1168))+((sj3*x1164)));
evalcond[8]=(((r10*x1173))+(((-1.0)*r10*x1181))+((r11*x1178))+(((-1.0)*x1164*x1170))+(((-1.0)*cj5*r12*x1167))+((x1169*x1175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1182=IKPowWithIntegerCheck(sj3,-1);
if(!x1182.valid){
continue;
}
if( IKabs(((x1182.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1182.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1182.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1183=IKcos(j4);
IkReal x1184=IKsin(j4);
IkReal x1185=(r21*sj7);
IkReal x1186=((1.0)*sj6);
IkReal x1187=(r20*sj7);
IkReal x1188=(cj5*cj6);
IkReal x1189=((1.0)*cj3);
IkReal x1190=(cj7*r01);
IkReal x1191=((1.0)*cj6);
IkReal x1192=(sj5*sj7);
IkReal x1193=((0.1363)*cj7);
IkReal x1194=(r11*sj7);
IkReal x1195=((0.1363)*sj7);
IkReal x1196=(r01*sj7);
IkReal x1197=(cj7*sj5);
IkReal x1198=(cj7*sj6);
IkReal x1199=((0.4)*x1184);
IkReal x1200=((1.0)*cj7*x1188);
evalcond[0]=((-0.4)+(((-0.4)*x1183))+((r00*x1195))+(((-1.0)*px))+(((0.1363)*x1190)));
evalcond[1]=((((-1.0)*r22*x1191))+((sj3*x1184))+(((-1.0)*x1185*x1186))+((r20*x1198)));
evalcond[2]=(((r00*x1198))+(((-1.0)*x1186*x1196))+(((-1.0)*x1183))+(((-1.0)*r02*x1191)));
evalcond[3]=(((r10*x1198))+(((-1.0)*x1186*x1194))+(((-1.0)*x1184*x1189))+(((-1.0)*r12*x1191)));
evalcond[4]=((((-0.1685)*sj3))+((r10*x1195))+(((-1.0)*py))+(((-1.0)*cj3*x1199))+((r11*x1193)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((-1.0)*pz))+((r21*x1193))+(((0.1363)*x1187))+((sj3*x1199)));
evalcond[6]=(x1184+((r00*x1192))+((x1188*x1196))+(((-1.0)*cj5*r02*x1186))+(((-1.0)*r00*x1200))+((sj5*x1190)));
evalcond[7]=((((-1.0)*cj5*r22*x1186))+((x1185*x1188))+((sj3*x1183))+((r21*x1197))+((sj5*x1187))+(((-1.0)*r20*x1200)));
evalcond[8]=((((-1.0)*r10*x1200))+((r10*x1192))+((x1188*x1194))+(((-1.0)*x1183*x1189))+((r11*x1197))+(((-1.0)*cj5*r12*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1201=(sj6*sj7);
IkReal x1202=((1.0)*cj7*sj6);
if( IKabs((((r21*x1201))+((cj6*r22))+(((-1.0)*r20*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1202))+((r11*x1201))+((cj6*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x1201))+((cj6*r22))+(((-1.0)*r20*x1202))))+IKsqr(((((-1.0)*r10*x1202))+((r11*x1201))+((cj6*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*x1201))+((cj6*r22))+(((-1.0)*r20*x1202))), ((((-1.0)*r10*x1202))+((r11*x1201))+((cj6*r12))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1203=IKsin(j4);
IkReal x1204=IKcos(j4);
IkReal x1205=(r21*sj7);
IkReal x1206=((1.0)*sj6);
IkReal x1207=(r20*sj7);
IkReal x1208=(cj5*cj6);
IkReal x1209=(cj7*r11);
IkReal x1210=((1.0)*cj6);
IkReal x1211=(r11*sj7);
IkReal x1212=(r10*sj7);
IkReal x1213=(cj7*sj6);
IkReal x1214=(cj7*r21);
IkReal x1215=((1.0)*cj7*x1208);
evalcond[0]=(x1203+(((-1.0)*r22*x1210))+(((-1.0)*x1205*x1206))+((r20*x1213)));
evalcond[1]=(x1204+(((-1.0)*x1206*x1211))+((r10*x1213))+(((-1.0)*r12*x1210)));
evalcond[2]=((0.1425)+(((0.1363)*x1214))+(((0.4)*x1203))+(((-1.0)*pz))+(((0.1363)*x1207)));
evalcond[3]=((0.4)+(((0.1363)*x1212))+(((0.4)*x1204))+(((-1.0)*py))+(((0.1363)*x1209)));
evalcond[4]=(x1204+(((-1.0)*cj5*r22*x1206))+((sj5*x1214))+((x1205*x1208))+(((-1.0)*r20*x1215))+((sj5*x1207)));
evalcond[5]=((((-1.0)*cj5*r12*x1206))+((sj5*x1212))+(((-1.0)*x1203))+(((-1.0)*r10*x1215))+((sj5*x1209))+((x1208*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1216=IKcos(j4);
IkReal x1217=IKsin(j4);
IkReal x1218=(r21*sj7);
IkReal x1219=((1.0)*sj6);
IkReal x1220=(r20*sj7);
IkReal x1221=(cj5*cj6);
IkReal x1222=(cj7*r11);
IkReal x1223=((1.0)*cj6);
IkReal x1224=(r11*sj7);
IkReal x1225=(r10*sj7);
IkReal x1226=(cj7*r21);
IkReal x1227=(cj7*sj6);
IkReal x1228=((1.0)*x1217);
IkReal x1229=((1.0)*cj7*x1221);
evalcond[0]=(x1216+(((-1.0)*r12*x1223))+((r10*x1227))+(((-1.0)*x1219*x1224)));
evalcond[1]=((0.1425)+(((0.1363)*x1226))+(((0.1363)*x1220))+(((-0.4)*x1217))+(((-1.0)*pz)));
evalcond[2]=((0.4)+(((0.1363)*x1222))+(((0.1363)*x1225))+(((-1.0)*py))+(((0.4)*x1216)));
evalcond[3]=(((r20*x1227))+(((-1.0)*x1228))+(((-1.0)*x1218*x1219))+(((-1.0)*r22*x1223)));
evalcond[4]=(((sj5*x1220))+((sj5*x1226))+(((-1.0)*r20*x1229))+((x1218*x1221))+(((-1.0)*cj5*r22*x1219))+(((-1.0)*x1216)));
evalcond[5]=((((-1.0)*x1228))+((sj5*x1225))+((sj5*x1222))+((x1221*x1224))+(((-1.0)*r10*x1229))+(((-1.0)*cj5*r12*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1230=IKcos(j4);
IkReal x1231=IKsin(j4);
IkReal x1232=((1.0)*cj6);
IkReal x1233=(cj5*cj7);
IkReal x1234=(cj7*sj5);
IkReal x1235=(r11*sj7);
IkReal x1236=(cj5*cj6);
IkReal x1237=(sj5*sj7);
IkReal x1238=((1.0)*sj6);
IkReal x1239=((0.1363)*cj7);
IkReal x1240=((0.1363)*sj7);
IkReal x1241=(r01*sj7);
IkReal x1242=(cj7*sj6);
IkReal x1243=((1.0)*x1231);
IkReal x1244=(cj5*x1238);
evalcond[0]=(x1230+(((-1.0)*r12*x1232))+(((-1.0)*x1235*x1238))+((r10*x1242)));
evalcond[1]=(((r01*x1239))+((r00*x1240))+(((-1.0)*px))+(((-0.4)*x1231)));
evalcond[2]=((0.4)+(((-1.0)*py))+(((0.4)*x1230))+((r11*x1239))+((r10*x1240)));
evalcond[3]=(((r00*x1242))+(((-1.0)*x1243))+(((-1.0)*x1238*x1241))+(((-1.0)*r02*x1232)));
evalcond[4]=(((x1235*x1236))+(((-1.0)*x1243))+((r10*x1237))+(((-1.0)*r12*x1244))+((r11*x1234))+(((-1.0)*r10*x1232*x1233)));
evalcond[5]=((((-1.0)*r02*x1244))+(((-1.0)*x1230))+((x1236*x1241))+((r00*x1237))+((r01*x1234))+(((-1.0)*r00*x1232*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1245=IKsin(j4);
IkReal x1246=IKcos(j4);
IkReal x1247=((1.0)*cj6);
IkReal x1248=(cj5*cj7);
IkReal x1249=(cj7*sj5);
IkReal x1250=(r11*sj7);
IkReal x1251=(cj5*cj6);
IkReal x1252=(sj5*sj7);
IkReal x1253=((1.0)*sj6);
IkReal x1254=((0.1363)*cj7);
IkReal x1255=((0.1363)*sj7);
IkReal x1256=(r01*sj7);
IkReal x1257=(cj7*sj6);
IkReal x1258=(cj5*x1253);
evalcond[0]=(x1246+((r10*x1257))+(((-1.0)*r12*x1247))+(((-1.0)*x1250*x1253)));
evalcond[1]=((((-1.0)*r02*x1247))+x1245+(((-1.0)*x1253*x1256))+((r00*x1257)));
evalcond[2]=((((0.4)*x1245))+(((-1.0)*px))+((r00*x1255))+((r01*x1254)));
evalcond[3]=((0.4)+((r11*x1254))+((r10*x1255))+(((0.4)*x1246))+(((-1.0)*py)));
evalcond[4]=(x1246+((r01*x1249))+(((-1.0)*r00*x1247*x1248))+(((-1.0)*r02*x1258))+((x1251*x1256))+((r00*x1252)));
evalcond[5]=((((-1.0)*r12*x1258))+(((-1.0)*r10*x1247*x1248))+((r10*x1252))+(((-1.0)*x1245))+((x1250*x1251))+((r11*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1259=(sj6*sj7);
IkReal x1260=(cj7*sj6);
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(cj3,-1);
if(!x1261.valid){
continue;
}
if( IKabs(((x1261.value)*(((((-1.0)*r01*x1259))+(((-1.0)*cj6*r02))+((r00*x1260)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1259))+(((-1.0)*r10*x1260))+((cj6*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1261.value)*(((((-1.0)*r01*x1259))+(((-1.0)*cj6*r02))+((r00*x1260))))))+IKsqr((((r11*x1259))+(((-1.0)*r10*x1260))+((cj6*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1261.value)*(((((-1.0)*r01*x1259))+(((-1.0)*cj6*r02))+((r00*x1260))))), (((r11*x1259))+(((-1.0)*r10*x1260))+((cj6*r12))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1262=IKcos(j4);
IkReal x1263=IKsin(j4);
IkReal x1264=(r21*sj7);
IkReal x1265=((1.0)*sj6);
IkReal x1266=(r20*sj7);
IkReal x1267=(cj5*cj6);
IkReal x1268=((1.0)*cj3);
IkReal x1269=(cj7*r01);
IkReal x1270=(sj5*sj7);
IkReal x1271=((1.0)*cj6);
IkReal x1272=(r11*sj7);
IkReal x1273=((0.1363)*cj7);
IkReal x1274=((0.1363)*sj7);
IkReal x1275=(r01*sj7);
IkReal x1276=(cj7*sj5);
IkReal x1277=(cj7*sj6);
IkReal x1278=((0.4)*x1263);
IkReal x1279=((1.0)*cj7*x1267);
evalcond[0]=(x1262+((r10*x1277))+(((-1.0)*r12*x1271))+(((-1.0)*x1265*x1272)));
evalcond[1]=((0.4)+((r10*x1274))+((r11*x1273))+(((-1.0)*py))+(((0.4)*x1262)));
evalcond[2]=((((-1.0)*x1264*x1265))+(((-1.0)*r22*x1271))+((sj3*x1263))+((r20*x1277)));
evalcond[3]=((((-1.0)*x1263*x1268))+(((-1.0)*r02*x1271))+((r00*x1277))+(((-1.0)*x1265*x1275)));
evalcond[4]=((((-0.1685)*sj3))+(((-1.0)*cj3*x1278))+(((-1.0)*px))+(((0.1363)*x1269))+((r00*x1274)));
evalcond[5]=((0.1425)+((sj3*x1278))+(((-0.1685)*cj3))+((r21*x1273))+(((-1.0)*pz))+(((0.1363)*x1266)));
evalcond[6]=(((sj5*x1266))+((r21*x1276))+((x1264*x1267))+(((-1.0)*cj5*r22*x1265))+(((-1.0)*r20*x1279))+((sj3*x1262)));
evalcond[7]=(((r10*x1270))+(((-1.0)*cj5*r12*x1265))+((r11*x1276))+((x1267*x1272))+(((-1.0)*x1263))+(((-1.0)*r10*x1279)));
evalcond[8]=((((-1.0)*cj5*r02*x1265))+((sj5*x1269))+(((-1.0)*r00*x1279))+(((-1.0)*x1262*x1268))+((x1267*x1275))+((r00*x1270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1280=(sj6*sj7);
IkReal x1281=((1.0)*cj7*sj6);
CheckValue<IkReal> x1282=IKPowWithIntegerCheck(sj3,-1);
if(!x1282.valid){
continue;
}
if( IKabs(((x1282.value)*((((cj6*r22))+((r21*x1280))+(((-1.0)*r20*x1281)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1280))+(((-1.0)*r10*x1281))+((cj6*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1282.value)*((((cj6*r22))+((r21*x1280))+(((-1.0)*r20*x1281))))))+IKsqr((((r11*x1280))+(((-1.0)*r10*x1281))+((cj6*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1282.value)*((((cj6*r22))+((r21*x1280))+(((-1.0)*r20*x1281))))), (((r11*x1280))+(((-1.0)*r10*x1281))+((cj6*r12))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1283=IKcos(j4);
IkReal x1284=IKsin(j4);
IkReal x1285=(r21*sj7);
IkReal x1286=((1.0)*sj6);
IkReal x1287=(r20*sj7);
IkReal x1288=(cj5*cj6);
IkReal x1289=((1.0)*cj3);
IkReal x1290=(cj7*r01);
IkReal x1291=(sj5*sj7);
IkReal x1292=((1.0)*cj6);
IkReal x1293=(r11*sj7);
IkReal x1294=((0.1363)*cj7);
IkReal x1295=((0.1363)*sj7);
IkReal x1296=(r01*sj7);
IkReal x1297=(cj7*sj5);
IkReal x1298=(cj7*sj6);
IkReal x1299=((0.4)*x1284);
IkReal x1300=((1.0)*cj7*x1288);
evalcond[0]=(x1283+(((-1.0)*x1286*x1293))+(((-1.0)*r12*x1292))+((r10*x1298)));
evalcond[1]=((0.4)+(((-1.0)*py))+((r11*x1294))+(((0.4)*x1283))+((r10*x1295)));
evalcond[2]=(((r20*x1298))+(((-1.0)*x1285*x1286))+((sj3*x1284))+(((-1.0)*r22*x1292)));
evalcond[3]=((((-1.0)*x1286*x1296))+(((-1.0)*x1284*x1289))+(((-1.0)*r02*x1292))+((r00*x1298)));
evalcond[4]=((((-0.1685)*sj3))+(((-1.0)*px))+(((0.1363)*x1290))+(((-1.0)*cj3*x1299))+((r00*x1295)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((0.1363)*x1287))+((r21*x1294))+((sj3*x1299))+(((-1.0)*pz)));
evalcond[6]=(((x1285*x1288))+((r21*x1297))+((sj5*x1287))+(((-1.0)*r20*x1300))+((sj3*x1283))+(((-1.0)*cj5*r22*x1286)));
evalcond[7]=((((-1.0)*x1284))+(((-1.0)*r10*x1300))+((x1288*x1293))+(((-1.0)*cj5*r12*x1286))+((r11*x1297))+((r10*x1291)));
evalcond[8]=(((sj5*x1290))+(((-1.0)*cj5*r02*x1286))+(((-1.0)*r00*x1300))+((x1288*x1296))+(((-1.0)*x1283*x1289))+((r00*x1291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1301=IKsin(j4);
IkReal x1302=IKcos(j4);
IkReal x1303=(r21*sj7);
IkReal x1304=((1.0)*sj6);
IkReal x1305=(r20*sj7);
IkReal x1306=(cj5*cj6);
IkReal x1307=(cj7*r11);
IkReal x1308=((1.0)*cj6);
IkReal x1309=(r11*sj7);
IkReal x1310=(r10*sj7);
IkReal x1311=(cj7*sj6);
IkReal x1312=(cj7*r21);
IkReal x1313=((1.0)*cj7*x1306);
evalcond[0]=(x1301+(((-1.0)*r22*x1308))+(((-1.0)*x1303*x1304))+((r20*x1311)));
evalcond[1]=((0.1425)+(((0.1363)*x1305))+(((0.4)*x1301))+(((-1.0)*pz))+(((0.1363)*x1312)));
evalcond[2]=((-0.4)+(((0.1363)*x1307))+(((-1.0)*py))+(((-0.4)*x1302))+(((0.1363)*x1310)));
evalcond[3]=((((-1.0)*x1302))+((r10*x1311))+(((-1.0)*r12*x1308))+(((-1.0)*x1304*x1309)));
evalcond[4]=(x1302+((sj5*x1305))+((sj5*x1312))+((x1303*x1306))+(((-1.0)*r20*x1313))+(((-1.0)*cj5*r22*x1304)));
evalcond[5]=(x1301+((sj5*x1307))+((x1306*x1309))+(((-1.0)*cj5*r12*x1304))+((sj5*x1310))+(((-1.0)*r10*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1314=((0.34075)*cj7);
IkReal x1315=((0.34075)*sj7);
if( IKabs(((0.35625)+(((-2.5)*pz))+((r21*x1314))+((r20*x1315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*py))+((r11*x1314))+((r10*x1315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((-2.5)*pz))+((r21*x1314))+((r20*x1315))))+IKsqr(((-1.0)+(((-2.5)*py))+((r11*x1314))+((r10*x1315))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((-2.5)*pz))+((r21*x1314))+((r20*x1315))), ((-1.0)+(((-2.5)*py))+((r11*x1314))+((r10*x1315))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1316=IKsin(j4);
IkReal x1317=IKcos(j4);
IkReal x1318=(r21*sj7);
IkReal x1319=((1.0)*sj6);
IkReal x1320=(r20*sj7);
IkReal x1321=(cj5*cj6);
IkReal x1322=(cj7*r11);
IkReal x1323=((1.0)*cj6);
IkReal x1324=(r11*sj7);
IkReal x1325=(r10*sj7);
IkReal x1326=(cj7*r21);
IkReal x1327=(cj7*sj6);
IkReal x1328=((1.0)*x1317);
IkReal x1329=((1.0)*cj7*x1321);
evalcond[0]=((0.1425)+(((-0.4)*x1316))+(((-1.0)*pz))+(((0.1363)*x1326))+(((0.1363)*x1320)));
evalcond[1]=((-0.4)+(((-0.4)*x1317))+(((-1.0)*py))+(((0.1363)*x1322))+(((0.1363)*x1325)));
evalcond[2]=((((-1.0)*x1318*x1319))+(((-1.0)*r22*x1323))+(((-1.0)*x1316))+((r20*x1327)));
evalcond[3]=((((-1.0)*x1319*x1324))+(((-1.0)*x1328))+((r10*x1327))+(((-1.0)*r12*x1323)));
evalcond[4]=(x1316+(((-1.0)*cj5*r12*x1319))+((sj5*x1322))+((sj5*x1325))+(((-1.0)*r10*x1329))+((x1321*x1324)));
evalcond[5]=(((sj5*x1320))+((sj5*x1326))+(((-1.0)*x1328))+(((-1.0)*cj5*r22*x1319))+(((-1.0)*r20*x1329))+((x1318*x1321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1330=((0.34075)*sj7);
IkReal x1331=((0.34075)*cj7);
if( IKabs(((((-1.0)*r00*x1330))+(((-1.0)*r01*x1331))+(((2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r11*x1331))+(((-2.5)*py))+((r10*x1330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1330))+(((-1.0)*r01*x1331))+(((2.5)*px))))+IKsqr(((-1.0)+((r11*x1331))+(((-2.5)*py))+((r10*x1330))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x1330))+(((-1.0)*r01*x1331))+(((2.5)*px))), ((-1.0)+((r11*x1331))+(((-2.5)*py))+((r10*x1330))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1332=IKsin(j4);
IkReal x1333=IKcos(j4);
IkReal x1334=((1.0)*cj6);
IkReal x1335=(cj5*cj7);
IkReal x1336=(cj7*sj5);
IkReal x1337=(r11*sj7);
IkReal x1338=(cj5*cj6);
IkReal x1339=(sj5*sj7);
IkReal x1340=((1.0)*sj6);
IkReal x1341=((0.1363)*cj7);
IkReal x1342=((0.1363)*sj7);
IkReal x1343=(r01*sj7);
IkReal x1344=(cj7*sj6);
IkReal x1345=(cj5*x1340);
evalcond[0]=(x1332+(((-1.0)*x1340*x1343))+((r00*x1344))+(((-1.0)*r02*x1334)));
evalcond[1]=((((-1.0)*px))+((r00*x1342))+((r01*x1341))+(((0.4)*x1332)));
evalcond[2]=((-0.4)+(((-0.4)*x1333))+(((-1.0)*py))+((r11*x1341))+((r10*x1342)));
evalcond[3]=((((-1.0)*x1333))+(((-1.0)*r12*x1334))+(((-1.0)*x1337*x1340))+((r10*x1344)));
evalcond[4]=(x1332+((x1337*x1338))+((r11*x1336))+(((-1.0)*r12*x1345))+(((-1.0)*r10*x1334*x1335))+((r10*x1339)));
evalcond[5]=(x1333+(((-1.0)*r02*x1345))+((r00*x1339))+((r01*x1336))+(((-1.0)*r00*x1334*x1335))+((x1338*x1343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1346=((0.34075)*sj7);
IkReal x1347=((0.34075)*cj7);
if( IKabs(((((-2.5)*px))+((r00*x1346))+((r01*x1347)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*py))+((r11*x1347))+((r10*x1346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.5)*px))+((r00*x1346))+((r01*x1347))))+IKsqr(((-1.0)+(((-2.5)*py))+((r11*x1347))+((r10*x1346))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.5)*px))+((r00*x1346))+((r01*x1347))), ((-1.0)+(((-2.5)*py))+((r11*x1347))+((r10*x1346))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1348=IKcos(j4);
IkReal x1349=IKsin(j4);
IkReal x1350=((1.0)*cj6);
IkReal x1351=(cj5*cj7);
IkReal x1352=(cj7*sj5);
IkReal x1353=(sj5*sj7);
IkReal x1354=(r11*sj7);
IkReal x1355=(cj5*cj6);
IkReal x1356=((0.1363)*cj7);
IkReal x1357=((1.0)*sj6);
IkReal x1358=((0.1363)*sj7);
IkReal x1359=(r01*sj7);
IkReal x1360=(cj7*sj6);
IkReal x1361=((1.0)*x1348);
IkReal x1362=(cj5*x1357);
evalcond[0]=((((-1.0)*px))+(((-0.4)*x1349))+((r00*x1358))+((r01*x1356)));
evalcond[1]=((-0.4)+((r10*x1358))+(((-1.0)*py))+((r11*x1356))+(((-0.4)*x1348)));
evalcond[2]=((((-1.0)*r12*x1350))+((r10*x1360))+(((-1.0)*x1354*x1357))+(((-1.0)*x1361)));
evalcond[3]=((((-1.0)*r02*x1350))+((r00*x1360))+(((-1.0)*x1357*x1359))+(((-1.0)*x1349)));
evalcond[4]=(x1349+((r10*x1353))+(((-1.0)*r12*x1362))+((x1354*x1355))+((r11*x1352))+(((-1.0)*r10*x1350*x1351)));
evalcond[5]=(((x1355*x1359))+(((-1.0)*r02*x1362))+(((-1.0)*r00*x1350*x1351))+((r00*x1353))+((r01*x1352))+(((-1.0)*x1361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1363=IKPowWithIntegerCheck(cj3,-1);
if(!x1363.valid){
continue;
}
if( IKabs(((x1363.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1363.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1363.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1364=IKcos(j4);
IkReal x1365=IKsin(j4);
IkReal x1366=(r21*sj7);
IkReal x1367=((1.0)*sj6);
IkReal x1368=(r20*sj7);
IkReal x1369=(cj5*cj6);
IkReal x1370=(cj7*sj5);
IkReal x1371=(sj5*sj7);
IkReal x1372=((1.0)*cj6);
IkReal x1373=(r11*sj7);
IkReal x1374=((0.1363)*cj7);
IkReal x1375=((0.1363)*sj7);
IkReal x1376=(r01*sj7);
IkReal x1377=(cj7*sj6);
IkReal x1378=((0.4)*x1365);
IkReal x1379=((1.0)*cj7*x1369);
evalcond[0]=((-0.4)+((r10*x1375))+((r11*x1374))+(((-1.0)*py))+(((-0.4)*x1364)));
evalcond[1]=((((-1.0)*x1366*x1367))+(((-1.0)*r22*x1372))+((sj3*x1365))+((r20*x1377)));
evalcond[2]=((((-1.0)*x1364))+((r10*x1377))+(((-1.0)*r12*x1372))+(((-1.0)*x1367*x1373)));
evalcond[3]=((((-1.0)*r02*x1372))+(((-1.0)*x1367*x1376))+((cj3*x1365))+((r00*x1377)));
evalcond[4]=((((0.1685)*sj3))+(((-1.0)*px))+((cj3*x1378))+((r00*x1375))+((r01*x1374)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((0.1363)*x1368))+((sj3*x1378))+(((-1.0)*pz))+((r21*x1374)));
evalcond[6]=(x1365+((r10*x1371))+(((-1.0)*cj5*r12*x1367))+((r11*x1370))+(((-1.0)*r10*x1379))+((x1369*x1373)));
evalcond[7]=(((x1366*x1369))+(((-1.0)*cj5*r22*x1367))+(((-1.0)*r20*x1379))+((r21*x1370))+((sj3*x1364))+((sj5*x1368)));
evalcond[8]=((((-1.0)*r00*x1379))+(((-1.0)*cj5*r02*x1367))+((x1369*x1376))+((cj3*x1364))+((r00*x1371))+((r01*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(sj3,-1);
if(!x1380.valid){
continue;
}
if( IKabs(((x1380.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1380.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1380.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1381=IKcos(j4);
IkReal x1382=IKsin(j4);
IkReal x1383=(r21*sj7);
IkReal x1384=((1.0)*sj6);
IkReal x1385=(r20*sj7);
IkReal x1386=(cj5*cj6);
IkReal x1387=(cj7*sj5);
IkReal x1388=(sj5*sj7);
IkReal x1389=((1.0)*cj6);
IkReal x1390=(r11*sj7);
IkReal x1391=((0.1363)*cj7);
IkReal x1392=((0.1363)*sj7);
IkReal x1393=(r01*sj7);
IkReal x1394=(cj7*sj6);
IkReal x1395=((0.4)*x1382);
IkReal x1396=((1.0)*cj7*x1386);
evalcond[0]=((-0.4)+((r10*x1392))+(((-1.0)*py))+((r11*x1391))+(((-0.4)*x1381)));
evalcond[1]=((((-1.0)*x1383*x1384))+((r20*x1394))+((sj3*x1382))+(((-1.0)*r22*x1389)));
evalcond[2]=((((-1.0)*r12*x1389))+(((-1.0)*x1384*x1390))+((r10*x1394))+(((-1.0)*x1381)));
evalcond[3]=((((-1.0)*x1384*x1393))+((cj3*x1382))+(((-1.0)*r02*x1389))+((r00*x1394)));
evalcond[4]=((((0.1685)*sj3))+((cj3*x1395))+(((-1.0)*px))+((r01*x1391))+((r00*x1392)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((0.1363)*x1385))+((r21*x1391))+(((-1.0)*pz))+((sj3*x1395)));
evalcond[6]=(x1382+((r10*x1388))+(((-1.0)*r10*x1396))+(((-1.0)*cj5*r12*x1384))+((x1386*x1390))+((r11*x1387)));
evalcond[7]=((((-1.0)*r20*x1396))+((r21*x1387))+((sj3*x1381))+(((-1.0)*cj5*r22*x1384))+((sj5*x1385))+((x1383*x1386)));
evalcond[8]=(((cj3*x1381))+(((-1.0)*r00*x1396))+((x1386*x1393))+((r00*x1388))+((r01*x1387))+(((-1.0)*cj5*r02*x1384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1403=IKPowWithIntegerCheck(sj3,-1);
if(!x1403.valid){
continue;
}
IkReal x1397=x1403.value;
IkReal x1398=((1.0)*sj6);
IkReal x1399=(r21*sj7);
IkReal x1400=(cj2*cj3);
IkReal x1401=(cj6*r22);
IkReal x1402=(cj7*r20);
CheckValue<IkReal> x1404=IKPowWithIntegerCheck(sj2,-1);
if(!x1404.valid){
continue;
}
if( IKabs((x1397*((((sj6*x1399))+(((-1.0)*x1398*x1402))+x1401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1397*(x1404.value)*((((r11*sj3*sj6*sj7))+(((-1.0)*x1400*x1401))+(((-1.0)*cj7*r10*sj3*x1398))+((cj6*r12*sj3))+(((-1.0)*x1398*x1399*x1400))+((sj6*x1400*x1402)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1397*((((sj6*x1399))+(((-1.0)*x1398*x1402))+x1401))))+IKsqr((x1397*(x1404.value)*((((r11*sj3*sj6*sj7))+(((-1.0)*x1400*x1401))+(((-1.0)*cj7*r10*sj3*x1398))+((cj6*r12*sj3))+(((-1.0)*x1398*x1399*x1400))+((sj6*x1400*x1402))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1397*((((sj6*x1399))+(((-1.0)*x1398*x1402))+x1401))), (x1397*(x1404.value)*((((r11*sj3*sj6*sj7))+(((-1.0)*x1400*x1401))+(((-1.0)*cj7*r10*sj3*x1398))+((cj6*r12*sj3))+(((-1.0)*x1398*x1399*x1400))+((sj6*x1400*x1402))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1405=IKsin(j4);
IkReal x1406=IKcos(j4);
IkReal x1407=(r21*sj7);
IkReal x1408=((1.0)*sj6);
IkReal x1409=(r20*sj7);
IkReal x1410=(cj5*cj6);
IkReal x1411=(cj7*sj5);
IkReal x1412=((0.1685)*sj3);
IkReal x1413=(cj2*cj3);
IkReal x1414=(sj5*sj7);
IkReal x1415=((1.0)*cj6);
IkReal x1416=(r11*sj7);
IkReal x1417=((0.1363)*cj7);
IkReal x1418=((0.1363)*sj7);
IkReal x1419=(cj3*sj2);
IkReal x1420=(r01*sj7);
IkReal x1421=(cj7*sj6);
IkReal x1422=((0.4)*x1406);
IkReal x1423=((0.4)*x1405);
IkReal x1424=((1.0)*x1405);
IkReal x1425=((1.0)*cj7*x1410);
evalcond[0]=((((-1.0)*r22*x1415))+((sj3*x1405))+(((-1.0)*x1407*x1408))+((r20*x1421)));
evalcond[1]=((0.1425)+((r21*x1417))+(((-0.1685)*cj3))+(((-1.0)*pz))+(((0.1363)*x1409))+((sj3*x1423)));
evalcond[2]=(((sj2*x1406))+((x1405*x1413))+((r10*x1421))+(((-1.0)*x1408*x1416))+(((-1.0)*r12*x1415)));
evalcond[3]=(((r00*x1421))+(((-1.0)*r02*x1415))+(((-1.0)*x1408*x1420))+(((-1.0)*x1419*x1424))+((cj2*x1406)));
evalcond[4]=(((r21*x1411))+((x1407*x1410))+(((-1.0)*r20*x1425))+((sj5*x1409))+((sj3*x1406))+(((-1.0)*cj5*r22*x1408)));
evalcond[5]=((((0.4)*cj2))+((cj2*x1422))+((r00*x1418))+(((-1.0)*px))+((r01*x1417))+(((-1.0)*x1419*x1423))+(((-1.0)*sj2*x1412)));
evalcond[6]=(((cj2*x1412))+(((-1.0)*py))+((r11*x1417))+(((0.4)*sj2))+((sj2*x1422))+((r10*x1418))+((x1413*x1423)));
evalcond[7]=((((-1.0)*cj5*r12*x1408))+(((-1.0)*r10*x1425))+((r11*x1411))+(((-1.0)*sj2*x1424))+((x1406*x1413))+((x1410*x1416))+((r10*x1414)));
evalcond[8]=((((-1.0)*x1406*x1419))+((x1410*x1420))+(((-1.0)*cj5*r02*x1408))+((r00*x1414))+((r01*x1411))+(((-1.0)*cj2*x1424))+(((-1.0)*r00*x1425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1431=IKPowWithIntegerCheck(sj3,-1);
if(!x1431.valid){
continue;
}
IkReal x1426=x1431.value;
IkReal x1427=(cj3*sj2);
IkReal x1428=(cj6*r22);
IkReal x1429=(r21*sj6*sj7);
IkReal x1430=((1.0)*cj7*sj6);
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(cj2,-1);
if(!x1432.valid){
continue;
}
if( IKabs((x1426*((x1429+x1428+(((-1.0)*r20*x1430)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1426*(x1432.value)*(((((-1.0)*r00*sj3*x1430))+(((-1.0)*r20*x1427*x1430))+((x1427*x1428))+((x1427*x1429))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1426*((x1429+x1428+(((-1.0)*r20*x1430))))))+IKsqr((x1426*(x1432.value)*(((((-1.0)*r00*sj3*x1430))+(((-1.0)*r20*x1427*x1430))+((x1427*x1428))+((x1427*x1429))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1426*((x1429+x1428+(((-1.0)*r20*x1430))))), (x1426*(x1432.value)*(((((-1.0)*r00*sj3*x1430))+(((-1.0)*r20*x1427*x1430))+((x1427*x1428))+((x1427*x1429))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1433=IKsin(j4);
IkReal x1434=IKcos(j4);
IkReal x1435=(r21*sj7);
IkReal x1436=((1.0)*sj6);
IkReal x1437=(r20*sj7);
IkReal x1438=(cj5*cj6);
IkReal x1439=(cj7*sj5);
IkReal x1440=((0.1685)*sj3);
IkReal x1441=(cj2*cj3);
IkReal x1442=(sj5*sj7);
IkReal x1443=((1.0)*cj6);
IkReal x1444=(r11*sj7);
IkReal x1445=((0.1363)*cj7);
IkReal x1446=((0.1363)*sj7);
IkReal x1447=(cj3*sj2);
IkReal x1448=(r01*sj7);
IkReal x1449=(cj7*sj6);
IkReal x1450=((0.4)*x1434);
IkReal x1451=((0.4)*x1433);
IkReal x1452=((1.0)*x1433);
IkReal x1453=((1.0)*cj7*x1438);
evalcond[0]=((((-1.0)*r22*x1443))+(((-1.0)*x1435*x1436))+((sj3*x1433))+((r20*x1449)));
evalcond[1]=((0.1425)+(((-0.1685)*cj3))+((r21*x1445))+((sj3*x1451))+(((-1.0)*pz))+(((0.1363)*x1437)));
evalcond[2]=(((r10*x1449))+(((-1.0)*r12*x1443))+((sj2*x1434))+((x1433*x1441))+(((-1.0)*x1436*x1444)));
evalcond[3]=((((-1.0)*x1447*x1452))+((r00*x1449))+(((-1.0)*r02*x1443))+(((-1.0)*x1436*x1448))+((cj2*x1434)));
evalcond[4]=((((-1.0)*r20*x1453))+((sj5*x1437))+((x1435*x1438))+((sj3*x1434))+((r21*x1439))+(((-1.0)*cj5*r22*x1436)));
evalcond[5]=((((-1.0)*x1447*x1451))+(((-1.0)*sj2*x1440))+(((0.4)*cj2))+(((-1.0)*px))+((cj2*x1450))+((r00*x1446))+((r01*x1445)));
evalcond[6]=(((r10*x1446))+((r11*x1445))+((sj2*x1450))+(((-1.0)*py))+(((0.4)*sj2))+((cj2*x1440))+((x1441*x1451)));
evalcond[7]=(((x1438*x1444))+((x1434*x1441))+((r10*x1442))+((r11*x1439))+(((-1.0)*r10*x1453))+(((-1.0)*sj2*x1452))+(((-1.0)*cj5*r12*x1436)));
evalcond[8]=(((x1438*x1448))+(((-1.0)*x1434*x1447))+(((-1.0)*cj2*x1452))+(((-1.0)*cj5*r02*x1436))+((r01*x1439))+(((-1.0)*r00*x1453))+((r00*x1442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1454=(cj5*cj7);
IkReal x1455=(cj6*sj5);
IkReal x1456=((1.0)*sj7);
IkReal x1457=(sj5*sj6);
IkReal x1458=(cj5*sj7);
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(sj2,-1);
if(!x1459.valid){
continue;
}
if( IKabs(((x1459.value)*(((((-1.0)*r01*x1455*x1456))+((r01*x1454))+((r00*x1458))+((cj7*r00*x1455))+((r02*x1457)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj7*r20*x1455))+((r20*x1458))+((r21*x1454))+(((-1.0)*r21*x1455*x1456))+((r22*x1457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1459.value)*(((((-1.0)*r01*x1455*x1456))+((r01*x1454))+((r00*x1458))+((cj7*r00*x1455))+((r02*x1457))))))+IKsqr((((cj7*r20*x1455))+((r20*x1458))+((r21*x1454))+(((-1.0)*r21*x1455*x1456))+((r22*x1457))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1459.value)*(((((-1.0)*r01*x1455*x1456))+((r01*x1454))+((r00*x1458))+((cj7*r00*x1455))+((r02*x1457))))), (((cj7*r20*x1455))+((r20*x1458))+((r21*x1454))+(((-1.0)*r21*x1455*x1456))+((r22*x1457))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1460=IKsin(j3);
IkReal x1461=(cj6*sj5);
IkReal x1462=((1.0)*cj5);
IkReal x1463=((1.0)*cj7);
IkReal x1464=((1.0)*sj5*sj6);
evalcond[0]=((((-1.0)*r20*x1461*x1463))+(((-1.0)*r20*sj7*x1462))+(((-1.0)*r22*x1464))+((r21*sj7*x1461))+(IKcos(j3))+(((-1.0)*cj7*r21*x1462)));
evalcond[1]=(((sj2*x1460))+(((-1.0)*r02*x1464))+((r01*sj7*x1461))+(((-1.0)*r00*x1461*x1463))+(((-1.0)*cj7*r01*x1462))+(((-1.0)*r00*sj7*x1462)));
evalcond[2]=((((-1.0)*cj2*x1460))+(((-1.0)*r10*sj7*x1462))+((r11*sj7*x1461))+(((-1.0)*cj7*r11*x1462))+(((-1.0)*r10*x1461*x1463))+(((-1.0)*r12*x1464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1465=(sj2*sj6);
IkReal x1466=(cj7*r00);
IkReal x1467=(r01*sj7);
IkReal x1468=(cj2*sj6);
IkReal x1469=(r11*sj7);
IkReal x1470=(cj6*r12);
IkReal x1471=(cj6*r02);
IkReal x1472=((1.0)*cj7*r10);
if( IKabs((((x1465*x1466))+((x1468*x1469))+(((-1.0)*x1468*x1472))+((cj2*x1470))+(((-1.0)*x1465*x1467))+(((-1.0)*sj2*x1471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1465*x1469))+(((-1.0)*x1465*x1472))+((cj2*x1471))+(((-1.0)*x1466*x1468))+((sj2*x1470))+((x1467*x1468)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1465*x1466))+((x1468*x1469))+(((-1.0)*x1468*x1472))+((cj2*x1470))+(((-1.0)*x1465*x1467))+(((-1.0)*sj2*x1471))))+IKsqr((((x1465*x1469))+(((-1.0)*x1465*x1472))+((cj2*x1471))+(((-1.0)*x1466*x1468))+((sj2*x1470))+((x1467*x1468))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1465*x1466))+((x1468*x1469))+(((-1.0)*x1468*x1472))+((cj2*x1470))+(((-1.0)*x1465*x1467))+(((-1.0)*sj2*x1471))), (((x1465*x1469))+(((-1.0)*x1465*x1472))+((cj2*x1471))+(((-1.0)*x1466*x1468))+((sj2*x1470))+((x1467*x1468))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1473=IKcos(j4);
IkReal x1474=IKsin(j4);
IkReal x1475=(cj5*cj6);
IkReal x1476=(cj7*r10);
IkReal x1477=(cj7*sj5);
IkReal x1478=(r00*sj7);
IkReal x1479=(r11*sj7);
IkReal x1480=((0.1363)*cj7);
IkReal x1481=((0.4)*sj2);
IkReal x1482=(r10*sj7);
IkReal x1483=((1.0)*cj6);
IkReal x1484=((1.0)*sj6);
IkReal x1485=(r01*sj7);
IkReal x1486=((1.0)*sj2);
IkReal x1487=(cj7*r00);
IkReal x1488=(cj2*x1473);
IkReal x1489=(cj2*x1474);
IkReal x1490=((0.4)*x1473);
IkReal x1491=(cj5*x1484);
IkReal x1492=(x1474*x1486);
evalcond[0]=(((sj6*x1476))+(((-1.0)*x1479*x1484))+(((-1.0)*r12*x1483))+((sj2*x1473))+x1489);
evalcond[1]=((((-1.0)*x1492))+(((-1.0)*x1484*x1485))+(((-1.0)*r02*x1483))+((sj6*x1487))+x1488);
evalcond[2]=(((r01*x1480))+(((0.1363)*x1478))+(((0.4)*cj2))+(((-1.0)*px))+(((-1.0)*x1474*x1481))+(((0.4)*x1488)));
evalcond[3]=(((x1473*x1481))+((r11*x1480))+(((-1.0)*py))+x1481+(((0.4)*x1489))+(((0.1363)*x1482)));
evalcond[4]=((((-1.0)*r12*x1491))+((r11*x1477))+(((-1.0)*x1492))+x1488+((x1475*x1479))+((sj5*x1482))+(((-1.0)*x1475*x1476)));
evalcond[5]=((((-1.0)*x1489))+((sj5*x1478))+(((-1.0)*r02*x1491))+((r01*x1477))+(((-1.0)*x1475*x1487))+((x1475*x1485))+(((-1.0)*x1473*x1486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1493=(cj2*cj6);
IkReal x1494=((1.0)*r00);
IkReal x1495=(sj2*sj6);
IkReal x1496=(cj6*sj2);
IkReal x1497=(cj2*sj6*sj7);
IkReal x1498=(cj2*cj7*sj6);
if( IKabs(((((-1.0)*r11*x1497))+((r10*x1498))+(((-1.0)*cj7*x1494*x1495))+((r02*x1496))+((r01*sj7*x1495))+(((-1.0)*r12*x1493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r10*x1495))+(((-1.0)*x1494*x1498))+((r01*x1497))+((r11*sj7*x1495))+((r12*x1496))+((r02*x1493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1497))+((r10*x1498))+(((-1.0)*cj7*x1494*x1495))+((r02*x1496))+((r01*sj7*x1495))+(((-1.0)*r12*x1493))))+IKsqr(((((-1.0)*cj7*r10*x1495))+(((-1.0)*x1494*x1498))+((r01*x1497))+((r11*sj7*x1495))+((r12*x1496))+((r02*x1493))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x1497))+((r10*x1498))+(((-1.0)*cj7*x1494*x1495))+((r02*x1496))+((r01*sj7*x1495))+(((-1.0)*r12*x1493))), ((((-1.0)*cj7*r10*x1495))+(((-1.0)*x1494*x1498))+((r01*x1497))+((r11*sj7*x1495))+((r12*x1496))+((r02*x1493))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1499=IKcos(j4);
IkReal x1500=IKsin(j4);
IkReal x1501=(cj5*cj6);
IkReal x1502=((1.0)*cj7);
IkReal x1503=(r11*sj7);
IkReal x1504=((0.4)*cj2);
IkReal x1505=(cj7*sj5);
IkReal x1506=((0.4)*sj2);
IkReal x1507=((1.0)*r12);
IkReal x1508=(sj5*sj7);
IkReal x1509=(cj5*sj6);
IkReal x1510=((1.0)*r02);
IkReal x1511=((0.1363)*cj7);
IkReal x1512=((1.0)*sj6);
IkReal x1513=((1.0)*cj2);
IkReal x1514=((0.1363)*sj7);
IkReal x1515=(r01*sj7);
IkReal x1516=(cj7*sj6);
IkReal x1517=(sj2*x1499);
IkReal x1518=(sj2*x1500);
IkReal x1519=(x1500*x1513);
evalcond[0]=(((cj2*x1499))+((r00*x1516))+x1518+(((-1.0)*x1512*x1515))+(((-1.0)*cj6*x1510)));
evalcond[1]=((((-1.0)*x1519))+((r10*x1516))+x1517+(((-1.0)*x1503*x1512))+(((-1.0)*cj6*x1507)));
evalcond[2]=(((x1499*x1504))+((r01*x1511))+((r00*x1514))+(((-1.0)*px))+x1504+((x1500*x1506)));
evalcond[3]=(((x1499*x1506))+((r11*x1511))+((r10*x1514))+(((-1.0)*py))+x1506+(((-1.0)*x1500*x1504)));
evalcond[4]=((((-1.0)*x1519))+((x1501*x1515))+((r01*x1505))+((r00*x1508))+x1517+(((-1.0)*x1509*x1510))+(((-1.0)*r00*x1501*x1502)));
evalcond[5]=((((-1.0)*x1499*x1513))+((r11*x1505))+(((-1.0)*x1518))+(((-1.0)*x1507*x1509))+((r10*x1508))+((x1501*x1503))+(((-1.0)*r10*x1501*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1520=(sj6*sj7);
IkReal x1521=((1.0)*cj7*sj6);
if( IKabs((((r21*x1520))+((cj6*r22))+(((-1.0)*r20*x1521)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1521))+((r01*x1520))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x1520))+((cj6*r22))+(((-1.0)*r20*x1521))))+IKsqr(((((-1.0)*r00*x1521))+((r01*x1520))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*x1520))+((cj6*r22))+(((-1.0)*r20*x1521))), ((((-1.0)*r00*x1521))+((r01*x1520))+((cj6*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1522=IKsin(j4);
IkReal x1523=IKcos(j4);
IkReal x1524=(r21*sj7);
IkReal x1525=((1.0)*sj6);
IkReal x1526=(r20*sj7);
IkReal x1527=(cj5*cj6);
IkReal x1528=((1.0)*cj7);
IkReal x1529=(cj7*r01);
IkReal x1530=(r00*sj7);
IkReal x1531=((1.0)*cj6);
IkReal x1532=(r01*sj7);
IkReal x1533=(cj7*r21);
IkReal x1534=(cj7*sj6);
evalcond[0]=((((-1.0)*x1524*x1525))+(((-1.0)*r22*x1531))+((r20*x1534))+x1522);
evalcond[1]=((((-1.0)*x1525*x1532))+((r00*x1534))+(((-1.0)*r02*x1531))+x1523);
evalcond[2]=((0.1425)+(((0.4)*x1522))+(((-1.0)*pz))+(((0.1363)*x1526))+(((0.1363)*x1533)));
evalcond[3]=((0.4)+(((0.4)*x1523))+(((-1.0)*px))+(((0.1363)*x1529))+(((0.1363)*x1530)));
evalcond[4]=(((sj5*x1533))+((x1524*x1527))+((sj5*x1526))+(((-1.0)*cj5*r22*x1525))+x1523+(((-1.0)*r20*x1527*x1528)));
evalcond[5]=(((sj5*x1530))+((sj5*x1529))+(((-1.0)*r00*x1527*x1528))+(((-1.0)*cj5*r02*x1525))+((x1527*x1532))+(((-1.0)*x1522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1535=IKcos(j4);
IkReal x1536=IKsin(j4);
IkReal x1537=(r21*sj7);
IkReal x1538=((1.0)*sj6);
IkReal x1539=(r20*sj7);
IkReal x1540=(cj5*cj6);
IkReal x1541=((1.0)*cj7);
IkReal x1542=(cj7*r01);
IkReal x1543=(r00*sj7);
IkReal x1544=((1.0)*cj6);
IkReal x1545=(r01*sj7);
IkReal x1546=(cj7*r21);
IkReal x1547=(cj7*sj6);
IkReal x1548=((1.0)*x1536);
evalcond[0]=((((-1.0)*r02*x1544))+x1535+(((-1.0)*x1538*x1545))+((r00*x1547)));
evalcond[1]=((0.1425)+(((0.1363)*x1546))+(((-1.0)*pz))+(((0.1363)*x1539))+(((-0.4)*x1536)));
evalcond[2]=((0.4)+(((0.1363)*x1542))+(((0.1363)*x1543))+(((0.4)*x1535))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*x1537*x1538))+(((-1.0)*r22*x1544))+(((-1.0)*x1548))+((r20*x1547)));
evalcond[4]=(((sj5*x1539))+(((-1.0)*x1535))+((x1537*x1540))+(((-1.0)*cj5*r22*x1538))+(((-1.0)*r20*x1540*x1541))+((sj5*x1546)));
evalcond[5]=((((-1.0)*cj5*r02*x1538))+((x1540*x1545))+((sj5*x1542))+((sj5*x1543))+(((-1.0)*x1548))+(((-1.0)*r00*x1540*x1541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1549=IKsin(j4);
IkReal x1550=IKcos(j4);
IkReal x1551=((1.0)*cj6);
IkReal x1552=(cj5*cj7);
IkReal x1553=(cj7*sj5);
IkReal x1554=(r11*sj7);
IkReal x1555=(cj5*cj6);
IkReal x1556=(sj5*sj7);
IkReal x1557=((1.0)*sj6);
IkReal x1558=((0.1363)*cj7);
IkReal x1559=((0.1363)*sj7);
IkReal x1560=(r01*sj7);
IkReal x1561=(cj7*sj6);
IkReal x1562=(cj5*x1557);
evalcond[0]=(x1549+(((-1.0)*r12*x1551))+((r10*x1561))+(((-1.0)*x1554*x1557)));
evalcond[1]=((((-1.0)*r02*x1551))+(((-1.0)*x1557*x1560))+x1550+((r00*x1561)));
evalcond[2]=(((r11*x1558))+(((-1.0)*py))+(((0.4)*x1549))+((r10*x1559)));
evalcond[3]=((0.4)+((r00*x1559))+((r01*x1558))+(((0.4)*x1550))+(((-1.0)*px)));
evalcond[4]=(((r11*x1553))+x1550+((x1554*x1555))+(((-1.0)*r12*x1562))+(((-1.0)*r10*x1551*x1552))+((r10*x1556)));
evalcond[5]=((((-1.0)*x1549))+((x1555*x1560))+((r00*x1556))+((r01*x1553))+(((-1.0)*r02*x1562))+(((-1.0)*r00*x1551*x1552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1563=IKcos(j4);
IkReal x1564=IKsin(j4);
IkReal x1565=((1.0)*cj6);
IkReal x1566=(cj5*cj7);
IkReal x1567=(cj7*sj5);
IkReal x1568=(sj5*sj7);
IkReal x1569=(r11*sj7);
IkReal x1570=(cj5*cj6);
IkReal x1571=((0.1363)*cj7);
IkReal x1572=((1.0)*sj6);
IkReal x1573=((0.1363)*sj7);
IkReal x1574=(r01*sj7);
IkReal x1575=(cj7*sj6);
IkReal x1576=((1.0)*x1564);
IkReal x1577=(cj5*x1572);
evalcond[0]=((((-1.0)*r02*x1565))+(((-1.0)*x1572*x1574))+x1563+((r00*x1575)));
evalcond[1]=((((-1.0)*py))+((r11*x1571))+(((-0.4)*x1564))+((r10*x1573)));
evalcond[2]=((0.4)+(((-1.0)*px))+(((0.4)*x1563))+((r01*x1571))+((r00*x1573)));
evalcond[3]=((((-1.0)*x1569*x1572))+(((-1.0)*r12*x1565))+((r10*x1575))+(((-1.0)*x1576)));
evalcond[4]=(((x1569*x1570))+((r11*x1567))+((r10*x1568))+(((-1.0)*r12*x1577))+(((-1.0)*r10*x1565*x1566))+(((-1.0)*x1563)));
evalcond[5]=((((-1.0)*r02*x1577))+((x1570*x1574))+(((-1.0)*r00*x1565*x1566))+(((-1.0)*x1576))+((r00*x1568))+((r01*x1567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1578=(sj6*sj7);
IkReal x1579=((1.0)*cj7*sj6);
CheckValue<IkReal> x1580=IKPowWithIntegerCheck(cj3,-1);
if(!x1580.valid){
continue;
}
if( IKabs(((x1580.value)*((((r11*x1578))+((cj6*r12))+(((-1.0)*r10*x1579)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r02))+(((-1.0)*r00*x1579))+((r01*x1578)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1580.value)*((((r11*x1578))+((cj6*r12))+(((-1.0)*r10*x1579))))))+IKsqr((((cj6*r02))+(((-1.0)*r00*x1579))+((r01*x1578))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1580.value)*((((r11*x1578))+((cj6*r12))+(((-1.0)*r10*x1579))))), (((cj6*r02))+(((-1.0)*r00*x1579))+((r01*x1578))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1581=IKcos(j4);
IkReal x1582=IKsin(j4);
IkReal x1583=(r21*sj7);
IkReal x1584=((1.0)*sj6);
IkReal x1585=(r20*sj7);
IkReal x1586=(cj5*cj6);
IkReal x1587=(cj7*sj5);
IkReal x1588=(sj5*sj7);
IkReal x1589=((1.0)*cj6);
IkReal x1590=(r11*sj7);
IkReal x1591=((0.1363)*cj7);
IkReal x1592=((0.1363)*sj7);
IkReal x1593=(r01*sj7);
IkReal x1594=(cj7*sj6);
IkReal x1595=((0.4)*x1582);
IkReal x1596=((1.0)*cj7*x1586);
evalcond[0]=(((r00*x1594))+(((-1.0)*r02*x1589))+(((-1.0)*x1584*x1593))+x1581);
evalcond[1]=((0.4)+((r00*x1592))+((r01*x1591))+(((0.4)*x1581))+(((-1.0)*px)));
evalcond[2]=(((sj3*x1582))+((r20*x1594))+(((-1.0)*r22*x1589))+(((-1.0)*x1583*x1584)));
evalcond[3]=((((-1.0)*x1584*x1590))+((cj3*x1582))+((r10*x1594))+(((-1.0)*r12*x1589)));
evalcond[4]=((((0.1685)*sj3))+((r11*x1591))+(((-1.0)*py))+((cj3*x1595))+((r10*x1592)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((-1.0)*pz))+((r21*x1591))+(((0.1363)*x1585))+((sj3*x1595)));
evalcond[6]=(((sj3*x1581))+(((-1.0)*cj5*r22*x1584))+((x1583*x1586))+(((-1.0)*r20*x1596))+((r21*x1587))+((sj5*x1585)));
evalcond[7]=(((x1586*x1590))+((r11*x1587))+((cj3*x1581))+((r10*x1588))+(((-1.0)*cj5*r12*x1584))+(((-1.0)*r10*x1596)));
evalcond[8]=(((x1586*x1593))+((r01*x1587))+(((-1.0)*cj5*r02*x1584))+(((-1.0)*r00*x1596))+(((-1.0)*x1582))+((r00*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1597=(sj6*sj7);
IkReal x1598=((1.0)*cj7*sj6);
CheckValue<IkReal> x1599=IKPowWithIntegerCheck(sj3,-1);
if(!x1599.valid){
continue;
}
if( IKabs(((x1599.value)*((((cj6*r22))+(((-1.0)*r20*x1598))+((r21*x1597)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1597))+(((-1.0)*r00*x1598))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1599.value)*((((cj6*r22))+(((-1.0)*r20*x1598))+((r21*x1597))))))+IKsqr((((r01*x1597))+(((-1.0)*r00*x1598))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1599.value)*((((cj6*r22))+(((-1.0)*r20*x1598))+((r21*x1597))))), (((r01*x1597))+(((-1.0)*r00*x1598))+((cj6*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1600=IKcos(j4);
IkReal x1601=IKsin(j4);
IkReal x1602=(r21*sj7);
IkReal x1603=((1.0)*sj6);
IkReal x1604=(r20*sj7);
IkReal x1605=(cj5*cj6);
IkReal x1606=(cj7*sj5);
IkReal x1607=(sj5*sj7);
IkReal x1608=((1.0)*cj6);
IkReal x1609=(r11*sj7);
IkReal x1610=((0.1363)*cj7);
IkReal x1611=((0.1363)*sj7);
IkReal x1612=(r01*sj7);
IkReal x1613=(cj7*sj6);
IkReal x1614=((0.4)*x1601);
IkReal x1615=((1.0)*cj7*x1605);
evalcond[0]=(((r00*x1613))+x1600+(((-1.0)*x1603*x1612))+(((-1.0)*r02*x1608)));
evalcond[1]=((0.4)+(((0.4)*x1600))+((r01*x1610))+((r00*x1611))+(((-1.0)*px)));
evalcond[2]=(((sj3*x1601))+((r20*x1613))+(((-1.0)*r22*x1608))+(((-1.0)*x1602*x1603)));
evalcond[3]=(((cj3*x1601))+(((-1.0)*x1603*x1609))+((r10*x1613))+(((-1.0)*r12*x1608)));
evalcond[4]=((((0.1685)*sj3))+(((-1.0)*py))+((r11*x1610))+((cj3*x1614))+((r10*x1611)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((r21*x1610))+((sj3*x1614))+(((0.1363)*x1604))+(((-1.0)*pz)));
evalcond[6]=(((sj3*x1600))+(((-1.0)*r20*x1615))+((sj5*x1604))+(((-1.0)*cj5*r22*x1603))+((r21*x1606))+((x1602*x1605)));
evalcond[7]=(((r11*x1606))+((cj3*x1600))+(((-1.0)*cj5*r12*x1603))+(((-1.0)*r10*x1615))+((x1605*x1609))+((r10*x1607)));
evalcond[8]=((((-1.0)*x1601))+(((-1.0)*cj5*r02*x1603))+((r00*x1607))+((r01*x1606))+(((-1.0)*r00*x1615))+((x1605*x1612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1616=IKsin(j4);
IkReal x1617=IKcos(j4);
IkReal x1618=(r21*sj7);
IkReal x1619=((1.0)*sj6);
IkReal x1620=(r20*sj7);
IkReal x1621=(cj5*cj6);
IkReal x1622=((1.0)*cj7);
IkReal x1623=(cj7*r01);
IkReal x1624=(r00*sj7);
IkReal x1625=((1.0)*cj6);
IkReal x1626=(r01*sj7);
IkReal x1627=(cj7*r21);
IkReal x1628=(cj7*sj6);
evalcond[0]=((((-1.0)*x1618*x1619))+((r20*x1628))+x1616+(((-1.0)*r22*x1625)));
evalcond[1]=((0.1425)+(((0.4)*x1616))+(((-1.0)*pz))+(((0.1363)*x1627))+(((0.1363)*x1620)));
evalcond[2]=((-0.4)+(((-1.0)*px))+(((0.1363)*x1624))+(((0.1363)*x1623))+(((-0.4)*x1617)));
evalcond[3]=((((-1.0)*x1619*x1626))+((r00*x1628))+(((-1.0)*x1617))+(((-1.0)*r02*x1625)));
evalcond[4]=(((sj5*x1620))+((sj5*x1627))+x1617+(((-1.0)*cj5*r22*x1619))+((x1618*x1621))+(((-1.0)*r20*x1621*x1622)));
evalcond[5]=(((sj5*x1624))+((sj5*x1623))+(((-1.0)*cj5*r02*x1619))+x1616+(((-1.0)*r00*x1621*x1622))+((x1621*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1629=((0.34075)*cj7);
IkReal x1630=((0.34075)*sj7);
if( IKabs(((0.35625)+((r20*x1630))+((r21*x1629))+(((-2.5)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r01*x1629))+(((-2.5)*px))+((r00*x1630)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+((r20*x1630))+((r21*x1629))+(((-2.5)*pz))))+IKsqr(((-1.0)+((r01*x1629))+(((-2.5)*px))+((r00*x1630))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+((r20*x1630))+((r21*x1629))+(((-2.5)*pz))), ((-1.0)+((r01*x1629))+(((-2.5)*px))+((r00*x1630))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1631=IKsin(j4);
IkReal x1632=IKcos(j4);
IkReal x1633=(r21*sj7);
IkReal x1634=((1.0)*sj6);
IkReal x1635=(r20*sj7);
IkReal x1636=(cj5*cj6);
IkReal x1637=(cj7*r20);
IkReal x1638=(cj7*r01);
IkReal x1639=((1.0)*cj6);
IkReal x1640=(r00*sj7);
IkReal x1641=(r01*sj7);
IkReal x1642=(cj7*r21);
IkReal x1643=(cj7*r00);
IkReal x1644=((1.0)*x1632);
evalcond[0]=((0.1425)+(((0.1363)*x1642))+(((-0.4)*x1631))+(((0.1363)*x1635))+(((-1.0)*pz)));
evalcond[1]=((-0.4)+(((0.1363)*x1640))+(((-0.4)*x1632))+(((0.1363)*x1638))+(((-1.0)*px)));
evalcond[2]=((((-1.0)*r22*x1639))+(((-1.0)*x1633*x1634))+(((-1.0)*x1631))+((sj6*x1637)));
evalcond[3]=((((-1.0)*x1634*x1641))+(((-1.0)*x1644))+((sj6*x1643))+(((-1.0)*r02*x1639)));
evalcond[4]=(((x1636*x1641))+x1631+(((-1.0)*x1636*x1643))+((sj5*x1638))+((sj5*x1640))+(((-1.0)*cj5*r02*x1634)));
evalcond[5]=(((sj5*x1635))+(((-1.0)*x1644))+((sj5*x1642))+(((-1.0)*x1636*x1637))+(((-1.0)*cj5*r22*x1634))+((x1633*x1636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1645=((0.34075)*sj7);
IkReal x1646=((0.34075)*cj7);
if( IKabs((((r11*x1646))+((r10*x1645))+(((-2.5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*px))+((r00*x1645))+((r01*x1646)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1646))+((r10*x1645))+(((-2.5)*py))))+IKsqr(((-1.0)+(((-2.5)*px))+((r00*x1645))+((r01*x1646))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x1646))+((r10*x1645))+(((-2.5)*py))), ((-1.0)+(((-2.5)*px))+((r00*x1645))+((r01*x1646))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1647=IKsin(j4);
IkReal x1648=IKcos(j4);
IkReal x1649=(cj5*cj6);
IkReal x1650=((1.0)*cj7);
IkReal x1651=(r11*sj7);
IkReal x1652=(cj7*sj5);
IkReal x1653=((1.0)*r12);
IkReal x1654=((0.1363)*cj7);
IkReal x1655=(cj5*sj6);
IkReal x1656=((1.0)*r02);
IkReal x1657=(sj5*sj7);
IkReal x1658=((1.0)*sj6);
IkReal x1659=((0.1363)*sj7);
IkReal x1660=(r01*sj7);
IkReal x1661=(cj7*sj6);
IkReal x1662=((1.0)*x1648);
evalcond[0]=(((r10*x1659))+(((-0.4)*x1647))+((r11*x1654))+(((-1.0)*py)));
evalcond[1]=((-0.4)+(((-0.4)*x1648))+((r01*x1654))+((r00*x1659))+(((-1.0)*px)));
evalcond[2]=(((r10*x1661))+(((-1.0)*x1647))+(((-1.0)*cj6*x1653))+(((-1.0)*x1651*x1658)));
evalcond[3]=(((r00*x1661))+(((-1.0)*cj6*x1656))+(((-1.0)*x1662))+(((-1.0)*x1658*x1660)));
evalcond[4]=(x1647+(((-1.0)*x1655*x1656))+((r01*x1652))+((r00*x1657))+(((-1.0)*r00*x1649*x1650))+((x1649*x1660)));
evalcond[5]=(((r10*x1657))+(((-1.0)*r10*x1649*x1650))+((r11*x1652))+(((-1.0)*x1653*x1655))+((x1649*x1651))+(((-1.0)*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1663=((0.34075)*cj7);
IkReal x1664=((0.34075)*sj7);
if( IKabs(((((-1.0)*r10*x1664))+(((-1.0)*r11*x1663))+(((2.5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*px))+((r00*x1664))+((r01*x1663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1664))+(((-1.0)*r11*x1663))+(((2.5)*py))))+IKsqr(((-1.0)+(((-2.5)*px))+((r00*x1664))+((r01*x1663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*x1664))+(((-1.0)*r11*x1663))+(((2.5)*py))), ((-1.0)+(((-2.5)*px))+((r00*x1664))+((r01*x1663))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1665=IKsin(j4);
IkReal x1666=IKcos(j4);
IkReal x1667=((1.0)*cj6);
IkReal x1668=(cj5*cj7);
IkReal x1669=(cj7*sj5);
IkReal x1670=(r11*sj7);
IkReal x1671=(cj5*cj6);
IkReal x1672=(sj5*sj7);
IkReal x1673=((0.1363)*sj7);
IkReal x1674=((0.1363)*cj7);
IkReal x1675=((1.0)*sj6);
IkReal x1676=(r01*sj7);
IkReal x1677=(cj7*sj6);
IkReal x1678=(cj5*x1675);
evalcond[0]=(x1665+(((-1.0)*r12*x1667))+(((-1.0)*x1670*x1675))+((r10*x1677)));
evalcond[1]=((((-1.0)*py))+((r10*x1673))+((r11*x1674))+(((0.4)*x1665)));
evalcond[2]=((-0.4)+((r00*x1673))+(((-0.4)*x1666))+(((-1.0)*px))+((r01*x1674)));
evalcond[3]=(((r00*x1677))+(((-1.0)*x1666))+(((-1.0)*r02*x1667))+(((-1.0)*x1675*x1676)));
evalcond[4]=(x1666+((r11*x1669))+(((-1.0)*r10*x1667*x1668))+(((-1.0)*r12*x1678))+((r10*x1672))+((x1670*x1671)));
evalcond[5]=(((r00*x1672))+(((-1.0)*r02*x1678))+(((-1.0)*r00*x1667*x1668))+x1665+((r01*x1669))+((x1671*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1679=IKPowWithIntegerCheck(cj3,-1);
if(!x1679.valid){
continue;
}
if( IKabs(((x1679.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1679.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7))))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1679.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7))))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1680=IKcos(j4);
IkReal x1681=IKsin(j4);
IkReal x1682=(r21*sj7);
IkReal x1683=((1.0)*sj6);
IkReal x1684=(r20*sj7);
IkReal x1685=(cj5*cj6);
IkReal x1686=((1.0)*cj3);
IkReal x1687=(cj7*r01);
IkReal x1688=((1.0)*cj6);
IkReal x1689=(sj5*sj7);
IkReal x1690=((0.1363)*cj7);
IkReal x1691=(r11*sj7);
IkReal x1692=((0.1363)*sj7);
IkReal x1693=(r01*sj7);
IkReal x1694=(cj7*sj5);
IkReal x1695=(cj7*sj6);
IkReal x1696=((0.4)*x1681);
IkReal x1697=((1.0)*cj7*x1685);
evalcond[0]=((-0.4)+((r00*x1692))+(((-1.0)*px))+(((0.1363)*x1687))+(((-0.4)*x1680)));
evalcond[1]=(((r20*x1695))+(((-1.0)*x1682*x1683))+(((-1.0)*r22*x1688))+((sj3*x1681)));
evalcond[2]=(((r00*x1695))+(((-1.0)*x1680))+(((-1.0)*x1683*x1693))+(((-1.0)*r02*x1688)));
evalcond[3]=((((-1.0)*r12*x1688))+(((-1.0)*x1681*x1686))+((r10*x1695))+(((-1.0)*x1683*x1691)));
evalcond[4]=(((r10*x1692))+(((-0.1685)*sj3))+((r11*x1690))+(((-1.0)*py))+(((-1.0)*cj3*x1696)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((r21*x1690))+((sj3*x1696))+(((-1.0)*pz))+(((0.1363)*x1684)));
evalcond[6]=(((sj5*x1687))+((r00*x1689))+x1681+(((-1.0)*cj5*r02*x1683))+((x1685*x1693))+(((-1.0)*r00*x1697)));
evalcond[7]=(((sj5*x1684))+((r21*x1694))+(((-1.0)*r20*x1697))+(((-1.0)*cj5*r22*x1683))+((x1682*x1685))+((sj3*x1680)));
evalcond[8]=(((r10*x1689))+((r11*x1694))+(((-1.0)*x1680*x1686))+((x1685*x1691))+(((-1.0)*cj5*r12*x1683))+(((-1.0)*r10*x1697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(sj3,-1);
if(!x1698.valid){
continue;
}
if( IKabs(((x1698.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1698.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1698.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1699=IKcos(j4);
IkReal x1700=IKsin(j4);
IkReal x1701=(r21*sj7);
IkReal x1702=((1.0)*sj6);
IkReal x1703=(r20*sj7);
IkReal x1704=(cj5*cj6);
IkReal x1705=((1.0)*cj3);
IkReal x1706=(cj7*r01);
IkReal x1707=((1.0)*cj6);
IkReal x1708=(sj5*sj7);
IkReal x1709=((0.1363)*cj7);
IkReal x1710=(r11*sj7);
IkReal x1711=((0.1363)*sj7);
IkReal x1712=(r01*sj7);
IkReal x1713=(cj7*sj5);
IkReal x1714=(cj7*sj6);
IkReal x1715=((0.4)*x1700);
IkReal x1716=((1.0)*cj7*x1704);
evalcond[0]=((-0.4)+(((-0.4)*x1699))+(((0.1363)*x1706))+(((-1.0)*px))+((r00*x1711)));
evalcond[1]=(((r20*x1714))+((sj3*x1700))+(((-1.0)*r22*x1707))+(((-1.0)*x1701*x1702)));
evalcond[2]=((((-1.0)*x1699))+(((-1.0)*r02*x1707))+((r00*x1714))+(((-1.0)*x1702*x1712)));
evalcond[3]=(((r10*x1714))+(((-1.0)*x1700*x1705))+(((-1.0)*x1702*x1710))+(((-1.0)*r12*x1707)));
evalcond[4]=((((-1.0)*cj3*x1715))+(((-0.1685)*sj3))+((r11*x1709))+(((-1.0)*py))+((r10*x1711)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((0.1363)*x1703))+(((-1.0)*pz))+((sj3*x1715))+((r21*x1709)));
evalcond[6]=((((-1.0)*r00*x1716))+x1700+((r00*x1708))+((sj5*x1706))+((x1704*x1712))+(((-1.0)*cj5*r02*x1702)));
evalcond[7]=(((sj3*x1699))+((sj5*x1703))+(((-1.0)*r20*x1716))+((x1701*x1704))+((r21*x1713))+(((-1.0)*cj5*r22*x1702)));
evalcond[8]=((((-1.0)*cj5*r12*x1702))+((r11*x1713))+(((-1.0)*x1699*x1705))+((r10*x1708))+(((-1.0)*r10*x1716))+((x1704*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1717=(sj6*sj7);
IkReal x1718=((1.0)*cj7*sj6);
if( IKabs(((((-1.0)*r20*x1718))+((cj6*r22))+((r21*x1717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1717))+(((-1.0)*r10*x1718))+((cj6*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1718))+((cj6*r22))+((r21*x1717))))+IKsqr((((r11*x1717))+(((-1.0)*r10*x1718))+((cj6*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r20*x1718))+((cj6*r22))+((r21*x1717))), (((r11*x1717))+(((-1.0)*r10*x1718))+((cj6*r12))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1719=IKsin(j4);
IkReal x1720=IKcos(j4);
IkReal x1721=(r21*sj7);
IkReal x1722=((1.0)*sj6);
IkReal x1723=(r20*sj7);
IkReal x1724=(cj5*cj6);
IkReal x1725=(cj7*r11);
IkReal x1726=((1.0)*cj6);
IkReal x1727=(r11*sj7);
IkReal x1728=(r10*sj7);
IkReal x1729=(cj7*sj6);
IkReal x1730=(cj7*r21);
IkReal x1731=((1.0)*cj7*x1724);
evalcond[0]=((((-1.0)*r22*x1726))+x1719+((r20*x1729))+(((-1.0)*x1721*x1722)));
evalcond[1]=(x1720+((r10*x1729))+(((-1.0)*r12*x1726))+(((-1.0)*x1722*x1727)));
evalcond[2]=((0.1425)+(((0.1363)*x1723))+(((0.1363)*x1730))+(((-1.0)*pz))+(((0.4)*x1719)));
evalcond[3]=((0.4)+(((0.4)*x1720))+(((0.1363)*x1725))+(((0.1363)*x1728))+(((-1.0)*py)));
evalcond[4]=(((sj5*x1730))+((sj5*x1723))+x1720+((x1721*x1724))+(((-1.0)*r20*x1731))+(((-1.0)*cj5*r22*x1722)));
evalcond[5]=(((sj5*x1728))+((sj5*x1725))+((x1724*x1727))+(((-1.0)*r10*x1731))+(((-1.0)*x1719))+(((-1.0)*cj5*r12*x1722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1732=IKcos(j4);
IkReal x1733=IKsin(j4);
IkReal x1734=(r21*sj7);
IkReal x1735=((1.0)*sj6);
IkReal x1736=(r20*sj7);
IkReal x1737=(cj5*cj6);
IkReal x1738=(cj7*r11);
IkReal x1739=((1.0)*cj6);
IkReal x1740=(r11*sj7);
IkReal x1741=(r10*sj7);
IkReal x1742=(cj7*r21);
IkReal x1743=(cj7*sj6);
IkReal x1744=((1.0)*x1733);
IkReal x1745=((1.0)*cj7*x1737);
evalcond[0]=((((-1.0)*x1735*x1740))+x1732+(((-1.0)*r12*x1739))+((r10*x1743)));
evalcond[1]=((0.1425)+(((0.1363)*x1736))+(((-1.0)*pz))+(((0.1363)*x1742))+(((-0.4)*x1733)));
evalcond[2]=((0.4)+(((0.4)*x1732))+(((0.1363)*x1738))+(((-1.0)*py))+(((0.1363)*x1741)));
evalcond[3]=((((-1.0)*x1744))+((r20*x1743))+(((-1.0)*x1734*x1735))+(((-1.0)*r22*x1739)));
evalcond[4]=(((sj5*x1736))+((x1734*x1737))+(((-1.0)*r20*x1745))+(((-1.0)*x1732))+((sj5*x1742))+(((-1.0)*cj5*r22*x1735)));
evalcond[5]=(((sj5*x1738))+(((-1.0)*r10*x1745))+(((-1.0)*cj5*r12*x1735))+(((-1.0)*x1744))+((x1737*x1740))+((sj5*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1746=IKcos(j4);
IkReal x1747=IKsin(j4);
IkReal x1748=((1.0)*cj6);
IkReal x1749=(cj5*cj7);
IkReal x1750=(cj7*sj5);
IkReal x1751=(r11*sj7);
IkReal x1752=(cj5*cj6);
IkReal x1753=(sj5*sj7);
IkReal x1754=((1.0)*sj6);
IkReal x1755=((0.1363)*cj7);
IkReal x1756=((0.1363)*sj7);
IkReal x1757=(r01*sj7);
IkReal x1758=(cj7*sj6);
IkReal x1759=((1.0)*x1747);
IkReal x1760=(cj5*x1754);
evalcond[0]=((((-1.0)*r12*x1748))+x1746+(((-1.0)*x1751*x1754))+((r10*x1758)));
evalcond[1]=((((-0.4)*x1747))+(((-1.0)*px))+((r01*x1755))+((r00*x1756)));
evalcond[2]=((0.4)+(((-1.0)*py))+(((0.4)*x1746))+((r11*x1755))+((r10*x1756)));
evalcond[3]=((((-1.0)*x1759))+(((-1.0)*x1754*x1757))+((r00*x1758))+(((-1.0)*r02*x1748)));
evalcond[4]=((((-1.0)*r12*x1760))+(((-1.0)*x1759))+((r11*x1750))+(((-1.0)*r10*x1748*x1749))+((x1751*x1752))+((r10*x1753)));
evalcond[5]=(((x1752*x1757))+(((-1.0)*r02*x1760))+(((-1.0)*x1746))+(((-1.0)*r00*x1748*x1749))+((r01*x1750))+((r00*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1761=IKsin(j4);
IkReal x1762=IKcos(j4);
IkReal x1763=((1.0)*cj6);
IkReal x1764=(cj5*cj7);
IkReal x1765=(cj7*sj5);
IkReal x1766=(r11*sj7);
IkReal x1767=(cj5*cj6);
IkReal x1768=(sj5*sj7);
IkReal x1769=((1.0)*sj6);
IkReal x1770=((0.1363)*cj7);
IkReal x1771=((0.1363)*sj7);
IkReal x1772=(r01*sj7);
IkReal x1773=(cj7*sj6);
IkReal x1774=(cj5*x1769);
evalcond[0]=(x1762+(((-1.0)*x1766*x1769))+((r10*x1773))+(((-1.0)*r12*x1763)));
evalcond[1]=(x1761+(((-1.0)*r02*x1763))+((r00*x1773))+(((-1.0)*x1769*x1772)));
evalcond[2]=((((0.4)*x1761))+((r00*x1771))+((r01*x1770))+(((-1.0)*px)));
evalcond[3]=((0.4)+(((0.4)*x1762))+((r11*x1770))+((r10*x1771))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*r00*x1763*x1764))+((x1767*x1772))+x1762+((r01*x1765))+((r00*x1768))+(((-1.0)*r02*x1774)));
evalcond[5]=((((-1.0)*r10*x1763*x1764))+(((-1.0)*x1761))+((r11*x1765))+((r10*x1768))+((x1766*x1767))+(((-1.0)*r12*x1774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1775=(sj6*sj7);
IkReal x1776=(cj7*sj6);
CheckValue<IkReal> x1777=IKPowWithIntegerCheck(cj3,-1);
if(!x1777.valid){
continue;
}
if( IKabs(((x1777.value)*(((((-1.0)*r01*x1775))+((r00*x1776))+(((-1.0)*cj6*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1775))+(((-1.0)*r10*x1776))+((cj6*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1777.value)*(((((-1.0)*r01*x1775))+((r00*x1776))+(((-1.0)*cj6*r02))))))+IKsqr((((r11*x1775))+(((-1.0)*r10*x1776))+((cj6*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1777.value)*(((((-1.0)*r01*x1775))+((r00*x1776))+(((-1.0)*cj6*r02))))), (((r11*x1775))+(((-1.0)*r10*x1776))+((cj6*r12))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1778=IKcos(j4);
IkReal x1779=IKsin(j4);
IkReal x1780=(r21*sj7);
IkReal x1781=((1.0)*sj6);
IkReal x1782=(r20*sj7);
IkReal x1783=(cj5*cj6);
IkReal x1784=((1.0)*cj3);
IkReal x1785=(cj7*r01);
IkReal x1786=(sj5*sj7);
IkReal x1787=((1.0)*cj6);
IkReal x1788=(r11*sj7);
IkReal x1789=((0.1363)*cj7);
IkReal x1790=((0.1363)*sj7);
IkReal x1791=(r01*sj7);
IkReal x1792=(cj7*sj5);
IkReal x1793=(cj7*sj6);
IkReal x1794=((0.4)*x1779);
IkReal x1795=((1.0)*cj7*x1783);
evalcond[0]=(((r10*x1793))+x1778+(((-1.0)*r12*x1787))+(((-1.0)*x1781*x1788)));
evalcond[1]=((0.4)+((r10*x1790))+(((0.4)*x1778))+(((-1.0)*py))+((r11*x1789)));
evalcond[2]=((((-1.0)*r22*x1787))+((sj3*x1779))+(((-1.0)*x1780*x1781))+((r20*x1793)));
evalcond[3]=(((r00*x1793))+(((-1.0)*x1779*x1784))+(((-1.0)*x1781*x1791))+(((-1.0)*r02*x1787)));
evalcond[4]=(((r00*x1790))+(((-0.1685)*sj3))+(((-1.0)*px))+(((0.1363)*x1785))+(((-1.0)*cj3*x1794)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((sj3*x1794))+((r21*x1789))+(((-1.0)*pz))+(((0.1363)*x1782)));
evalcond[6]=((((-1.0)*cj5*r22*x1781))+((r21*x1792))+((sj3*x1778))+(((-1.0)*r20*x1795))+((x1780*x1783))+((sj5*x1782)));
evalcond[7]=((((-1.0)*r10*x1795))+((r10*x1786))+((x1783*x1788))+(((-1.0)*x1779))+((r11*x1792))+(((-1.0)*cj5*r12*x1781)));
evalcond[8]=(((x1783*x1791))+(((-1.0)*cj5*r02*x1781))+(((-1.0)*r00*x1795))+(((-1.0)*x1778*x1784))+((r00*x1786))+((sj5*x1785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1796=(sj6*sj7);
IkReal x1797=((1.0)*cj7*sj6);
CheckValue<IkReal> x1798=IKPowWithIntegerCheck(sj3,-1);
if(!x1798.valid){
continue;
}
if( IKabs(((x1798.value)*((((r21*x1796))+((cj6*r22))+(((-1.0)*r20*x1797)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1797))+((cj6*r12))+((r11*x1796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1798.value)*((((r21*x1796))+((cj6*r22))+(((-1.0)*r20*x1797))))))+IKsqr(((((-1.0)*r10*x1797))+((cj6*r12))+((r11*x1796))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1798.value)*((((r21*x1796))+((cj6*r22))+(((-1.0)*r20*x1797))))), ((((-1.0)*r10*x1797))+((cj6*r12))+((r11*x1796))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1799=IKcos(j4);
IkReal x1800=IKsin(j4);
IkReal x1801=(r21*sj7);
IkReal x1802=((1.0)*sj6);
IkReal x1803=(r20*sj7);
IkReal x1804=(cj5*cj6);
IkReal x1805=((1.0)*cj3);
IkReal x1806=(cj7*r01);
IkReal x1807=(sj5*sj7);
IkReal x1808=((1.0)*cj6);
IkReal x1809=(r11*sj7);
IkReal x1810=((0.1363)*cj7);
IkReal x1811=((0.1363)*sj7);
IkReal x1812=(r01*sj7);
IkReal x1813=(cj7*sj5);
IkReal x1814=(cj7*sj6);
IkReal x1815=((0.4)*x1800);
IkReal x1816=((1.0)*cj7*x1804);
evalcond[0]=(x1799+(((-1.0)*x1802*x1809))+((r10*x1814))+(((-1.0)*r12*x1808)));
evalcond[1]=((0.4)+(((-1.0)*py))+(((0.4)*x1799))+((r11*x1810))+((r10*x1811)));
evalcond[2]=(((r20*x1814))+(((-1.0)*x1801*x1802))+((sj3*x1800))+(((-1.0)*r22*x1808)));
evalcond[3]=((((-1.0)*x1800*x1805))+(((-1.0)*r02*x1808))+((r00*x1814))+(((-1.0)*x1802*x1812)));
evalcond[4]=((((0.1363)*x1806))+(((-0.1685)*sj3))+(((-1.0)*cj3*x1815))+(((-1.0)*px))+((r00*x1811)));
evalcond[5]=((0.1425)+(((0.1363)*x1803))+(((-0.1685)*cj3))+((sj3*x1815))+(((-1.0)*pz))+((r21*x1810)));
evalcond[6]=(((sj3*x1799))+((x1801*x1804))+((sj5*x1803))+(((-1.0)*cj5*r22*x1802))+((r21*x1813))+(((-1.0)*r20*x1816)));
evalcond[7]=((((-1.0)*r10*x1816))+(((-1.0)*cj5*r12*x1802))+((r11*x1813))+((x1804*x1809))+((r10*x1807))+(((-1.0)*x1800)));
evalcond[8]=(((x1804*x1812))+(((-1.0)*x1799*x1805))+((sj5*x1806))+(((-1.0)*r00*x1816))+((r00*x1807))+(((-1.0)*cj5*r02*x1802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1817=IKsin(j4);
IkReal x1818=IKcos(j4);
IkReal x1819=(r21*sj7);
IkReal x1820=((1.0)*sj6);
IkReal x1821=(r20*sj7);
IkReal x1822=(cj5*cj6);
IkReal x1823=(cj7*r11);
IkReal x1824=((1.0)*cj6);
IkReal x1825=(r11*sj7);
IkReal x1826=(r10*sj7);
IkReal x1827=(cj7*sj6);
IkReal x1828=(cj7*r21);
IkReal x1829=((1.0)*cj7*x1822);
evalcond[0]=((((-1.0)*x1819*x1820))+(((-1.0)*r22*x1824))+x1817+((r20*x1827)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.4)*x1817))+(((0.1363)*x1828))+(((0.1363)*x1821)));
evalcond[2]=((-0.4)+(((-0.4)*x1818))+(((-1.0)*py))+(((0.1363)*x1823))+(((0.1363)*x1826)));
evalcond[3]=(((r10*x1827))+(((-1.0)*r12*x1824))+(((-1.0)*x1820*x1825))+(((-1.0)*x1818)));
evalcond[4]=(((x1819*x1822))+(((-1.0)*cj5*r22*x1820))+x1818+(((-1.0)*r20*x1829))+((sj5*x1828))+((sj5*x1821)));
evalcond[5]=(((x1822*x1825))+x1817+(((-1.0)*cj5*r12*x1820))+(((-1.0)*r10*x1829))+((sj5*x1826))+((sj5*x1823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1830=((0.34075)*cj7);
IkReal x1831=((0.34075)*sj7);
if( IKabs(((0.35625)+(((-2.5)*pz))+((r21*x1830))+((r20*x1831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r10*x1831))+(((-2.5)*py))+((r11*x1830)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((-2.5)*pz))+((r21*x1830))+((r20*x1831))))+IKsqr(((-1.0)+((r10*x1831))+(((-2.5)*py))+((r11*x1830))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((-2.5)*pz))+((r21*x1830))+((r20*x1831))), ((-1.0)+((r10*x1831))+(((-2.5)*py))+((r11*x1830))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1832=IKsin(j4);
IkReal x1833=IKcos(j4);
IkReal x1834=(r21*sj7);
IkReal x1835=((1.0)*sj6);
IkReal x1836=(r20*sj7);
IkReal x1837=(cj5*cj6);
IkReal x1838=(cj7*r11);
IkReal x1839=((1.0)*cj6);
IkReal x1840=(r11*sj7);
IkReal x1841=(r10*sj7);
IkReal x1842=(cj7*r21);
IkReal x1843=(cj7*sj6);
IkReal x1844=((1.0)*x1833);
IkReal x1845=((1.0)*cj7*x1837);
evalcond[0]=((0.1425)+(((-0.4)*x1832))+(((0.1363)*x1842))+(((-1.0)*pz))+(((0.1363)*x1836)));
evalcond[1]=((-0.4)+(((-0.4)*x1833))+(((0.1363)*x1841))+(((-1.0)*py))+(((0.1363)*x1838)));
evalcond[2]=((((-1.0)*x1834*x1835))+(((-1.0)*x1832))+((r20*x1843))+(((-1.0)*r22*x1839)));
evalcond[3]=((((-1.0)*x1844))+((r10*x1843))+(((-1.0)*x1835*x1840))+(((-1.0)*r12*x1839)));
evalcond[4]=(((x1837*x1840))+((sj5*x1841))+(((-1.0)*r10*x1845))+(((-1.0)*cj5*r12*x1835))+x1832+((sj5*x1838)));
evalcond[5]=(((sj5*x1842))+(((-1.0)*x1844))+(((-1.0)*cj5*r22*x1835))+((sj5*x1836))+(((-1.0)*r20*x1845))+((x1834*x1837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1846=((0.34075)*sj7);
IkReal x1847=((0.34075)*cj7);
if( IKabs(((((-1.0)*r00*x1846))+(((-1.0)*r01*x1847))+(((2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*py))+((r10*x1846))+((r11*x1847)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1846))+(((-1.0)*r01*x1847))+(((2.5)*px))))+IKsqr(((-1.0)+(((-2.5)*py))+((r10*x1846))+((r11*x1847))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x1846))+(((-1.0)*r01*x1847))+(((2.5)*px))), ((-1.0)+(((-2.5)*py))+((r10*x1846))+((r11*x1847))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1848=IKsin(j4);
IkReal x1849=IKcos(j4);
IkReal x1850=((1.0)*cj6);
IkReal x1851=(cj5*cj7);
IkReal x1852=(cj7*sj5);
IkReal x1853=(r11*sj7);
IkReal x1854=(cj5*cj6);
IkReal x1855=(sj5*sj7);
IkReal x1856=((1.0)*sj6);
IkReal x1857=((0.1363)*cj7);
IkReal x1858=((0.1363)*sj7);
IkReal x1859=(r01*sj7);
IkReal x1860=(cj7*sj6);
IkReal x1861=(cj5*x1856);
evalcond[0]=((((-1.0)*x1856*x1859))+(((-1.0)*r02*x1850))+x1848+((r00*x1860)));
evalcond[1]=(((r01*x1857))+((r00*x1858))+(((-1.0)*px))+(((0.4)*x1848)));
evalcond[2]=((-0.4)+((r10*x1858))+(((-1.0)*py))+(((-0.4)*x1849))+((r11*x1857)));
evalcond[3]=(((r10*x1860))+(((-1.0)*r12*x1850))+(((-1.0)*x1849))+(((-1.0)*x1853*x1856)));
evalcond[4]=(((r10*x1855))+(((-1.0)*r10*x1850*x1851))+(((-1.0)*r12*x1861))+((x1853*x1854))+x1848+((r11*x1852)));
evalcond[5]=((((-1.0)*r02*x1861))+((r01*x1852))+((r00*x1855))+(((-1.0)*r00*x1850*x1851))+((x1854*x1859))+x1849);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1862=((0.34075)*sj7);
IkReal x1863=((0.34075)*cj7);
if( IKabs(((((-2.5)*px))+((r01*x1863))+((r00*x1862)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r11*x1863))+(((-2.5)*py))+((r10*x1862)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.5)*px))+((r01*x1863))+((r00*x1862))))+IKsqr(((-1.0)+((r11*x1863))+(((-2.5)*py))+((r10*x1862))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.5)*px))+((r01*x1863))+((r00*x1862))), ((-1.0)+((r11*x1863))+(((-2.5)*py))+((r10*x1862))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1864=IKcos(j4);
IkReal x1865=IKsin(j4);
IkReal x1866=((1.0)*cj6);
IkReal x1867=(cj5*cj7);
IkReal x1868=(cj7*sj5);
IkReal x1869=(sj5*sj7);
IkReal x1870=(r11*sj7);
IkReal x1871=(cj5*cj6);
IkReal x1872=((0.1363)*cj7);
IkReal x1873=((1.0)*sj6);
IkReal x1874=((0.1363)*sj7);
IkReal x1875=(r01*sj7);
IkReal x1876=(cj7*sj6);
IkReal x1877=((1.0)*x1864);
IkReal x1878=(cj5*x1873);
evalcond[0]=(((r01*x1872))+(((-1.0)*px))+((r00*x1874))+(((-0.4)*x1865)));
evalcond[1]=((-0.4)+(((-1.0)*py))+((r10*x1874))+(((-0.4)*x1864))+((r11*x1872)));
evalcond[2]=((((-1.0)*x1877))+(((-1.0)*x1870*x1873))+(((-1.0)*r12*x1866))+((r10*x1876)));
evalcond[3]=((((-1.0)*x1873*x1875))+(((-1.0)*r02*x1866))+((r00*x1876))+(((-1.0)*x1865)));
evalcond[4]=(((r11*x1868))+(((-1.0)*r10*x1866*x1867))+x1865+(((-1.0)*r12*x1878))+((r10*x1869))+((x1870*x1871)));
evalcond[5]=((((-1.0)*x1877))+(((-1.0)*r02*x1878))+((x1871*x1875))+(((-1.0)*r00*x1866*x1867))+((r01*x1868))+((r00*x1869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(cj3,-1);
if(!x1879.valid){
continue;
}
if( IKabs(((x1879.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1879.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1879.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1880=IKcos(j4);
IkReal x1881=IKsin(j4);
IkReal x1882=(r21*sj7);
IkReal x1883=((1.0)*sj6);
IkReal x1884=(r20*sj7);
IkReal x1885=(cj5*cj6);
IkReal x1886=(cj7*sj5);
IkReal x1887=(sj5*sj7);
IkReal x1888=((1.0)*cj6);
IkReal x1889=(r11*sj7);
IkReal x1890=((0.1363)*cj7);
IkReal x1891=((0.1363)*sj7);
IkReal x1892=(r01*sj7);
IkReal x1893=(cj7*sj6);
IkReal x1894=((0.4)*x1881);
IkReal x1895=((1.0)*cj7*x1885);
evalcond[0]=((-0.4)+((r11*x1890))+((r10*x1891))+(((-1.0)*py))+(((-0.4)*x1880)));
evalcond[1]=((((-1.0)*x1882*x1883))+((r20*x1893))+(((-1.0)*r22*x1888))+((sj3*x1881)));
evalcond[2]=((((-1.0)*x1883*x1889))+(((-1.0)*r12*x1888))+((r10*x1893))+(((-1.0)*x1880)));
evalcond[3]=((((-1.0)*x1883*x1892))+((r00*x1893))+(((-1.0)*r02*x1888))+((cj3*x1881)));
evalcond[4]=((((0.1685)*sj3))+((r01*x1890))+((r00*x1891))+(((-1.0)*px))+((cj3*x1894)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((sj3*x1894))+(((0.1363)*x1884))+(((-1.0)*pz))+((r21*x1890)));
evalcond[6]=((((-1.0)*r10*x1895))+((r10*x1887))+x1881+(((-1.0)*cj5*r12*x1883))+((x1885*x1889))+((r11*x1886)));
evalcond[7]=(((r21*x1886))+((sj5*x1884))+((x1882*x1885))+(((-1.0)*cj5*r22*x1883))+(((-1.0)*r20*x1895))+((sj3*x1880)));
evalcond[8]=(((x1885*x1892))+((r00*x1887))+((r01*x1886))+((cj3*x1880))+(((-1.0)*cj5*r02*x1883))+(((-1.0)*r00*x1895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(sj3,-1);
if(!x1896.valid){
continue;
}
if( IKabs(((x1896.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1896.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1896.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1897=IKcos(j4);
IkReal x1898=IKsin(j4);
IkReal x1899=(r21*sj7);
IkReal x1900=((1.0)*sj6);
IkReal x1901=(r20*sj7);
IkReal x1902=(cj5*cj6);
IkReal x1903=(cj7*sj5);
IkReal x1904=(sj5*sj7);
IkReal x1905=((1.0)*cj6);
IkReal x1906=(r11*sj7);
IkReal x1907=((0.1363)*cj7);
IkReal x1908=((0.1363)*sj7);
IkReal x1909=(r01*sj7);
IkReal x1910=(cj7*sj6);
IkReal x1911=((0.4)*x1898);
IkReal x1912=((1.0)*cj7*x1902);
evalcond[0]=((-0.4)+(((-1.0)*py))+((r11*x1907))+(((-0.4)*x1897))+((r10*x1908)));
evalcond[1]=((((-1.0)*x1899*x1900))+((sj3*x1898))+(((-1.0)*r22*x1905))+((r20*x1910)));
evalcond[2]=(((r10*x1910))+(((-1.0)*x1900*x1906))+(((-1.0)*r12*x1905))+(((-1.0)*x1897)));
evalcond[3]=(((r00*x1910))+(((-1.0)*x1900*x1909))+((cj3*x1898))+(((-1.0)*r02*x1905)));
evalcond[4]=((((0.1685)*sj3))+((r01*x1907))+((r00*x1908))+((cj3*x1911))+(((-1.0)*px)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((r21*x1907))+(((-1.0)*pz))+(((0.1363)*x1901))+((sj3*x1911)));
evalcond[6]=((((-1.0)*cj5*r12*x1900))+(((-1.0)*r10*x1912))+x1898+((r11*x1903))+((x1902*x1906))+((r10*x1904)));
evalcond[7]=((((-1.0)*cj5*r22*x1900))+((sj3*x1897))+((r21*x1903))+((x1899*x1902))+(((-1.0)*r20*x1912))+((sj5*x1901)));
evalcond[8]=((((-1.0)*r00*x1912))+((r01*x1903))+((r00*x1904))+(((-1.0)*cj5*r02*x1900))+((cj3*x1897))+((x1902*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(sj3,-1);
if(!x1919.valid){
continue;
}
IkReal x1913=x1919.value;
IkReal x1914=((1.0)*sj6);
IkReal x1915=(r21*sj7);
IkReal x1916=(cj2*cj3);
IkReal x1917=(cj6*r22);
IkReal x1918=(cj7*r20);
CheckValue<IkReal> x1920=IKPowWithIntegerCheck(sj2,-1);
if(!x1920.valid){
continue;
}
if( IKabs((x1913*(((((-1.0)*x1914*x1918))+x1917+((sj6*x1915)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1913*(x1920.value)*((((r11*sj3*sj6*sj7))+(((-1.0)*cj7*r10*sj3*x1914))+(((-1.0)*x1914*x1915*x1916))+((cj6*r12*sj3))+((sj6*x1916*x1918))+(((-1.0)*x1916*x1917)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1913*(((((-1.0)*x1914*x1918))+x1917+((sj6*x1915))))))+IKsqr((x1913*(x1920.value)*((((r11*sj3*sj6*sj7))+(((-1.0)*cj7*r10*sj3*x1914))+(((-1.0)*x1914*x1915*x1916))+((cj6*r12*sj3))+((sj6*x1916*x1918))+(((-1.0)*x1916*x1917))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1913*(((((-1.0)*x1914*x1918))+x1917+((sj6*x1915))))), (x1913*(x1920.value)*((((r11*sj3*sj6*sj7))+(((-1.0)*cj7*r10*sj3*x1914))+(((-1.0)*x1914*x1915*x1916))+((cj6*r12*sj3))+((sj6*x1916*x1918))+(((-1.0)*x1916*x1917))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1921=IKsin(j4);
IkReal x1922=IKcos(j4);
IkReal x1923=(r21*sj7);
IkReal x1924=((1.0)*sj6);
IkReal x1925=(r20*sj7);
IkReal x1926=(cj5*cj6);
IkReal x1927=(cj7*sj5);
IkReal x1928=((0.1685)*sj3);
IkReal x1929=(cj2*cj3);
IkReal x1930=(sj5*sj7);
IkReal x1931=((1.0)*cj6);
IkReal x1932=(r11*sj7);
IkReal x1933=((0.1363)*cj7);
IkReal x1934=((0.1363)*sj7);
IkReal x1935=(cj3*sj2);
IkReal x1936=(r01*sj7);
IkReal x1937=(cj7*sj6);
IkReal x1938=((0.4)*x1922);
IkReal x1939=((0.4)*x1921);
IkReal x1940=((1.0)*x1921);
IkReal x1941=((1.0)*cj7*x1926);
evalcond[0]=((((-1.0)*r22*x1931))+((sj3*x1921))+(((-1.0)*x1923*x1924))+((r20*x1937)));
evalcond[1]=((0.1425)+(((-0.1685)*cj3))+((r21*x1933))+(((-1.0)*pz))+(((0.1363)*x1925))+((sj3*x1939)));
evalcond[2]=(((x1921*x1929))+(((-1.0)*r12*x1931))+(((-1.0)*x1924*x1932))+((sj2*x1922))+((r10*x1937)));
evalcond[3]=(((r00*x1937))+(((-1.0)*x1924*x1936))+(((-1.0)*x1935*x1940))+((cj2*x1922))+(((-1.0)*r02*x1931)));
evalcond[4]=((((-1.0)*cj5*r22*x1924))+((x1923*x1926))+((sj3*x1922))+((sj5*x1925))+((r21*x1927))+(((-1.0)*r20*x1941)));
evalcond[5]=(((r00*x1934))+((r01*x1933))+(((0.4)*cj2))+((cj2*x1938))+(((-1.0)*px))+(((-1.0)*sj2*x1928))+(((-1.0)*x1935*x1939)));
evalcond[6]=(((sj2*x1938))+(((-1.0)*py))+((cj2*x1928))+(((0.4)*sj2))+((r11*x1933))+((x1929*x1939))+((r10*x1934)));
evalcond[7]=((((-1.0)*sj2*x1940))+((x1926*x1932))+(((-1.0)*r10*x1941))+(((-1.0)*cj5*r12*x1924))+((r11*x1927))+((r10*x1930))+((x1922*x1929)));
evalcond[8]=(((r01*x1927))+((r00*x1930))+(((-1.0)*cj5*r02*x1924))+(((-1.0)*x1922*x1935))+((x1926*x1936))+(((-1.0)*cj2*x1940))+(((-1.0)*r00*x1941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1947=IKPowWithIntegerCheck(sj3,-1);
if(!x1947.valid){
continue;
}
IkReal x1942=x1947.value;
IkReal x1943=(cj3*sj2);
IkReal x1944=(cj6*r22);
IkReal x1945=(r21*sj6*sj7);
IkReal x1946=((1.0)*cj7*sj6);
CheckValue<IkReal> x1948=IKPowWithIntegerCheck(cj2,-1);
if(!x1948.valid){
continue;
}
if( IKabs((x1942*((x1944+x1945+(((-1.0)*r20*x1946)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1942*(x1948.value)*(((((-1.0)*r20*x1943*x1946))+((x1943*x1944))+((x1943*x1945))+(((-1.0)*r00*sj3*x1946))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1942*((x1944+x1945+(((-1.0)*r20*x1946))))))+IKsqr((x1942*(x1948.value)*(((((-1.0)*r20*x1943*x1946))+((x1943*x1944))+((x1943*x1945))+(((-1.0)*r00*sj3*x1946))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1942*((x1944+x1945+(((-1.0)*r20*x1946))))), (x1942*(x1948.value)*(((((-1.0)*r20*x1943*x1946))+((x1943*x1944))+((x1943*x1945))+(((-1.0)*r00*sj3*x1946))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1949=IKsin(j4);
IkReal x1950=IKcos(j4);
IkReal x1951=(r21*sj7);
IkReal x1952=((1.0)*sj6);
IkReal x1953=(r20*sj7);
IkReal x1954=(cj5*cj6);
IkReal x1955=(cj7*sj5);
IkReal x1956=((0.1685)*sj3);
IkReal x1957=(cj2*cj3);
IkReal x1958=(sj5*sj7);
IkReal x1959=((1.0)*cj6);
IkReal x1960=(r11*sj7);
IkReal x1961=((0.1363)*cj7);
IkReal x1962=((0.1363)*sj7);
IkReal x1963=(cj3*sj2);
IkReal x1964=(r01*sj7);
IkReal x1965=(cj7*sj6);
IkReal x1966=((0.4)*x1950);
IkReal x1967=((0.4)*x1949);
IkReal x1968=((1.0)*x1949);
IkReal x1969=((1.0)*cj7*x1954);
evalcond[0]=((((-1.0)*r22*x1959))+((sj3*x1949))+((r20*x1965))+(((-1.0)*x1951*x1952)));
evalcond[1]=((0.1425)+(((-0.1685)*cj3))+(((0.1363)*x1953))+((sj3*x1967))+((r21*x1961))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*x1952*x1960))+((sj2*x1950))+((r10*x1965))+(((-1.0)*r12*x1959))+((x1949*x1957)));
evalcond[3]=((((-1.0)*x1952*x1964))+((cj2*x1950))+(((-1.0)*r02*x1959))+((r00*x1965))+(((-1.0)*x1963*x1968)));
evalcond[4]=(((sj3*x1950))+((sj5*x1953))+((x1951*x1954))+((r21*x1955))+(((-1.0)*cj5*r22*x1952))+(((-1.0)*r20*x1969)));
evalcond[5]=((((-1.0)*sj2*x1956))+(((0.4)*cj2))+((cj2*x1966))+((r00*x1962))+(((-1.0)*px))+((r01*x1961))+(((-1.0)*x1963*x1967)));
evalcond[6]=(((cj2*x1956))+((r10*x1962))+((sj2*x1966))+((r11*x1961))+((x1957*x1967))+(((-1.0)*py))+(((0.4)*sj2)));
evalcond[7]=((((-1.0)*cj5*r12*x1952))+((r11*x1955))+(((-1.0)*sj2*x1968))+((x1950*x1957))+((r10*x1958))+((x1954*x1960))+(((-1.0)*r10*x1969)));
evalcond[8]=(((x1954*x1964))+(((-1.0)*r00*x1969))+(((-1.0)*cj5*r02*x1952))+(((-1.0)*x1950*x1963))+(((-1.0)*cj2*x1968))+((r01*x1955))+((r00*x1958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "3909086682c4322524e38e8787d9e857"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
